
! TBH:  OVERWRITE a_alt,a_mut,a_ru,a_rv,a_scalar,a_scalar_old,a_scalar_tends,a_ww,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  a_advect_tend  ( [i-3,i,i+3], [j-3,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar       ( [i-3,i,i+2], [j-3,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar_old   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar_tends ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft           ( [i-3,i,i+3], [j-3,j,j+3] ) 
! TBH:  HORIZONTAL DEPENDENCE:  msfu           ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv           ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  ru             ( [i-2,i,i+3], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  rv             ( [    i    ], [j-2,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  scalar         ( [i-3,i,i+3], [j-3,i,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  scalar_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd          ( [i-1,i,i+1], [j-1,j,j+1] )

subroutine a_rk_scalar_tend( scs, sce, config_flags, rk_step, ru, a_ru, rv, a_rv, ww, a_ww, mut, a_mut, alt, a_alt, scalar_old, &
&a_scalar_old, scalar, a_scalar, a_scalar_tends, a_advect_tend, base, moist_step, fnm, fnp, msfu, msfv, msft, rdx, rdy, rdn, rdnw, &
&kvdif, xkmhd, a_xkmhd, leapfrog, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real a_advect_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_alt(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mut(ims:ime,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: sce
integer, intent(in) :: scs
real, intent(inout) :: a_scalar(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: a_scalar_old(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: a_scalar_tends(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: a_ww(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(in) :: alt(ims:ime,kms:kme,jms:jme)
real, intent(in) :: base(kms:kme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: fnm(kms:kme)
real, intent(in) :: fnp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: kvdif
logical, intent(in) :: leapfrog
logical, intent(in) :: moist_step
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mut(ims:ime,jms:jme)
real, intent(in) :: rdn(kms:kme)
real, intent(in) :: rdnw(kms:kme)
real, intent(in) :: rdx
real, intent(in) :: rdy
integer, intent(in) :: rk_step
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: scalar(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: scalar_old(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(in) :: ww(ims:ime,kms:kme,jms:jme)
real, intent(in) :: xkmhd(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
integer im
real kvdq

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
kvdq = kvdif/prandtl
! recompute : kvdq
a_scalar_loop: do im = sce, scs, -1
  a_diff_opt1: if (config_flags%diff_opt .eq. 1) then
    a_rk_step_1: if (rk_step .eq. 1) then
      if ( .not. leapfrog) then
        a_pbl_test: if (config_flags%bl_pbl_physics .eq. 0) then
          if (moist_step .and. im .eq. p_qv) then
! TBH:  OVERWRITE a_alt,a_scalar,a_mut,a_scalar_tends
! TBH:  HORIZONTAL DEPENDENCE:  NONE
            call a_vertical_diffusion_mp( scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),base,alt,&
&a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
          else
! TBH:  OVERWRITE a_alt,a_scalar,a_mut,a_scalar_tends
! TBH:  HORIZONTAL DEPENDENCE:  NONE
            call a_vertical_diffusion( 'm',scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),alt,&
&a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
          endif
        endif a_pbl_test
! TBH:  OVERWRITE a_scalar,a_mut,a_scalar_tends,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  scalar         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar_tends ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd          ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu           ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv           ( [    i    ], [    j,j+1] )
        call a_horizontal_diffusion( 'm',scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),mut,a_mut,&
&config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      else
        a_pbl_test_lf: if (config_flags%bl_pbl_physics .eq. 0) then
          if (moist_step .and. im .eq. p_qv) then
! TBH:  OVERWRITE a_alt,a_scalar_old,a_mut,,a_scalar_tends
! TBH:  HORIZONTAL DEPENDENCE:  NONE
            call a_vertical_diffusion_mp( scalar_old(ims,kms,jms,im),a_scalar_old(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),&
&base,alt,a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
          else
! TBH:  OVERWRITE a_alt,a_scalar_old,a_mut,,a_scalar_tends
! TBH:  HORIZONTAL DEPENDENCE:  NONE
            call a_vertical_diffusion( 'm',scalar_old(ims,kms,jms,im),a_scalar_old(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),&
&alt,a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
          endif
        endif a_pbl_test_lf
! TBH:  OVERWRITE a_scalar_old,a_mut,a_scalar_tends,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  scalar_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar_old   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar_tends ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd          ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu           ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv           ( [    i    ], [    j,j+1] )
        call a_horizontal_diffusion( 'm',scalar_old(ims,kms,jms,im),a_scalar_old(ims,kms,jms,im),a_scalar_tends(ims,kms,jms,im),&
&mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      endif
    endif a_rk_step_1
  endif a_diff_opt1
  if ( .not. leapfrog) then

! TBH:  worst-case horizontal dependencies...
! TBH:  OVERWRITE a_scalar,a_advect_tend,a_ru,a_rv,a_ww
! TBH:  HORIZONTAL DEPENDENCE:  scalar        ( [i-3,i,i+3], [j-3,i,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar      ( [i-3,i,i+2], [j-3,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_advect_tend ( [i-3,i,i+3], [j-3,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  ru            ( [i-2,i,i+3], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  rv            ( [    i    ], [j-2,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  msft          ( [i-3,i,i+3], [j-3,j,j+3] ) 
    call a_advect_scalar( scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),&
&a_advect_tend(ims,kms,jms),ru,a_ru,rv,a_rv,ww,a_ww,config_flags,msft,fnm,fnp,rdx,rdy,rdnw,ids,ide,jds,jde,kde,ims,ime,jms,jme,&
&kms,kme,its,ite,jts,jte,kts,kte )

  else
! TBH:  worst-case horizontal dependencies...
! TBH:  OVERWRITE a_scalar,a_scalar_old,a_advect_tend,a_ru,a_rv,a_ww
! TBH:  HORIZONTAL DEPENDENCE:  scalar        ( [i-3,i,i+3], [j-3,i,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  a_scalar      ( [i-3,i,i+2], [j-3,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_advect_tend ( [i-3,i,i+3], [j-3,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  ru            ( [i-2,i,i+3], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  rv            ( [    i    ], [j-2,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  msft          ( [i-3,i,i+3], [j-3,j,j+3] ) 
    call a_advect_scalar( scalar(ims,kms,jms,im),a_scalar(ims,kms,jms,im),scalar_old(ims,kms,jms,im),a_scalar_old(ims,kms,jms,im),&
&a_advect_tend(ims,kms,jms),ru,a_ru,rv,a_rv,ww,a_ww,config_flags,msft,fnm,fnp,rdx,rdy,rdnw,ids,ide,jds,jde,kde,ims,ime,jms,jme,&
&kms,kme,its,ite,jts,jte,kts,kte )
  endif
! TBH:  OVERWRITE a_advect_tend
  call a_zero_tend( a_advect_tend(ims,kms,jms),ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
end do a_scalar_loop

end subroutine a_rk_scalar_tend
