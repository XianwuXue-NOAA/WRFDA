subroutine a_rk_tendency1( config_flags, rk_step, a_ru_tend, a_rv_tend, a_rw_tend, a_ph_tend, a_t_tend, a_ru_tendf, a_rv_tendf, &
&a_rw_tendf, a_t_tendf, a_mu_tend, a_u_save, a_v_save, a_w_save, a_ph_save, a_t_save, ru, a_ru, rv, a_rv, rw, a_rw, ww, a_ww, u, &
&a_u, v, a_v, w, a_w, t, a_t, ph, a_ph, u_old, a_u_old, v_old, a_v_old, w_old, a_w_old, t_old, a_t_old, ph_old, a_ph_old, phb, &
&t_init, mu, a_mu, mut, a_mut, muu, a_muu, muv, a_muv, mub, al, a_al, alt, a_alt, p, a_p, pb, php, a_php, cqu, a_cqu, cqv, a_cqv, &
&cqw, a_cqw, u_base, v_base, z_base, msfu, msfv, msft, f, e, sina, cosa, fnm, fnp, rdn, rdnw, dt, rdx, rdy, kvdif, xkmhd, a_xkmhd, &
&cf1, cf2, cf3, cfn, cfn1, non_hydrostatic, leapfrog, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, &
&kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_al(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_alt(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqu(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_mu_tend(ims:ime,jms:jme)
real, intent(inout) :: a_mut(ims:ime,jms:jme)
real, intent(inout) :: a_muu(ims:ime,jms:jme)
real, intent(inout) :: a_muv(ims:ime,jms:jme)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph_save(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_php(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru_tendf(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv_tendf(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw_tendf(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_save(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_tendf(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u_save(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v_save(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w_save(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ww(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(in) :: al(ims:ime,kms:kme,jms:jme)
real, intent(in) :: alt(ims:ime,kms:kme,jms:jme)
real cf1
real cf2
real cf3
real cfn
real cfn1
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: cosa(ims:ime,jms:jme)
real, intent(in) :: cqu(ims:ime,kms:kme,jms:jme)
real, intent(in) :: cqv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: cqw(ims:ime,kms:kme,jms:jme)
real, intent(in) :: dt
real, intent(in) :: e(ims:ime,jms:jme)
real, intent(in) :: f(ims:ime,jms:jme)
real, intent(in) :: fnm(kms:kme)
real, intent(in) :: fnp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: kvdif
logical, intent(in) :: leapfrog
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mu(ims:ime,jms:jme)
real, intent(in) :: mub(ims:ime,jms:jme)
real, intent(in) :: mut(ims:ime,jms:jme)
real, intent(in) :: muu(ims:ime,jms:jme)
real, intent(in) :: muv(ims:ime,jms:jme)
logical, intent(in) :: non_hydrostatic
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: pb(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ph(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ph_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: phb(ims:ime,kms:kme,jms:jme)
real, intent(in) :: php(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdn(kms:kme)
real, intent(in) :: rdnw(kms:kme)
real, intent(in) :: rdx
real, intent(in) :: rdy
integer, intent(in) :: rk_step
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rw(ims:ime,kms:kme,jms:jme)
real, intent(in) :: sina(ims:ime,jms:jme)
real, intent(in) :: t(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t_init(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: u(ims:ime,kms:kme,jms:jme)
real, intent(in) :: u_base(kms:kme)
real, intent(in) :: u_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v_base(kms:kme)
real, intent(in) :: v_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ww(ims:ime,kms:kme,jms:jme)
real, intent(in) :: xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(in) :: z_base(kms:kme)

!==============================================
! declare local variables
!==============================================
real kvdq

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
a_forward_step: if (rk_step .eq. 1) then
  a_diff_opt1: if (config_flags%diff_opt .eq. 1) then
    a_leapfrog_test: if ( .not. leapfrog) then
      a_pbl_test: if (config_flags%bl_pbl_physics .eq. 0) then
        kvdq = 3.*kvdif
! recompute : kvdq

! TBH:  OVERWRITE a_t,a_t_tendf,a_alt,a_mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
        call a_vertical_diffusion_3dmp( t,a_t,a_t_tendf,t_init,alt,a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,jme,kms,&
&kme,its,ite,jts,jte,kts,kte )
        if (non_hydrostatic) then
! TBH:  OVERWRITE a_w,a_rw_tendf,a_alt,a_mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
          call a_vertical_diffusion( 'w',w,a_w,a_rw_tendf,alt,a_alt,mut,a_mut,rdn,rdnw,kvdif,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
&its,ite,jts,jte,kts,kte )
        endif
! TBH:  OVERWRITE a_v,a_rv_tendf,a_alt,a_muv
! TBH:  HORIZONTAL DEPENDENCE:  alt         ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_alt       ( [    i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  v           ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tendf  ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  muv         ( [    i    ], [    j,j+1] )
        call a_vertical_diffusion_v( v,a_v,a_rv_tendf,config_flags,v_base,alt,a_alt,muv,a_muv,rdn,rdnw,kvdif,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_u,a_ru_tendf,a_alt,a_muu
! TBH:  HORIZONTAL DEPENDENCE:  alt         ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_alt       ( [i-1,i    ], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  u           ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tendf  ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muu         ( [    i,i+1], [    j    ] )
        call a_vertical_diffusion_u( u,a_u,a_ru_tendf,config_flags,u_base,alt,a_alt,muu,a_muu,rdn,rdnw,kvdif,ids,ide,jde,kde,ims,&
&ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      endif a_pbl_test
! TBH:  OVERWRITE a_t,a_t_tendf,a_mut,a_xkmhd
! TBH:  NOTE:  "(R)" indicates that a dependence only exists due to 
! TBH:  NOTE:  computation in the halo regions.  This must be accounted 
! TBH:  NOTE:  for at some previous time, but no actual dependence on 
! TBH:  NOTE:  horizontally adjacent values exists here.  
! TBH:  HORIZONTAL DEPENDENCE:  t           ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_t         ( [i-1,i,i+1], [j-1,j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  a_t_tendf   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  t_init      ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j,j+1] )
      call a_horizontal_diffusion_3dmp( t,a_t,a_t_tendf,mut,a_mut,config_flags,t_init,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,&
&jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_w,a_rw_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  w           ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_w         ( [i-1,i,i+1], [j-1,j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  a_rw_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j,j+1] )
      call a_horizontal_diffusion( 'w',w,a_w,a_rw_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,jds,&
&jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_v,a_rv_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  v           ( [i-1,i,i+1], [j-1,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_v         ( [i-1,i,i+1], [j-1,j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-2,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mut       ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j    ] )
      call a_horizontal_diffusion( 'v',v,a_v,a_rv_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,jds,&
&jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_u,a_ru_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  u           ( [i-1,i,i+2], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_u         ( [i-1,i,i+1], [j-1,j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-2,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mut       ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i    ], [j-1,j,j+1] )
      call a_horizontal_diffusion( 'u',u,a_u,a_ru_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,ide,jds,&
&jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
    else a_leapfrog_test
      a_pbl_test_lf: if (config_flags%bl_pbl_physics .eq. 0) then
        kvdq = 3.*kvdif
! recompute : kvdq
! TBH:  OVERWRITE a_t_old,a_t_tendf,a_alt,a_mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
        call a_vertical_diffusion_3dmp( t_old,a_t_old,a_t_tendf,t_init,alt,a_alt,mut,a_mut,rdn,rdnw,kvdq,ide,jde,kde,ims,ime,jms,&
&jme,kms,kme,its,ite,jts,jte,kts,kte )
        if (non_hydrostatic) then
! TBH:  OVERWRITE a_w_old,a_rw_tendf,a_alt,a_mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
          call a_vertical_diffusion( 'w',w_old,a_w_old,a_rw_tendf,alt,a_alt,mut,a_mut,rdn,rdnw,kvdif,ide,jde,kde,ims,ime,jms,jme,&
&kms,kme,its,ite,jts,jte,kts,kte )
        endif
! TBH:  OVERWRITE a_v_old,a_rv_tendf,a_alt,a_muv
! TBH:  HORIZONTAL DEPENDENCE:  alt         ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_alt       ( [    i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  v_old       ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tendf  ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  muv         ( [    i    ], [    j,j+1] )
        call a_vertical_diffusion_v( v_old,a_v_old,a_rv_tendf,config_flags,v_base,alt,a_alt,muv,a_muv,rdn,rdnw,kvdif,ide,jds,jde,&
&kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_u_old,a_ru_tendf,a_alt,a_muu
! TBH:  HORIZONTAL DEPENDENCE:  alt         ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_alt       ( [i-1,i    ], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  u_old       ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tendf  ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muu         ( [    i,i+1], [    j    ] )
        call a_vertical_diffusion_u( u_old,a_u_old,a_ru_tendf,config_flags,u_base,alt,a_alt,muu,a_muu,rdn,rdnw,kvdif,ids,ide,jde,&
&kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      endif a_pbl_test_lf
! TBH:  OVERWRITE a_t_old,a_t_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  t_old       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_t_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_t_tendf   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  t_init      ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j,j+1] )
      call a_horizontal_diffusion_3dmp( t_old,a_t_old,a_t_tendf,mut,a_mut,config_flags,t_init,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,&
&ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      if (non_hydrostatic) then
! TBH:  OVERWRITE a_w_old,a_rw_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  w_old       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_w_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rw_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j,j+1] )
        call a_horizontal_diffusion( 'w',w_old,a_w_old,a_rw_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
      endif
! TBH:  OVERWRITE a_v_old,a_rv_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  v_old       ( [i-1,i,i+1], [j-1,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_v_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-2,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mut       ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i,i+1], [j-1,j    ] )
      call a_horizontal_diffusion( 'v',v_old,a_v_old,a_rv_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_u_old,a_ru_tendf,a_mut,a_xkmhd
! TBH:  HORIZONTAL DEPENDENCE:  u_old       ( [i-1,i,i+2], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_u_old     ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tendf  ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-2,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mut       ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  msft        ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  xkmhd       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_xkmhd     ( [i-1,i    ], [j-1,j,j+1] )
      call a_horizontal_diffusion( 'u',u_old,a_u_old,a_ru_tendf,mut,a_mut,config_flags,msfu,msfv,msft,xkmhd,a_xkmhd,rdx,rdy,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
    endif a_leapfrog_test
  endif a_diff_opt1
endif a_forward_step

! TBH:  OVERWRITE a_ru,a_rv,a_rw,a_u,a_v
! TBH:  HORIZONTAL DEPENDENCE:  ru          ( [i-1,i,i+1], [j-2,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ru        ( [    i,i+1], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  rv          ( [i-2,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv        ( [i-1,i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  rw          ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rw        ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  u           ( [i-1,i,i+2], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_u         ( [    i,i+1], [    j    ] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  v           ( [i-1,i    ], [j-1,j,j+2] )
! TBH:  HORIZONTAL DEPENDENCE:  a_v         ( [    i    ], [    j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tend   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tend   ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rw_tend   ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu        ( [i-1,i,i+2], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv        ( [i-1,i    ], [j-1,j,j+2] )
call a_curvature( ru,a_ru,rv,a_rv,rw,a_rw,u,a_u,v,a_v,a_ru_tend,a_rv_tend,a_rw_tend,config_flags,msfu,msfv,fnm,fnp,rdx,rdy,ids,ide,&
&jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )

if (config_flags%pert_coriolis) then
! TBH:  OVERWRITE a_ru,a_rv,a_rw,a_muu,a_muv,a_ph
! TBH:  HORIZONTAL DEPENDENCE:  a_ru        ( [    i,i+1], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv        ( [i-1,i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rw        ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tend   ( [    i,i+1], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tend   ( [i-1,i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rw_tend   ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muu         ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muv         ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  phb         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  ph          ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ph        ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  f           ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  e           ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  sina        ( [    i    ], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  cosa        ( [i-1,i,i+1], [    j    ] )
  call a_perturbation_coriolis( a_ru,a_rv,a_rw,a_ru_tend,a_rv_tend,a_rw_tend,config_flags,u_base,v_base,z_base,muu,a_muu,muv,a_muv,&
&phb,ph,a_ph,f,e,sina,cosa,fnm,fnp,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
else
! TBH:  OVERWRITE a_ru,a_rv,a_rw
! TBH:  HORIZONTAL DEPENDENCE:  A SUBSET OF a_perturbation_coriolis
  call a_coriolis( a_ru,a_rv,a_rw,a_ru_tend,a_rv_tend,a_rw_tend,config_flags,f,e,sina,cosa,fnm,fnp,ids,ide,jds,jde,kde,ims,ime,jms,&
&jme,kms,kme,its,ite,jts,jte,kts,kte )
endif
if (config_flags%w_damping .eq. 1) then
! TBH:  OVERWRITE a_rw_tend,a_ww,a_w,a_mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
  call a_w_damp( a_rw_tend,ww,a_ww,w,a_w,mut,a_mut,rdnw,dt,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte )
endif
if (non_hydrostatic) then
! TBH:  OVERWRITE a_rw_tend,a_p,a_cqw,a_mu
! TBH:  HORIZONTAL DEPENDENCE:  NONE
  call a_pg_buoy_w( a_rw_tend,p,a_p,cqw,a_cqw,a_mu,mub,rdnw,rdn,g,msft,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte )
endif
! TBH:  OVERWRITE a_ph,a_alt,a_p,a_al,a_php,a_cqu,a_cqv,a_muu,a_muv,a_mu
! TBH:  HORIZONTAL DEPENDENCE:  a_ru_tend   ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_rv_tend   ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  ph          ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ph        ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  alt         ( [i-1,i,i+1], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_alt       ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  p           ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_p         ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  pb          ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  al          ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_al        ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  php         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_php       ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  cqu         ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  cqv         ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  muu         ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muv         ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mu          ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mu        ( [i-1,i    ], [j-1,j    ] )
call a_horizontal_pressure_gradient( a_ru_tend,a_rv_tend,ph,a_ph,alt,a_alt,p,a_p,pb,al,a_al,php,a_php,cqu,a_cqu,cqv,a_cqv,muu,&
&a_muu,muv,a_muv,mu,a_mu,fnm,fnp,rdnw,cf1,cf2,cf3,rdx,rdy,config_flags,non_hydrostatic,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
&its,ite,jts,jte,kte )
! TBH:  OVERWRITE a_ph_tend,a_u,a_v,a_ww,a_ph,a_ph,a_w,a_mut,a_muu,a_muv
! TBH:  HORIZONTAL DEPENDENCE:  a_ph_tend   ( [i-3,i,i+3], [j-3,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  u           ( [i-4,i,i+4], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_u         ( [i-1,i,i+1], [    j    ] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  v           ( [    i    ], [j-4,j,j+4] )
! TBH:  HORIZONTAL DEPENDENCE:  a_v         ( [    i    ], [j-1,j,j+1] ) (R)
! TBH:  HORIZONTAL DEPENDENCE:  ph          ( [i-4,i,i+4], [j-4,j,j+4] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ph        ( [i-3,i,i+3], [j-3,j,j+3] )
! TBH:  HORIZONTAL DEPENDENCE:  phb         ( [i-4,i,i+4], [j-4,j,j+4] )
! TBH:  HORIZONTAL DEPENDENCE:  mut         ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  muu         ( [i-4,i,i+4], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_muu       ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  muv         ( [i-1,i,i+1], [j-4,j,j+4] )
! TBH:  HORIZONTAL DEPENDENCE:  a_muv       ( [    i    ], [    j,j+1] )
  call a_rhs_ph( a_ph_tend,u,a_u,v,a_v,ww,a_ww,ph,a_ph,ph,a_ph,phb,w,a_w,mut,a_mut,muu,a_muu,muv,a_muv,fnm,fnp,rdnw,cfn,cfn1,rdx,&
&rdy,msft,non_hydrostatic,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )

end subroutine a_rk_tendency1
