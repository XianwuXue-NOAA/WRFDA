subroutine a_calculate_km_kh( config_flags, dt, dampcoef, zdamp, damp_opt, xkmh, xkmhd, a_xkmhd, xkmv, xkhh, xkhv, bn2, a_bn2, &
&khdif, div, defor11, defor22, defor33, defor12, defor13, defor23, tke, p8w, a_p8w, t8w, a_t8w, theta, a_theta, t, a_t, p, a_p, &
&moist, a_moist, dn, dnw, dx, dy, rdz, rdzw, n_moist, cf1, cf2, cf3, kh_tke_upper_bound, ids, ide, jds, jde, kde, ims, ime, jms, &
&jme, kms, kme, its, ite, jts, jte, kts, kte )

! TBH:  OVERWRITE a_bn2,a_moist,a_p,a_p8w,a_t,a_t8w,a_theta,a_xkmhd,bn2

!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_bn2(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: n_moist
real, intent(inout) :: a_moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_p8w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t8w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_theta(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: bn2(ims:ime,kms:kme,jms:jme)
real, intent(in) :: cf1
real, intent(in) :: cf2
real, intent(in) :: cf3
type (grid_config_rec_type), intent(in) :: config_flags
integer, intent(in) :: damp_opt
real, intent(in) :: dampcoef
real, intent(in) :: defor11(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor12(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor13(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor22(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor23(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor33(ims:ime,kms:kme,jms:jme)
real, intent(in) :: div(ims:ime,kms:kme,jms:jme)
real, intent(in) :: dn(kms:kme)
real, intent(in) :: dnw(kms:kme)
real, intent(in) :: dt
real, intent(in) :: dx
real, intent(in) :: dy
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
real, intent(in) :: kh_tke_upper_bound
real, intent(in) :: khdif
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(inout) :: moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: p8w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdz(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdzw(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t8w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: theta(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: tke(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkhh(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkhv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkmh(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkmv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: zdamp

!==============================================
! declare local variables
!==============================================
real a_xkmhh(1+ime-ims,1+kme-kms,1+jme-jms)
real a_xkmhi(1+ime-ims,1+kme-kms,1+jme-jms)
real a_xkmhj(1+ime-ims,1+kme-kms,1+jme-jms)
real cr_len
integer kds
real kv_tke_upper_bound
real kvdif
logical warm_rain

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_xkmhh(:,:,:) = 0.
a_xkmhi(:,:,:) = 0.
a_xkmhj(:,:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
call calculate_n2( config_flags,bn2,moist,theta,t,p,p8w,t8w,dnw,dn,rdz,rdzw,n_moist,cf1,cf2,cf3,warm_rain,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! recompute : bn2
km_coeg: select case ( config_flags%km_opt )
case (1) km_coeg
  call isotropic_km( config_flags,xkmh,xkmhd,xkmv,xkhh,xkhv,khdif,kvdif,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,&
&jts,jte,kts,kte )
case (2) km_coeg
  call tke_km( config_flags,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,tke,p8w,t8w,theta,rdz,rdzw,dx,dy,cr_len,kh_tke_upper_bound,&
&kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
case (3) km_coeg
  call smag_km( config_flags,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,div,defor11,defor22,defor33,defor12,defor13,defor23,rdzw,dx,dy,cr_len,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
case (4) km_coeg
  call smag2d_km( config_flags,xkmh,xkmhd,xkmv,xkhh,xkhv,defor11,defor22,defor12,rdzw,dx,dy,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,its,ite,jts,jte,kts,kte )
end select km_coeg
! recompute : xkmhd
if (damp_opt .eq. 1) then
  call a_cal_dampkm( xkmhd,a_xkmhd,dx,dt,dampcoef,rdz,rdzw,zdamp,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
endif
a_km_coef: select case ( config_flags%km_opt )
case (1) a_km_coef
  call a_isotropic_km( a_xkmhd,ide,jde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
case (2) a_km_coef
  call a_tke_km( config_flags,xkmh,a_xkmhh,a_xkmhd,bn2,a_bn2,tke,rdzw,dx,dy,kh_tke_upper_bound,ids,ide,jds,jde,kde,ims,ime,jms,jme,&
&kms,kme,its,ite,jts,jte,kts,kte )
case (3) a_km_coef
  call a_smag_km( config_flags,xkmh,a_xkmhi,a_xkmhd,bn2,a_bn2,defor11,defor22,defor33,defor12,defor13,defor23,rdzw,dx,dy,ids,ide,&
&jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
case (4) a_km_coef
  call a_smag2d_km( config_flags,xkmh,a_xkmhj,a_xkmhd,defor11,defor22,defor12,dx,dy,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
&its,ite,jts,jte,kts,kte )
end select a_km_coef
call a_calculate_n2( config_flags,a_bn2,moist,a_moist,theta,a_theta,t,a_t,p,a_p,p8w,a_p8w,t8w,a_t8w,rdz,rdzw,n_moist,cf1,cf2,cf3,&
&ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )

end subroutine a_calculate_km_kh
