subroutine a_phy_prep( p, a_p, pb, ph, a_ph, phb, t, a_t, th_phy, a_th_phy, p_phy, a_p_phy, pi_phy, a_pi_phy, a_p8w, t_phy, &
&a_t_phy, a_t8w, z, a_z, z_at_w, a_z_at_w, fzm, fzp, ide, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

! TBH:  OVERWRITE a_p,a_p8w,a_p_phy,a_ph,a_pi_phy,a_t,a_t8w,a_t_phy,a_th_phy,a_z,a_z_at_w,p_phy,pi_phy,t_phy,th_phy,z,z_at_w

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_p8w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_p_phy(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_pi_phy(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t8w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_phy(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_th_phy(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_z(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_z_at_w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(out) :: p_phy(ims:ime,kms:kme,jms:jme)
real, intent(in) :: pb(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ph(ims:ime,kms:kme,jms:jme)
real, intent(in) :: phb(ims:ime,kms:kme,jms:jme)
real, intent(out) :: pi_phy(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t(ims:ime,kms:kme,jms:jme)
real, intent(out) :: t_phy(ims:ime,kms:kme,jms:jme)
real, intent(out) :: th_phy(ims:ime,kms:kme,jms:jme)
real, intent(out) :: z(ims:ime,kms:kme,jms:jme)
real, intent(out) :: z_at_w(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_w1
real a_w2
real a_z0
real a_z1
real a_z2
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer k_end
integer k_start
real w1
real w2
real z0
real z1
real z2

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_w1 = 0.
a_w2 = 0.
a_z0 = 0.
a_z1 = 0.
a_z2 = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
i_start = its
! recompute : i_start
i_end = min(ite,ide-1)
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = min(jte,jde-1)
! recompute : j_end
k_start = kts
! recompute : k_start
k_end = min(kte,kde-1)
! recompute : k_end
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
      th_phy(i,k,j) = t(i,k,j)+t0
      p_phy(i,k,j) = p(i,k,j)+pb(i,k,j)
      pi_phy(i,k,j) = (p_phy(i,k,j)/p1000mb)**rcp
      t_phy(i,k,j) = th_phy(i,k,j)*pi_phy(i,k,j)
    end do
  end do
end do
! recompute : p_phy,t_phy
do j = j_start, j_end
  do k = k_start, kte
    do i = i_start, i_end
      z_at_w(i,k,j) = (phb(i,k,j)+ph(i,k,j))/g
    end do
  end do
end do
! recompute : z_at_w
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
      z(i,k,j) = 0.5*(z_at_w(i,k,j)+z_at_w(i,k+1,j))
    end do
  end do
end do
! recompute : z
do j = j_start, j_end
  a_w1 = 0.
  a_w2 = 0.
  a_z0 = 0.
  a_z1 = 0.
  a_z2 = 0.
  do i = i_start, i_end
    a_w1 = 0.
    a_w2 = 0.
    a_z0 = 0.
    a_z1 = 0.
    a_z2 = 0.
    z0 = z_at_w(i,kte,j)
! recompute : z0
    z1 = z(i,k_end,j)
! recompute : z1
    z2 = z(i,k_end-1,j)
! recompute : z2
    w1 = (z0-z2)/(z1-z2)
! recompute : w1
    w2 = 1.-w1
! recompute : w2
    a_t_phy(i,kde-2,j) = a_t_phy(i,kde-2,j)+a_t8w(i,kde,j)*w2
    a_t_phy(i,kde-1,j) = a_t_phy(i,kde-1,j)+a_t8w(i,kde,j)*w1
    a_w1 = a_w1+a_t8w(i,kde,j)*t_phy(i,kde-1,j)
    a_w2 = a_w2+a_t8w(i,kde,j)*t_phy(i,kde-2,j)
    a_t8w(i,kde,j) = 0.
    a_p_phy(i,kde-2,j) = a_p_phy(i,kde-2,j)+a_p8w(i,kde,j)*w2*(1./p_phy(i,kde-2,j))*exp(w1*log(p_phy(i,kde-1,j))+w2*log(p_phy(i,&
&kde-2,j)))
    a_p_phy(i,kde-1,j) = a_p_phy(i,kde-1,j)+a_p8w(i,kde,j)*w1*(1./p_phy(i,kde-1,j))*exp(w1*log(p_phy(i,kde-1,j))+w2*log(p_phy(i,&
&kde-2,j)))
    a_w1 = a_w1+a_p8w(i,kde,j)*exp(w1*log(p_phy(i,kde-1,j))+w2*log(p_phy(i,kde-2,j)))*log(p_phy(i,kde-1,j))
    a_w2 = a_w2+a_p8w(i,kde,j)*exp(w1*log(p_phy(i,kde-1,j))+w2*log(p_phy(i,kde-2,j)))*log(p_phy(i,kde-2,j))
    a_p8w(i,kde,j) = 0.
    a_w1 = a_w1-a_w2
    a_w2 = 0.
    a_z0 = a_z0+a_w1/(z1-z2)
    a_z1 = a_z1-a_w1*((z0-z2)/((z1-z2)*(z1-z2)))
    a_z2 = a_z2+a_w1*((-1)/(z1-z2)+(z0-z2)/((z1-z2)*(z1-z2)))
    a_w1 = 0.
    a_z(i,k_end-1,j) = a_z(i,k_end-1,j)+a_z2
    a_z2 = 0.
    a_z(i,k_end,j) = a_z(i,k_end,j)+a_z1
    a_z1 = 0.
    a_z_at_w(i,kte,j) = a_z_at_w(i,kte,j)+a_z0
    a_z0 = 0.
! recdepend vars : i,j,z_at_w
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4092
! recompute vars : z0
    z0 = z_at_w(i,1,j)
! recompute vars : z0
! recdepend vars : i,j,z,z0
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4093
! recompute vars : z1
    z1 = z(i,1,j)
! recompute vars : z1
! recdepend vars : i,j,z,z0,z1
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4094
! recompute vars : z2
    z2 = z(i,2,j)
! recompute vars : z2
! recdepend vars : z0,z1,z2
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4095
! recompute vars : w1
    w1 = (z0-z2)/(z1-z2)
! recompute vars : w1
! recdepend vars : w1
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4096
! recompute vars : w2
    w2 = 1.-w1
! recompute vars : w2
    a_t_phy(i,2,j) = a_t_phy(i,2,j)+a_t8w(i,1,j)*w2
    a_t_phy(i,1,j) = a_t_phy(i,1,j)+a_t8w(i,1,j)*w1
    a_w1 = a_w1+a_t8w(i,1,j)*t_phy(i,1,j)
    a_w2 = a_w2+a_t8w(i,1,j)*t_phy(i,2,j)
    a_t8w(i,1,j) = 0.
! recdepend vars : i,j,z_at_w
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4092
! recompute vars : z0
    z0 = z_at_w(i,1,j)
! recompute vars : z0
! recdepend vars : i,j,z,z0
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4093
! recompute vars : z1
    z1 = z(i,1,j)
! recompute vars : z1
! recdepend vars : i,j,z,z0,z1
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4094
! recompute vars : z2
    z2 = z(i,2,j)
! recompute vars : z2
! recdepend vars : z0,z1,z2
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4095
! recompute vars : w1
    w1 = (z0-z2)/(z1-z2)
! recompute vars : w1
! recdepend vars : w1
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4096
! recompute vars : w2
    w2 = 1.-w1
! recompute vars : w2
    a_p_phy(i,2,j) = a_p_phy(i,2,j)+a_p8w(i,1,j)*w2
    a_p_phy(i,1,j) = a_p_phy(i,1,j)+a_p8w(i,1,j)*w1
    a_w1 = a_w1+a_p8w(i,1,j)*p_phy(i,1,j)
    a_w2 = a_w2+a_p8w(i,1,j)*p_phy(i,2,j)
    a_p8w(i,1,j) = 0.
    a_w1 = a_w1-a_w2
    a_w2 = 0.
! recdepend vars : i,j,z_at_w
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4092
! recompute vars : z0
    z0 = z_at_w(i,1,j)
! recompute vars : z0
! recdepend vars : i,j,z,z0
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4093
! recompute vars : z1
    z1 = z(i,1,j)
! recompute vars : z1
! recdepend vars : i,j,z,z0,z1
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:4094
! recompute vars : z2
    z2 = z(i,2,j)
! recompute vars : z2
    a_z0 = a_z0+a_w1/(z1-z2)
    a_z1 = a_z1-a_w1*((z0-z2)/((z1-z2)*(z1-z2)))
    a_z2 = a_z2+a_w1*((-1)/(z1-z2)+(z0-z2)/((z1-z2)*(z1-z2)))
    a_w1 = 0.
    a_z(i,2,j) = a_z(i,2,j)+a_z2
    a_z2 = 0.
    a_z(i,1,j) = a_z(i,1,j)+a_z1
    a_z1 = 0.
    a_z_at_w(i,1,j) = a_z_at_w(i,1,j)+a_z0
    a_z0 = 0.
  end do
end do
do j = j_start, j_end
  do k = 2, k_end
    do i = i_start, i_end
      a_t_phy(i,k-1,j) = a_t_phy(i,k-1,j)+a_t8w(i,k,j)*fzp(k)
      a_t_phy(i,k,j) = a_t_phy(i,k,j)+a_t8w(i,k,j)*fzm(k)
      a_t8w(i,k,j) = 0.
      a_p_phy(i,k-1,j) = a_p_phy(i,k-1,j)+a_p8w(i,k,j)*fzp(k)
      a_p_phy(i,k,j) = a_p_phy(i,k,j)+a_p8w(i,k,j)*fzm(k)
      a_p8w(i,k,j) = 0.
    end do
  end do
end do
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
      a_z_at_w(i,k+1,j) = a_z_at_w(i,k+1,j)+0.5*a_z(i,k,j)
      a_z_at_w(i,k,j) = a_z_at_w(i,k,j)+0.5*a_z(i,k,j)
      a_z(i,k,j) = 0.
    end do
  end do
end do
do j = j_start, j_end
  do k = k_start, kte
    do i = i_start, i_end
      a_ph(i,k,j) = a_ph(i,k,j)+a_z_at_w(i,k,j)/g
      a_z_at_w(i,k,j) = 0.
    end do
  end do
end do
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
      th_phy(i,k,j) = t(i,k,j)+t0
! recompute : th_phy
      p_phy(i,k,j) = p(i,k,j)+pb(i,k,j)
! recompute : p_phy
      pi_phy(i,k,j) = (p_phy(i,k,j)/p1000mb)**rcp
! recompute : pi_phy
      a_pi_phy(i,k,j) = a_pi_phy(i,k,j)+a_t_phy(i,k,j)*th_phy(i,k,j)
      a_th_phy(i,k,j) = a_th_phy(i,k,j)+a_t_phy(i,k,j)*pi_phy(i,k,j)
      a_t_phy(i,k,j) = 0.
      a_p_phy(i,k,j) = a_p_phy(i,k,j)+a_pi_phy(i,k,j)/p1000mb*rcp*(p_phy(i,k,j)/p1000mb)**(rcp-1)
      a_pi_phy(i,k,j) = 0.
      a_p(i,k,j) = a_p(i,k,j)+a_p_phy(i,k,j)
      a_p_phy(i,k,j) = 0.
      a_t(i,k,j) = a_t(i,k,j)+a_th_phy(i,k,j)
      a_th_phy(i,k,j) = 0.
    end do
  end do
end do

end subroutine a_phy_prep
