subroutine a_horizontal_diffusion( name, field, a_field, a_tendency, mu, a_mu, config_flags, msfu, msfv, msft, xkmhd, a_xkmhd, rdx,&
& rdy, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_field(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_tendency(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmhd(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: field(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mu(ims:ime,jms:jme)
character*(1), intent(in) :: name
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: xkmhd(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_mkrdxm
real a_mkrdxp
real a_mkrdym
real a_mkrdyp
real a_rcoup
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer ktf
real mkrdxm
real mkrdxp
real mkrdym
real mkrdyp
real mrdx
real mrdy
real :: pr = 3.
real rcoup
logical specified

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_mkrdxm = 0.
a_mkrdxp = 0.
a_mkrdym = 0.
a_mkrdyp = 0.
a_rcoup = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified =  .false. 
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified =  .true. 
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
if (name .eq. 'u') then
  i_start = its
! recompute : i_start
  i_end = ite
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  if (config_flags%open_xs .or. specified) then
    i_start = max(ids+1,its)
  endif
! recompute : i_start
  if (config_flags%open_xe .or. specified) then
    i_end = min(ide-1,ite)
  endif
! recompute : i_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-2,jte)
  endif
! recompute : j_end
  do j = j_start, j_end
    a_mkrdxm = 0.
    a_mkrdxp = 0.
    a_mkrdym = 0.
    a_mkrdyp = 0.
    a_rcoup = 0.
    do k = kts, ktf
      a_mkrdxm = 0.
      a_mkrdxp = 0.
      a_mkrdym = 0.
      a_mkrdyp = 0.
      a_rcoup = 0.
      do i = i_start, i_end
        a_mkrdxm = 0.
        a_mkrdxp = 0.
        a_mkrdym = 0.
        a_mkrdyp = 0.
        a_rcoup = 0.
        mkrdxm = msft(i-1,j)*xkmhd(i-1,k,j)*rdx
! recompute : mkrdxm
        mkrdxp = msft(i,j)*xkmhd(i,k,j)*rdx
! recompute : mkrdxp
        mrdx = msfu(i,j)*rdx
! recompute : mrdx
        mkrdym = 0.5*(msfu(i,j)+msfu(i,j-1))*0.25*(xkmhd(i,k,j)+xkmhd(i,k,j-1)+xkmhd(i-1,k,j-1)+xkmhd(i-1,k,j))*rdy
! recompute : mkrdym
        mkrdyp = 0.5*(msfu(i,j)+msfu(i,j+1))*0.25*(xkmhd(i,k,j)+xkmhd(i,k,j+1)+xkmhd(i-1,k,j+1)+xkmhd(i-1,k,j))*rdy
! recompute : mkrdyp
        mrdy = msfu(i,j)*rdy
! recompute : mrdy
        rcoup = 0.5*(mu(i,j)+mu(i-1,j))
! recompute : rcoup
        a_field(i,k,j-1) = a_field(i,k,j-1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdym
        a_field(i,k,j+1) = a_field(i,k,j+1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdyp
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxm
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxp
        a_field(i,k,j) = a_field(i,k,j)+a_tendency(i,k,j)*rcoup*((-(mrdx*(mkrdxp+mkrdxm)))-mrdy*(mkrdyp+mkrdym))
        a_mkrdxm = a_mkrdxm-a_tendency(i,k,j)*rcoup*mrdx*(field(i,k,j)-field(i-1,k,j))
        a_mkrdxp = a_mkrdxp+a_tendency(i,k,j)*rcoup*mrdx*(field(i+1,k,j)-field(i,k,j))
        a_mkrdym = a_mkrdym-a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j)-field(i,k,j-1))
        a_mkrdyp = a_mkrdyp+a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j+1)-field(i,k,j))
        a_rcoup = a_rcoup+a_tendency(i,k,j)*(mrdx*(mkrdxp*(field(i+1,k,j)-field(i,k,j))-mkrdxm*(field(i,k,j)-field(i-1,k,j)))+mrdy*&
&(mkrdyp*(field(i,k,j+1)-field(i,k,j))-mkrdym*(field(i,k,j)-field(i,k,j-1))))
        a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_rcoup
        a_mu(i,j) = a_mu(i,j)+0.5*a_rcoup
        a_rcoup = 0.
        a_xkmhd(i-1,k,j+1) = a_xkmhd(i-1,k,j+1)+0.125*a_mkrdyp*(msfu(i,j)+msfu(i,j+1))*rdy
        a_xkmhd(i,k,j+1) = a_xkmhd(i,k,j+1)+0.125*a_mkrdyp*(msfu(i,j)+msfu(i,j+1))*rdy
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+0.125*a_mkrdyp*(msfu(i,j)+msfu(i,j+1))*rdy
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.125*a_mkrdyp*(msfu(i,j)+msfu(i,j+1))*rdy
        a_mkrdyp = 0.
        a_xkmhd(i-1,k,j-1) = a_xkmhd(i-1,k,j-1)+0.125*a_mkrdym*(msfu(i,j)+msfu(i,j-1))*rdy
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+0.125*a_mkrdym*(msfu(i,j)+msfu(i,j-1))*rdy
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+0.125*a_mkrdym*(msfu(i,j)+msfu(i,j-1))*rdy
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.125*a_mkrdym*(msfu(i,j)+msfu(i,j-1))*rdy
        a_mkrdym = 0.
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+a_mkrdxp*msft(i,j)*rdx
        a_mkrdxp = 0.
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+a_mkrdxm*msft(i-1,j)*rdx
        a_mkrdxm = 0.
      end do
    end do
  end do
else if (name .eq. 'v') then
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_xs .or. specified) then
    i_start = max(ids+1,its)
  endif
! recompute : i_start
  if (config_flags%open_xe .or. specified) then
    i_end = min(ide-2,ite)
  endif
! recompute : i_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  do j = j_start, j_end
    a_mkrdxm = 0.
    a_mkrdxp = 0.
    a_mkrdym = 0.
    a_mkrdyp = 0.
    a_rcoup = 0.
    do k = kts, ktf
      a_mkrdxm = 0.
      a_mkrdxp = 0.
      a_mkrdym = 0.
      a_mkrdyp = 0.
      a_rcoup = 0.
      do i = i_start, i_end
        a_mkrdxm = 0.
        a_mkrdxp = 0.
        a_mkrdym = 0.
        a_mkrdyp = 0.
        a_rcoup = 0.
        mkrdxm = 0.5*(msfv(i,j)+msfv(i-1,j))*0.25*(xkmhd(i,k,j)+xkmhd(i,k,j-1)+xkmhd(i-1,k,j-1)+xkmhd(i-1,k,j))*rdx
! recompute : mkrdxm
        mkrdxp = 0.5*(msfv(i,j)+msfv(i+1,j))*0.25*(xkmhd(i,k,j)+xkmhd(i,k,j-1)+xkmhd(i+1,k,j-1)+xkmhd(i+1,k,j))*rdx
! recompute : mkrdxp
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        mkrdym = msft(i,j-1)*xkmhd(i,k,j-1)*rdy
! recompute : mkrdym
        mkrdyp = msft(i,j)*xkmhd(i,k,j)*rdy
! recompute : mkrdyp
        mrdy = msfv(i,j)*rdy
! recompute : mrdy
        rcoup = 0.5*(mu(i,j)+mu(i,j-1))
! recompute : rcoup
        a_field(i,k,j-1) = a_field(i,k,j-1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdym
        a_field(i,k,j+1) = a_field(i,k,j+1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdyp
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxm
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxp
        a_field(i,k,j) = a_field(i,k,j)+a_tendency(i,k,j)*rcoup*((-(mrdx*(mkrdxp+mkrdxm)))-mrdy*(mkrdyp+mkrdym))
        a_mkrdxm = a_mkrdxm-a_tendency(i,k,j)*rcoup*mrdx*(field(i,k,j)-field(i-1,k,j))
        a_mkrdxp = a_mkrdxp+a_tendency(i,k,j)*rcoup*mrdx*(field(i+1,k,j)-field(i,k,j))
        a_mkrdym = a_mkrdym-a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j)-field(i,k,j-1))
        a_mkrdyp = a_mkrdyp+a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j+1)-field(i,k,j))
        a_rcoup = a_rcoup+a_tendency(i,k,j)*(mrdx*(mkrdxp*(field(i+1,k,j)-field(i,k,j))-mkrdxm*(field(i,k,j)-field(i-1,k,j)))+mrdy*&
&(mkrdyp*(field(i,k,j+1)-field(i,k,j))-mkrdym*(field(i,k,j)-field(i,k,j-1))))
        a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_rcoup
        a_mu(i,j) = a_mu(i,j)+0.5*a_rcoup
        a_rcoup = 0.
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+a_mkrdyp*msft(i,j)*rdy
        a_mkrdyp = 0.
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+a_mkrdym*msft(i,j-1)*rdy
        a_mkrdym = 0.
        a_xkmhd(i+1,k,j-1) = a_xkmhd(i+1,k,j-1)+0.125*a_mkrdxp*(msfv(i,j)+msfv(i+1,j))*rdx
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+0.125*a_mkrdxp*(msfv(i,j)+msfv(i+1,j))*rdx
        a_xkmhd(i+1,k,j) = a_xkmhd(i+1,k,j)+0.125*a_mkrdxp*(msfv(i,j)+msfv(i+1,j))*rdx
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.125*a_mkrdxp*(msfv(i,j)+msfv(i+1,j))*rdx
        a_mkrdxp = 0.
        a_xkmhd(i-1,k,j-1) = a_xkmhd(i-1,k,j-1)+0.125*a_mkrdxm*(msfv(i,j)+msfv(i-1,j))*rdx
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+0.125*a_mkrdxm*(msfv(i,j)+msfv(i-1,j))*rdx
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+0.125*a_mkrdxm*(msfv(i,j)+msfv(i-1,j))*rdx
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.125*a_mkrdxm*(msfv(i,j)+msfv(i-1,j))*rdx
        a_mkrdxm = 0.
      end do
    end do
  end do
else if (name .eq. 'w') then
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  if (config_flags%open_xs .or. specified) then
    i_start = max(ids+1,its)
  endif
! recompute : i_start
  if (config_flags%open_xe .or. specified) then
    i_end = min(ide-2,ite)
  endif
! recompute : i_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-2,jte)
  endif
! recompute : j_end
  do j = j_start, j_end
    a_mkrdxm = 0.
    a_mkrdxp = 0.
    a_mkrdym = 0.
    a_mkrdyp = 0.
    a_rcoup = 0.
    do k = kts+1, ktf
      a_mkrdxm = 0.
      a_mkrdxp = 0.
      a_mkrdym = 0.
      a_mkrdyp = 0.
      a_rcoup = 0.
      do i = i_start, i_end
        a_mkrdxm = 0.
        a_mkrdxp = 0.
        a_mkrdym = 0.
        a_mkrdyp = 0.
        a_rcoup = 0.
        mkrdxm = msfu(i,j)*0.25*(xkmhd(i,k,j)+xkmhd(i-1,k,j)+xkmhd(i,k-1,j)+xkmhd(i-1,k-1,j))*rdx
! recompute : mkrdxm
        mkrdxp = msfu(i+1,j)*0.25*(xkmhd(i+1,k,j)+xkmhd(i,k,j)+xkmhd(i+1,k-1,j)+xkmhd(i,k-1,j))*rdx
! recompute : mkrdxp
        mrdx = msft(i,j)*rdx
! recompute : mrdx
        mkrdym = msfv(i,j)*0.25*(xkmhd(i,k,j)+xkmhd(i,k,j-1)+xkmhd(i,k-1,j)+xkmhd(i,k-1,j-1))*rdy
! recompute : mkrdym
        mkrdyp = msfv(i,j+1)*0.25*(xkmhd(i,k,j+1)+xkmhd(i,k,j)+xkmhd(i,k-1,j+1)+xkmhd(i,k-1,j))*rdy
! recompute : mkrdyp
        mrdy = msft(i,j)*rdy
! recompute : mrdy
        rcoup = 0.5*(mu(i,j)+mu(i,j))
! recompute : rcoup
        a_field(i,k,j-1) = a_field(i,k,j-1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdym
        a_field(i,k,j+1) = a_field(i,k,j+1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdyp
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxm
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxp
        a_field(i,k,j) = a_field(i,k,j)+a_tendency(i,k,j)*rcoup*((-(mrdx*(mkrdxp+mkrdxm)))-mrdy*(mkrdyp+mkrdym))
        a_mkrdxm = a_mkrdxm-a_tendency(i,k,j)*rcoup*mrdx*(field(i,k,j)-field(i-1,k,j))
        a_mkrdxp = a_mkrdxp+a_tendency(i,k,j)*rcoup*mrdx*(field(i+1,k,j)-field(i,k,j))
        a_mkrdym = a_mkrdym-a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j)-field(i,k,j-1))
        a_mkrdyp = a_mkrdyp+a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j+1)-field(i,k,j))
        a_rcoup = a_rcoup+a_tendency(i,k,j)*(mrdx*(mkrdxp*(field(i+1,k,j)-field(i,k,j))-mkrdxm*(field(i,k,j)-field(i-1,k,j)))+mrdy*&
&(mkrdyp*(field(i,k,j+1)-field(i,k,j))-mkrdym*(field(i,k,j)-field(i,k,j-1))))
        a_mu(i,j) = a_mu(i,j)+a_rcoup
        a_rcoup = 0.
        a_xkmhd(i,k-1,j+1) = a_xkmhd(i,k-1,j+1)+0.25*a_mkrdyp*msfv(i,j+1)*rdy
        a_xkmhd(i,k-1,j) = a_xkmhd(i,k-1,j)+0.25*a_mkrdyp*msfv(i,j+1)*rdy
        a_xkmhd(i,k,j+1) = a_xkmhd(i,k,j+1)+0.25*a_mkrdyp*msfv(i,j+1)*rdy
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.25*a_mkrdyp*msfv(i,j+1)*rdy
        a_mkrdyp = 0.
        a_xkmhd(i,k-1,j-1) = a_xkmhd(i,k-1,j-1)+0.25*a_mkrdym*msfv(i,j)*rdy
        a_xkmhd(i,k-1,j) = a_xkmhd(i,k-1,j)+0.25*a_mkrdym*msfv(i,j)*rdy
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+0.25*a_mkrdym*msfv(i,j)*rdy
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.25*a_mkrdym*msfv(i,j)*rdy
        a_mkrdym = 0.
        a_xkmhd(i+1,k-1,j) = a_xkmhd(i+1,k-1,j)+0.25*a_mkrdxp*msfu(i+1,j)*rdx
        a_xkmhd(i,k-1,j) = a_xkmhd(i,k-1,j)+0.25*a_mkrdxp*msfu(i+1,j)*rdx
        a_xkmhd(i+1,k,j) = a_xkmhd(i+1,k,j)+0.25*a_mkrdxp*msfu(i+1,j)*rdx
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.25*a_mkrdxp*msfu(i+1,j)*rdx
        a_mkrdxp = 0.
        a_xkmhd(i-1,k-1,j) = a_xkmhd(i-1,k-1,j)+0.25*a_mkrdxm*msfu(i,j)*rdx
        a_xkmhd(i,k-1,j) = a_xkmhd(i,k-1,j)+0.25*a_mkrdxm*msfu(i,j)*rdx
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+0.25*a_mkrdxm*msfu(i,j)*rdx
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.25*a_mkrdxm*msfu(i,j)*rdx
        a_mkrdxm = 0.
      end do
    end do
  end do
else
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  if (config_flags%open_xs .or. specified) then
    i_start = max(ids+1,its)
  endif
! recompute : i_start
  if (config_flags%open_xe .or. specified) then
    i_end = min(ide-2,ite)
  endif
! recompute : i_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-2,jte)
  endif
! recompute : j_end
  do j = j_start, j_end
    a_mkrdxm = 0.
    a_mkrdxp = 0.
    a_mkrdym = 0.
    a_mkrdyp = 0.
    a_rcoup = 0.
    do k = kts, ktf
      a_mkrdxm = 0.
      a_mkrdxp = 0.
      a_mkrdym = 0.
      a_mkrdyp = 0.
      a_rcoup = 0.
      do i = i_start, i_end
        a_mkrdxm = 0.
        a_mkrdxp = 0.
        a_mkrdym = 0.
        a_mkrdyp = 0.
        a_rcoup = 0.
        mkrdxm = msfu(i,j)*0.5*(xkmhd(i,k,j)+xkmhd(i-1,k,j))*rdx*pr
! recompute : mkrdxm
        mkrdxp = msfu(i+1,j)*0.5*(xkmhd(i+1,k,j)+xkmhd(i,k,j))*rdx*pr
! recompute : mkrdxp
        mrdx = msft(i,j)*rdx
! recompute : mrdx
        mkrdym = msfv(i,j)*0.5*(xkmhd(i,k,j)+xkmhd(i,k,j-1))*rdy*pr
! recompute : mkrdym
        mkrdyp = msfv(i,j+1)*0.5*(xkmhd(i,k,j+1)+xkmhd(i,k,j))*rdy*pr
! recompute : mkrdyp
        mrdy = msft(i,j)*rdy
! recompute : mrdy
        rcoup = mu(i,j)
! recompute : rcoup
        a_field(i,k,j-1) = a_field(i,k,j-1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdym
        a_field(i,k,j+1) = a_field(i,k,j+1)+a_tendency(i,k,j)*rcoup*mrdy*mkrdyp
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxm
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_tendency(i,k,j)*rcoup*mrdx*mkrdxp
        a_field(i,k,j) = a_field(i,k,j)+a_tendency(i,k,j)*rcoup*((-(mrdx*(mkrdxp+mkrdxm)))-mrdy*(mkrdyp+mkrdym))
        a_mkrdxm = a_mkrdxm-a_tendency(i,k,j)*rcoup*mrdx*(field(i,k,j)-field(i-1,k,j))
        a_mkrdxp = a_mkrdxp+a_tendency(i,k,j)*rcoup*mrdx*(field(i+1,k,j)-field(i,k,j))
        a_mkrdym = a_mkrdym-a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j)-field(i,k,j-1))
        a_mkrdyp = a_mkrdyp+a_tendency(i,k,j)*rcoup*mrdy*(field(i,k,j+1)-field(i,k,j))
        a_rcoup = a_rcoup+a_tendency(i,k,j)*(mrdx*(mkrdxp*(field(i+1,k,j)-field(i,k,j))-mkrdxm*(field(i,k,j)-field(i-1,k,j)))+mrdy*&
&(mkrdyp*(field(i,k,j+1)-field(i,k,j))-mkrdym*(field(i,k,j)-field(i,k,j-1))))
        a_mu(i,j) = a_mu(i,j)+a_rcoup
        a_rcoup = 0.
        a_xkmhd(i,k,j+1) = a_xkmhd(i,k,j+1)+0.5*a_mkrdyp*msfv(i,j+1)*rdy*pr
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.5*a_mkrdyp*msfv(i,j+1)*rdy*pr
        a_mkrdyp = 0.
        a_xkmhd(i,k,j-1) = a_xkmhd(i,k,j-1)+0.5*a_mkrdym*msfv(i,j)*rdy*pr
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.5*a_mkrdym*msfv(i,j)*rdy*pr
        a_mkrdym = 0.
        a_xkmhd(i+1,k,j) = a_xkmhd(i+1,k,j)+0.5*a_mkrdxp*msfu(i+1,j)*rdx*pr
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.5*a_mkrdxp*msfu(i+1,j)*rdx*pr
        a_mkrdxp = 0.
        a_xkmhd(i-1,k,j) = a_xkmhd(i-1,k,j)+0.5*a_mkrdxm*msfu(i,j)*rdx*pr
        a_xkmhd(i,k,j) = a_xkmhd(i,k,j)+0.5*a_mkrdxm*msfu(i,j)*rdx*pr
        a_mkrdxm = 0.
      end do
    end do
  end do
endif

end subroutine a_horizontal_diffusion
