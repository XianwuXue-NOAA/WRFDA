subroutine a_horizontal_pressure_gradient( a_ru_tend, a_rv_tend, ph, a_ph, alt, a_alt, p, a_p, pb, al, a_al, php, a_php, cqu, &
&a_cqu, cqv, a_cqv, muu, a_muu, muv, a_muv, mu, a_mu, fnm, fnp, rdnw, cf1, cf2, cf3, rdx, rdy, config_flags, non_hydrostatic, ids, &
&ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_al(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_alt(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqu(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_muu(ims:ime,jms:jme)
real, intent(inout) :: a_muv(ims:ime,jms:jme)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_php(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv_tend(ims:ime,kms:kme,jms:jme)
real, intent(in) :: al(ims:ime,kms:kme,jms:jme)
real, intent(in) :: alt(ims:ime,kms:kme,jms:jme)
real, intent(in) :: cf1
real, intent(in) :: cf2
real, intent(in) :: cf3
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: cqu(ims:ime,kms:kme,jms:jme)
real, intent(in) :: cqv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: fnm(kms:kme)
real, intent(in) :: fnp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
real, intent(in) :: mu(ims:ime,jms:jme)
real, intent(in) :: muu(ims:ime,jms:jme)
real, intent(in) :: muv(ims:ime,jms:jme)
logical, intent(in) :: non_hydrostatic
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: pb(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ph(ims:ime,kms:kme,jms:jme)
real, intent(in) :: php(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdnw(kms:kme)
real, intent(in) :: rdx
real, intent(in) :: rdy

!==============================================
! declare local variables
!==============================================
real a_dpn(ims:ime,kms:kme)
real a_dpx
real a_dpy
real dpn(ims:ime,kms:kme)
real dpx
real dpy
integer i
integer i_start
integer itf
integer j
integer j_start
integer jtf
integer k
integer ktf
logical specified

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_dpn(:,:) = 0.
a_dpx = 0.
a_dpy = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified =  .false. 
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified =  .true. 
endif
! recompute : specified
itf = ite
! recompute : itf
jtf = min(jte,jde-1)
! recompute : jtf
ktf = min(kte,kde-1)
! recompute : ktf
i_start = its
! recompute : i_start
j_start = jts
! recompute : j_start
if ((config_flags%open_xs .or. specified .or. config_flags%nested) .and. its .eq. ids) then
  i_start = its+1
endif
! recompute : i_start
if ((config_flags%open_xe .or. specified .or. config_flags%nested) .and. ite .eq. ide) then
  itf = itf-1
endif
! recompute : itf
do j = j_start, jtf
  a_dpx = 0.
  if (non_hydrostatic) then
    k = 1
! recompute : k
    do i = i_start, itf
      dpn(i,k) = 0.5*(cf1*(p(i-1,k,j)+p(i,k,j))+cf2*(p(i-1,k+1,j)+p(i,k+1,j))+cf3*(p(i-1,k+2,j)+p(i,k+2,j)))
      dpn(i,kde) = 0.
    end do
    do k = 2, ktf
      do i = i_start, itf
        dpn(i,k) = 0.5*(fnm(k)*(p(i-1,k,j)+p(i,k,j))+fnp(k)*(p(i-1,k-1,j)+p(i,k-1,j)))
      end do
    end do
! recompute : dpn
    do k = 1, ktf
      a_dpx = 0.
      do i = i_start, itf
        a_dpx = 0.
        dpx = 0.5*rdx*muu(i,j)*(ph(i,k+1,j)-ph(i-1,k+1,j)+ph(i,k,j)-ph(i-1,k,j)+(alt(i,k,j)+alt(i-1,k,j))*(p(i,k,j)-p(i-1,k,j))+&
&(al(i,k,j)+al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))
! recompute : dpx
        dpx = dpx+rdx*(php(i,k,j)-php(i-1,k,j))*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i-1,j)+mu(i,j)))
! recompute : dpx
        a_cqu(i,k,j) = a_cqu(i,k,j)-a_ru_tend(i,k,j)*dpx
        a_dpx = a_dpx-a_ru_tend(i,k,j)*cqu(i,k,j)
        a_dpn(i,k+1) = a_dpn(i,k+1)+a_dpx*rdx*(php(i,k,j)-php(i-1,k,j))*rdnw(k)
        a_dpn(i,k) = a_dpn(i,k)-a_dpx*rdx*(php(i,k,j)-php(i-1,k,j))*rdnw(k)
        a_mu(i-1,j) = a_mu(i-1,j)-0.5*a_dpx*rdx*(php(i,k,j)-php(i-1,k,j))
        a_mu(i,j) = a_mu(i,j)-0.5*a_dpx*rdx*(php(i,k,j)-php(i-1,k,j))
        a_php(i-1,k,j) = a_php(i-1,k,j)-a_dpx*rdx*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i-1,j)+mu(i,j)))
        a_php(i,k,j) = a_php(i,k,j)+a_dpx*rdx*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i-1,j)+mu(i,j)))
        a_al(i-1,k,j) = a_al(i-1,k,j)+0.5*a_dpx*rdx*muu(i,j)*(pb(i,k,j)-pb(i-1,k,j))
        a_al(i,k,j) = a_al(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(pb(i,k,j)-pb(i-1,k,j))
        a_alt(i-1,k,j) = a_alt(i-1,k,j)+0.5*a_dpx*rdx*muu(i,j)*(p(i,k,j)-p(i-1,k,j))
        a_alt(i,k,j) = a_alt(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(p(i,k,j)-p(i-1,k,j))
        a_muu(i,j) = a_muu(i,j)+0.5*a_dpx*rdx*(ph(i,k+1,j)-ph(i-1,k+1,j)+ph(i,k,j)-ph(i-1,k,j)+(alt(i,k,j)+alt(i-1,k,j))*(p(i,k,j)-&
&p(i-1,k,j))+(al(i,k,j)+al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))
        a_p(i-1,k,j) = a_p(i-1,k,j)-0.5*a_dpx*rdx*muu(i,j)*(alt(i,k,j)+alt(i-1,k,j))
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(alt(i,k,j)+alt(i-1,k,j))
        a_ph(i-1,k+1,j) = a_ph(i-1,k+1,j)-0.5*a_dpx*rdx*muu(i,j)
        a_ph(i,k+1,j) = a_ph(i,k+1,j)+0.5*a_dpx*rdx*muu(i,j)
        a_ph(i-1,k,j) = a_ph(i-1,k,j)-0.5*a_dpx*rdx*muu(i,j)
        a_ph(i,k,j) = a_ph(i,k,j)+0.5*a_dpx*rdx*muu(i,j)
        a_dpx = 0.
      end do
    end do
    do k = 2, ktf
      do i = i_start, itf
        a_p(i-1,k-1,j) = a_p(i-1,k-1,j)+0.5*a_dpn(i,k)*fnp(k)
        a_p(i,k-1,j) = a_p(i,k-1,j)+0.5*a_dpn(i,k)*fnp(k)
        a_p(i-1,k,j) = a_p(i-1,k,j)+0.5*a_dpn(i,k)*fnm(k)
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpn(i,k)*fnm(k)
        a_dpn(i,k) = 0.
      end do
    end do
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:2001
! recompute vars : k
    k = 1
! recompute vars : k
    do i = i_start, itf
      a_dpn(i,kde) = 0.
      a_p(i-1,k+2,j) = a_p(i-1,k+2,j)+0.5*a_dpn(i,k)*cf3
      a_p(i,k+2,j) = a_p(i,k+2,j)+0.5*a_dpn(i,k)*cf3
      a_p(i-1,k+1,j) = a_p(i-1,k+1,j)+0.5*a_dpn(i,k)*cf2
      a_p(i,k+1,j) = a_p(i,k+1,j)+0.5*a_dpn(i,k)*cf2
      a_p(i-1,k,j) = a_p(i-1,k,j)+0.5*a_dpn(i,k)*cf1
      a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpn(i,k)*cf1
      a_dpn(i,k) = 0.
    end do
  else
    do k = 1, ktf
      a_dpx = 0.
      do i = i_start, itf
        a_dpx = 0.
        dpx = 0.5*rdx*muu(i,j)*(ph(i,k+1,j)-ph(i-1,k+1,j)+ph(i,k,j)-ph(i-1,k,j)+(alt(i,k,j)+alt(i-1,k,j))*(p(i,k,j)-p(i-1,k,j))+&
&(al(i,k,j)+al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))
! recompute : dpx
        a_cqu(i,k,j) = a_cqu(i,k,j)-a_ru_tend(i,k,j)*dpx
        a_dpx = a_dpx-a_ru_tend(i,k,j)*cqu(i,k,j)
        a_al(i-1,k,j) = a_al(i-1,k,j)+0.5*a_dpx*rdx*muu(i,j)*(pb(i,k,j)-pb(i-1,k,j))
        a_al(i,k,j) = a_al(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(pb(i,k,j)-pb(i-1,k,j))
        a_alt(i-1,k,j) = a_alt(i-1,k,j)+0.5*a_dpx*rdx*muu(i,j)*(p(i,k,j)-p(i-1,k,j))
        a_alt(i,k,j) = a_alt(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(p(i,k,j)-p(i-1,k,j))
        a_muu(i,j) = a_muu(i,j)+0.5*a_dpx*rdx*(ph(i,k+1,j)-ph(i-1,k+1,j)+ph(i,k,j)-ph(i-1,k,j)+(alt(i,k,j)+alt(i-1,k,j))*(p(i,k,j)-&
&p(i-1,k,j))+(al(i,k,j)+al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))
        a_p(i-1,k,j) = a_p(i-1,k,j)-0.5*a_dpx*rdx*muu(i,j)*(alt(i,k,j)+alt(i-1,k,j))
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpx*rdx*muu(i,j)*(alt(i,k,j)+alt(i-1,k,j))
        a_ph(i-1,k+1,j) = a_ph(i-1,k+1,j)-0.5*a_dpx*rdx*muu(i,j)
        a_ph(i,k+1,j) = a_ph(i,k+1,j)+0.5*a_dpx*rdx*muu(i,j)
        a_ph(i-1,k,j) = a_ph(i-1,k,j)-0.5*a_dpx*rdx*muu(i,j)
        a_ph(i,k,j) = a_ph(i,k,j)+0.5*a_dpx*rdx*muu(i,j)
        a_dpx = 0.
      end do
    end do
  endif
end do
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1927
! recompute vars : itf
itf = min(ite,ide-1)
! recompute vars : itf
! recdepend vars : itf,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1928
! recompute vars : jtf
jtf = jte
! recompute vars : jtf
! recdepend vars : itf,jtf,kde,kte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1929
! recompute vars : ktf
ktf = min(kte,kde-1)
! recompute vars : ktf
! recdepend vars : itf,its,jtf,ktf
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1930
! recompute vars : i_start
i_start = its
! recompute vars : i_start
! recdepend vars : i_start,itf,jtf,jts,ktf
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1931
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
!  recdepend vars : config_flags,i_start,itf,j_start,jds,jtf,jts,ktf,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:1932
! recompute vars : j_start
if ((config_flags%open_ys .or. specified .or. config_flags%nested) .and. jts .eq. jds) then
  j_start = jts+1
endif
! recompute vars : j_start
!  recdepend vars : config_flags,i_start,itf,j_start,jde,jte,jtf,ktf,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:1934
! recompute vars : jtf
if ((config_flags%open_ye .or. specified .or. config_flags%nested) .and. jte .eq. jde) then
  jtf = jtf-1
endif
! recompute vars : jtf
do j = j_start, jtf
  a_dpy = 0.
  if (non_hydrostatic) then
    k = 1
! recompute : k
    do i = i_start, itf
      dpn(i,k) = 0.5*(cf1*(p(i,k,j-1)+p(i,k,j))+cf2*(p(i,k+1,j-1)+p(i,k+1,j))+cf3*(p(i,k+2,j-1)+p(i,k+2,j)))
      dpn(i,kde) = 0.
    end do
    do k = 2, ktf
      do i = i_start, itf
        dpn(i,k) = 0.5*(fnm(k)*(p(i,k,j-1)+p(i,k,j))+fnp(k)*(p(i,k-1,j-1)+p(i,k-1,j)))
      end do
    end do
! recompute : dpn
    do k = 1, ktf
      a_dpy = 0.
      do i = i_start, itf
        a_dpy = 0.
        dpy = 0.5*rdy*muv(i,j)*(ph(i,k+1,j)-ph(i,k+1,j-1)+ph(i,k,j)-ph(i,k,j-1)+(alt(i,k,j)+alt(i,k,j-1))*(p(i,k,j)-p(i,k,j-1))+&
&(al(i,k,j)+al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))
! recompute : dpy
        dpy = dpy+rdy*(php(i,k,j)-php(i,k,j-1))*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i,j-1)+mu(i,j)))
! recompute : dpy
        a_cqv(i,k,j) = a_cqv(i,k,j)-a_rv_tend(i,k,j)*dpy
        a_dpy = a_dpy-a_rv_tend(i,k,j)*cqv(i,k,j)
        a_dpn(i,k+1) = a_dpn(i,k+1)+a_dpy*rdy*(php(i,k,j)-php(i,k,j-1))*rdnw(k)
        a_dpn(i,k) = a_dpn(i,k)-a_dpy*rdy*(php(i,k,j)-php(i,k,j-1))*rdnw(k)
        a_mu(i,j-1) = a_mu(i,j-1)-0.5*a_dpy*rdy*(php(i,k,j)-php(i,k,j-1))
        a_mu(i,j) = a_mu(i,j)-0.5*a_dpy*rdy*(php(i,k,j)-php(i,k,j-1))
        a_php(i,k,j-1) = a_php(i,k,j-1)-a_dpy*rdy*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i,j-1)+mu(i,j)))
        a_php(i,k,j) = a_php(i,k,j)+a_dpy*rdy*(rdnw(k)*(dpn(i,k+1)-dpn(i,k))-0.5*(mu(i,j-1)+mu(i,j)))
        a_al(i,k,j-1) = a_al(i,k,j-1)+0.5*a_dpy*rdy*muv(i,j)*(pb(i,k,j)-pb(i,k,j-1))
        a_al(i,k,j) = a_al(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(pb(i,k,j)-pb(i,k,j-1))
        a_alt(i,k,j-1) = a_alt(i,k,j-1)+0.5*a_dpy*rdy*muv(i,j)*(p(i,k,j)-p(i,k,j-1))
        a_alt(i,k,j) = a_alt(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(p(i,k,j)-p(i,k,j-1))
        a_muv(i,j) = a_muv(i,j)+0.5*a_dpy*rdy*(ph(i,k+1,j)-ph(i,k+1,j-1)+ph(i,k,j)-ph(i,k,j-1)+(alt(i,k,j)+alt(i,k,j-1))*(p(i,k,j)-&
&p(i,k,j-1))+(al(i,k,j)+al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))
        a_p(i,k,j-1) = a_p(i,k,j-1)-0.5*a_dpy*rdy*muv(i,j)*(alt(i,k,j)+alt(i,k,j-1))
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(alt(i,k,j)+alt(i,k,j-1))
        a_ph(i,k+1,j-1) = a_ph(i,k+1,j-1)-0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k+1,j) = a_ph(i,k+1,j)+0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k,j-1) = a_ph(i,k,j-1)-0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k,j) = a_ph(i,k,j)+0.5*a_dpy*rdy*muv(i,j)
        a_dpy = 0.
      end do
    end do
    do k = 2, ktf
      do i = i_start, itf
        a_p(i,k-1,j-1) = a_p(i,k-1,j-1)+0.5*a_dpn(i,k)*fnp(k)
        a_p(i,k-1,j) = a_p(i,k-1,j)+0.5*a_dpn(i,k)*fnp(k)
        a_p(i,k,j-1) = a_p(i,k,j-1)+0.5*a_dpn(i,k)*fnm(k)
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpn(i,k)*fnm(k)
        a_dpn(i,k) = 0.
      end do
    end do
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1941
! recompute vars : k
    k = 1
! recompute vars : k
    do i = i_start, itf
      a_dpn(i,kde) = 0.
      a_p(i,k+2,j-1) = a_p(i,k+2,j-1)+0.5*a_dpn(i,k)*cf3
      a_p(i,k+2,j) = a_p(i,k+2,j)+0.5*a_dpn(i,k)*cf3
      a_p(i,k+1,j-1) = a_p(i,k+1,j-1)+0.5*a_dpn(i,k)*cf2
      a_p(i,k+1,j) = a_p(i,k+1,j)+0.5*a_dpn(i,k)*cf2
      a_p(i,k,j-1) = a_p(i,k,j-1)+0.5*a_dpn(i,k)*cf1
      a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpn(i,k)*cf1
      a_dpn(i,k) = 0.
    end do
  else
    do k = 1, ktf
      a_dpy = 0.
      do i = i_start, itf
        a_dpy = 0.
        dpy = 0.5*rdy*muv(i,j)*(ph(i,k+1,j)-ph(i,k+1,j-1)+ph(i,k,j)-ph(i,k,j-1)+(alt(i,k,j)+alt(i,k,j-1))*(p(i,k,j)-p(i,k,j-1))+&
&(al(i,k,j)+al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))
! recompute : dpy
        a_cqv(i,k,j) = a_cqv(i,k,j)-a_rv_tend(i,k,j)*dpy
        a_dpy = a_dpy-a_rv_tend(i,k,j)*cqv(i,k,j)
        a_al(i,k,j-1) = a_al(i,k,j-1)+0.5*a_dpy*rdy*muv(i,j)*(pb(i,k,j)-pb(i,k,j-1))
        a_al(i,k,j) = a_al(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(pb(i,k,j)-pb(i,k,j-1))
        a_alt(i,k,j-1) = a_alt(i,k,j-1)+0.5*a_dpy*rdy*muv(i,j)*(p(i,k,j)-p(i,k,j-1))
        a_alt(i,k,j) = a_alt(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(p(i,k,j)-p(i,k,j-1))
        a_muv(i,j) = a_muv(i,j)+0.5*a_dpy*rdy*(ph(i,k+1,j)-ph(i,k+1,j-1)+ph(i,k,j)-ph(i,k,j-1)+(alt(i,k,j)+alt(i,k,j-1))*(p(i,k,j)-&
&p(i,k,j-1))+(al(i,k,j)+al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))
        a_p(i,k,j-1) = a_p(i,k,j-1)-0.5*a_dpy*rdy*muv(i,j)*(alt(i,k,j)+alt(i,k,j-1))
        a_p(i,k,j) = a_p(i,k,j)+0.5*a_dpy*rdy*muv(i,j)*(alt(i,k,j)+alt(i,k,j-1))
        a_ph(i,k+1,j-1) = a_ph(i,k+1,j-1)-0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k+1,j) = a_ph(i,k+1,j)+0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k,j-1) = a_ph(i,k,j-1)-0.5*a_dpy*rdy*muv(i,j)
        a_ph(i,k,j) = a_ph(i,k,j)+0.5*a_dpy*rdy*muv(i,j)
        a_dpy = 0.
      end do
    end do
  endif
end do

end subroutine a_horizontal_pressure_gradient
