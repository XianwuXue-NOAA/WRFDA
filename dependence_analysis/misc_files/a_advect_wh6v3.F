subroutine a_advect_w( w, a_w, w_old, a_w_old, a_tendency, ru, a_ru, rv, a_rv, rom, a_rom, config_flags, msft, fzm, fzp, rdx, rdy, &
&rdzu, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_rom(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_tendency(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w_old(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: rdzu(kms:kme)
real, intent(in) :: rom(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w_old(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_fqx(its:ite+1,kts:kte)
real a_fqy(its:ite,kts:kte,2)
real a_ub
real a_uw
real a_vb
real a_vel
real a_vflux(its:ite,kts:kte)
real a_vw
logical degrade_xe
logical degrade_xs
logical degrade_ye
logical degrade_ys
integer horz_order
integer i
integer i_end
integer i_end_f
integer i_start
integer i_start_f
integer j
integer j1
integer j2
integer j3
integer j4
integer j_end
integer j_end_f
integer j_start
integer j_start_f
integer jp0
integer jp1
integer jtmp
integer k
integer ktf
real mrdx
real mrdy
logical specified
real ub
real uw
real vb
real vel
integer vert_order
real vw

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_fqx(:,:) = 0.
a_fqy(:,:,:) = 0.
a_ub = 0.
a_uw = 0.
a_vb = 0.
a_vel = 0.
a_vflux(:,:) = 0.
a_vw = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified = .FALSE.
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified = .TRUE.
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
!tafsupport: FORCED "config_flags%h_sca_adv_order" to "6"
horz_order = 6
! recompute : horz_order
!tafsupport: FORCED "config_flags%v_sca_adv_order" to "3"
vert_order = 3
! recompute : vert_order
!tafsupport: FORCED "horz_order" to "6"
! recompute : ktf
i_start = its
! recompute : i_start
i_end = min(ite,ide-1)
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = min(jte,jde-1)
! recompute : j_end
!tafsupport: FORCED "vert_order" to "3"
  do j = j_end, j_start, -1
    k = ktf+1
! recompute : k
    do i = i_start, i_end
      a_vflux(i,k) = a_vflux(i,k)+2*a_tendency(i,k,j)*rdzu(k-1)
    end do
    do k = kts+1, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzu(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzu(k)
      end do
    end do
    do i = i_start, i_end
      k = ktf+1
! recompute : k
      a_rom(i,k-1,j) = a_rom(i,k-1,j)+0.25*a_vflux(i,k)*(w(i,k,j)+w(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.25*a_vflux(i,k)*(w(i,k,j)+w(i,k-1,j))
      a_w(i,k-1,j) = a_w(i,k-1,j)+0.25*a_vflux(i,k)*(rom(i,k,j)+rom(i,k-1,j))
      a_w(i,k,j) = a_w(i,k,j)+0.25*a_vflux(i,k)*(rom(i,k,j)+rom(i,k-1,j))
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:5328
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_rom(i,k-1,j) = a_rom(i,k-1,j)+0.25*a_vflux(i,k)*(w(i,k,j)+w(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.25*a_vflux(i,k)*(w(i,k,j)+w(i,k-1,j))
      a_w(i,k-1,j) = a_w(i,k-1,j)+0.25*a_vflux(i,k)*(rom(i,k,j)+rom(i,k-1,j))
      a_w(i,k,j) = a_w(i,k,j)+0.25*a_vflux(i,k)*(rom(i,k,j)+rom(i,k-1,j))
      a_vflux(i,k) = 0.
    end do
    do k = kts+2, ktf
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = 0.5*(rom(i,k,j)+rom(i,k-1,j))
! recompute : vel
        a_vel = a_vel+a_vflux(i,k)*(0.58333333*(w(i,k,j)+w(i,k-1,j))-0.083333333*(w(i,k+1,j)+w(i,k-2,j))+0.083333333*(w(i,k+1,j)-&
&w(i,k-2,j)-3.*(w(i,k,j)-w(i,k-1,j)))*sign(1.,-vel))
        a_w(i,k-2,j) = a_w(i,k-2,j)+a_vflux(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,-vel))
        a_w(i,k-1,j) = a_w(i,k-1,j)+a_vflux(i,k)*vel*(0.58333333+0.25*sign(1.,-vel))
        a_w(i,k+1,j) = a_w(i,k+1,j)+a_vflux(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,-vel))
        a_w(i,k,j) = a_w(i,k,j)+a_vflux(i,k)*vel*(0.58333333+(-0.25)*sign(1.,-vel))
        a_vflux(i,k) = 0.
        a_rom(i,k-1,j) = a_rom(i,k-1,j)+0.5*a_vel
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:5015
! recompute vars : i_start
i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:5016
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:5018
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_ye .and. jte .eq. jde) then
  k = ktf+1
! recompute : k
  do i = i_start, i_end
    a_vb = 0.
    a_vw = 0.
    vw = 0.5*((2.-fzm(k-1))*(rv(i,k-1,jte-1)+rv(i,k-1,jte))-fzp(k-1)*(rv(i,k-2,jte-1)+rv(i,k-2,jte)))
! recompute : vw
    vb = max(vw,0.)
! recompute : vb
    a_rv(i,k-2,jte-1) = a_rv(i,k-2,jte-1)-a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzp(k-1)
    a_rv(i,k-2,jte) = a_rv(i,k-2,jte)+a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzp(k-1)
    a_rv(i,k-1,jte-1) = a_rv(i,k-1,jte-1)+a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*(2.-fzm(k-1))
    a_rv(i,k-1,jte) = a_rv(i,k-1,jte)-a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*(2-fzm(k-1))
    a_vb = a_vb-a_tendency(i,k,j_end)*rdy*(w_old(i,k,j_end)-w_old(i,k,j_end-1))
    a_w(i,k,j_end) = a_w(i,k,j_end)-a_tendency(i,k,j_end)*rdy*((2.-fzm(k-1))*(rv(i,k-1,jte)-rv(i,k-1,jte-1))-fzp(k-1)*(rv(i,k-2,&
&jte)-rv(i,k-2,jte-1)))
    a_w_old(i,k,j_end-1) = a_w_old(i,k,j_end-1)+a_tendency(i,k,j_end)*rdy*vb
    a_w_old(i,k,j_end) = a_w_old(i,k,j_end)-a_tendency(i,k,j_end)*rdy*vb
    a_vw = a_vw+a_vb*(0.5+sign(0.5,vw-0.))
    a_vb = 0.
    a_rv(i,k-2,jte-1) = a_rv(i,k-2,jte-1)-0.5*a_vw*fzp(k-1)
    a_rv(i,k-2,jte) = a_rv(i,k-2,jte)-0.5*a_vw*fzp(k-1)
    a_rv(i,k-1,jte-1) = a_rv(i,k-1,jte-1)+0.5*a_vw*(2-fzm(k-1))
    a_rv(i,k-1,jte) = a_rv(i,k-1,jte)+0.5*a_vw*(2-fzm(k-1))
    a_vw = 0.
  end do
  do i = i_start, i_end
    a_vb = 0.
    a_vw = 0.
    do k = kts+1, ktf
      a_vb = 0.
      a_vw = 0.
      vw = 0.5*(fzm(k)*(rv(i,k,jte-1)+rv(i,k,jte))+fzp(k)*(rv(i,k-1,jte-1)+rv(i,k-1,jte)))
! recompute : vw
      vb = max(vw,0.)
! recompute : vb
      a_rv(i,k-1,jte-1) = a_rv(i,k-1,jte-1)+a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzp(k)
      a_rv(i,k-1,jte) = a_rv(i,k-1,jte)-a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzp(k)
      a_rv(i,k,jte-1) = a_rv(i,k,jte-1)+a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzm(k)
      a_rv(i,k,jte) = a_rv(i,k,jte)-a_tendency(i,k,j_end)*rdy*w(i,k,j_end)*fzm(k)
      a_vb = a_vb-a_tendency(i,k,j_end)*rdy*(w_old(i,k,j_end)-w_old(i,k,j_end-1))
      a_w(i,k,j_end) = a_w(i,k,j_end)-a_tendency(i,k,j_end)*rdy*(fzm(k)*(rv(i,k,jte)-rv(i,k,jte-1))+fzp(k)*(rv(i,k-1,jte)-rv(i,k-1,&
&jte-1)))
      a_w_old(i,k,j_end-1) = a_w_old(i,k,j_end-1)+a_tendency(i,k,j_end)*rdy*vb
      a_w_old(i,k,j_end) = a_w_old(i,k,j_end)-a_tendency(i,k,j_end)*rdy*vb
      a_vw = a_vw+a_vb*(0.5+sign(0.5,vw-0.))
      a_vb = 0.
      a_rv(i,k-1,jte-1) = a_rv(i,k-1,jte-1)+0.5*a_vw*fzp(k)
      a_rv(i,k-1,jte) = a_rv(i,k-1,jte)+0.5*a_vw*fzp(k)
      a_rv(i,k,jte-1) = a_rv(i,k,jte-1)+0.5*a_vw*fzm(k)
      a_rv(i,k,jte) = a_rv(i,k,jte)+0.5*a_vw*fzm(k)
      a_vw = 0.
    end do
  end do
endif
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:5015
! recompute vars : i_start
i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:5016
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
if (config_flags%open_ys .and. jts .eq. jds) then
  k = ktf+1
! recompute : k
  do i = i_start, i_end
    a_vb = 0.
    a_vw = 0.
    vw = 0.5*((2.-fzm(k-1))*(rv(i,k-1,jts)+rv(i,k-1,jts+1))-fzp(k-1)*(rv(i,k-2,jts)+rv(i,k-2,jts+1)))
! recompute : vw
    vb = min(vw,0.)
! recompute : vb
    a_rv(i,k-2,jts+1) = a_rv(i,k-2,jts+1)+a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzp(k-1)
    a_rv(i,k-2,jts) = a_rv(i,k-2,jts)-a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzp(k-1)
    a_rv(i,k-1,jts+1) = a_rv(i,k-1,jts+1)-a_tendency(i,k,jts)*rdy*w(i,k,jts)*(2-fzm(k-1))
    a_rv(i,k-1,jts) = a_rv(i,k-1,jts)+a_tendency(i,k,jts)*rdy*w(i,k,jts)*(2.-fzm(k-1))
    a_vb = a_vb-a_tendency(i,k,jts)*rdy*(w_old(i,k,jts+1)-w_old(i,k,jts))
    a_w(i,k,jts) = a_w(i,k,jts)-a_tendency(i,k,jts)*rdy*((2.-fzm(k-1))*(rv(i,k-1,jts+1)-rv(i,k-1,jts))-fzp(k-1)*(rv(i,k-2,jts+1)-&
&rv(i,k-2,jts)))
    a_w_old(i,k,jts+1) = a_w_old(i,k,jts+1)-a_tendency(i,k,jts)*rdy*vb
    a_w_old(i,k,jts) = a_w_old(i,k,jts)+a_tendency(i,k,jts)*rdy*vb
    a_vw = a_vw+a_vb*(0.5+sign(0.5,0.-vw))
    a_vb = 0.
    a_rv(i,k-2,jts+1) = a_rv(i,k-2,jts+1)-0.5*a_vw*fzp(k-1)
    a_rv(i,k-2,jts) = a_rv(i,k-2,jts)-0.5*a_vw*fzp(k-1)
    a_rv(i,k-1,jts+1) = a_rv(i,k-1,jts+1)+0.5*a_vw*(2-fzm(k-1))
    a_rv(i,k-1,jts) = a_rv(i,k-1,jts)+0.5*a_vw*(2-fzm(k-1))
    a_vw = 0.
  end do
  do i = i_start, i_end
    a_vb = 0.
    a_vw = 0.
    do k = kts+1, ktf
      a_vb = 0.
      a_vw = 0.
      vw = 0.5*(fzm(k)*(rv(i,k,jts)+rv(i,k,jts+1))+fzp(k)*(rv(i,k-1,jts)+rv(i,k-1,jts+1)))
! recompute : vw
      vb = min(vw,0.)
! recompute : vb
      a_rv(i,k-1,jts+1) = a_rv(i,k-1,jts+1)-a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzp(k)
      a_rv(i,k-1,jts) = a_rv(i,k-1,jts)+a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzp(k)
      a_rv(i,k,jts+1) = a_rv(i,k,jts+1)-a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzm(k)
      a_rv(i,k,jts) = a_rv(i,k,jts)+a_tendency(i,k,jts)*rdy*w(i,k,jts)*fzm(k)
      a_vb = a_vb-a_tendency(i,k,jts)*rdy*(w_old(i,k,jts+1)-w_old(i,k,jts))
      a_w(i,k,jts) = a_w(i,k,jts)-a_tendency(i,k,jts)*rdy*(fzm(k)*(rv(i,k,jts+1)-rv(i,k,jts))+fzp(k)*(rv(i,k-1,jts+1)-rv(i,k-1,jts)&
&))
      a_w_old(i,k,jts+1) = a_w_old(i,k,jts+1)-a_tendency(i,k,jts)*rdy*vb
      a_w_old(i,k,jts) = a_w_old(i,k,jts)+a_tendency(i,k,jts)*rdy*vb
      a_vw = a_vw+a_vb*(0.5+sign(0.5,0.-vw))
      a_vb = 0.
      a_rv(i,k-1,jts+1) = a_rv(i,k-1,jts+1)+0.5*a_vw*fzp(k)
      a_rv(i,k-1,jts) = a_rv(i,k-1,jts)+0.5*a_vw*fzp(k)
      a_rv(i,k,jts+1) = a_rv(i,k,jts+1)+0.5*a_vw*fzm(k)
      a_rv(i,k,jts) = a_rv(i,k,jts)+0.5*a_vw*fzm(k)
      a_vw = 0.
    end do
  end do
endif
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:5016
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:5017
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:5018
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_xe .and. ite .eq. ide) then
  k = ktf+1
! recompute : k
  do j = j_start, j_end
    a_ub = 0.
    a_uw = 0.
    uw = 0.5*((2.-fzm(k-1))*(ru(ite-1,k-1,j)+ru(ite,k-1,j))-fzp(k-1)*(ru(ite-1,k-2,j)+ru(ite,k-2,j)))
! recompute : uw
    ub = max(uw,0.)
! recompute : ub
    a_ru(ite-1,k-2,j) = a_ru(ite-1,k-2,j)-a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzp(k-1)
    a_ru(ite,k-2,j) = a_ru(ite,k-2,j)+a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzp(k-1)
    a_ru(ite-1,k-1,j) = a_ru(ite-1,k-1,j)+a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*(2.-fzm(k-1))
    a_ru(ite,k-1,j) = a_ru(ite,k-1,j)-a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*(2-fzm(k-1))
    a_ub = a_ub-a_tendency(i_end,k,j)*rdx*(w_old(i_end,k,j)-w_old(i_end-1,k,j))
    a_w(i_end,k,j) = a_w(i_end,k,j)-a_tendency(i_end,k,j)*rdx*((2.-fzm(k-1))*(ru(ite,k-1,j)-ru(ite-1,k-1,j))-fzp(k-1)*(ru(ite,k-2,&
&j)-ru(ite-1,k-2,j)))
    a_w_old(i_end-1,k,j) = a_w_old(i_end-1,k,j)+a_tendency(i_end,k,j)*rdx*ub
    a_w_old(i_end,k,j) = a_w_old(i_end,k,j)-a_tendency(i_end,k,j)*rdx*ub
    a_uw = a_uw+a_ub*(0.5+sign(0.5,uw-0.))
    a_ub = 0.
    a_ru(ite-1,k-2,j) = a_ru(ite-1,k-2,j)-0.5*a_uw*fzp(k-1)
    a_ru(ite,k-2,j) = a_ru(ite,k-2,j)-0.5*a_uw*fzp(k-1)
    a_ru(ite-1,k-1,j) = a_ru(ite-1,k-1,j)+0.5*a_uw*(2-fzm(k-1))
    a_ru(ite,k-1,j) = a_ru(ite,k-1,j)+0.5*a_uw*(2-fzm(k-1))
    a_uw = 0.
  end do
  do j = j_start, j_end
    a_ub = 0.
    a_uw = 0.
    do k = kts+1, ktf
      a_ub = 0.
      a_uw = 0.
      uw = 0.5*(fzm(k)*(ru(ite-1,k,j)+ru(ite,k,j))+fzp(k)*(ru(ite-1,k-1,j)+ru(ite,k-1,j)))
! recompute : uw
      ub = max(uw,0.)
! recompute : ub
      a_ru(ite-1,k-1,j) = a_ru(ite-1,k-1,j)+a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzp(k)
      a_ru(ite,k-1,j) = a_ru(ite,k-1,j)-a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzp(k)
      a_ru(ite-1,k,j) = a_ru(ite-1,k,j)+a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzm(k)
      a_ru(ite,k,j) = a_ru(ite,k,j)-a_tendency(i_end,k,j)*rdx*w(i_end,k,j)*fzm(k)
      a_ub = a_ub-a_tendency(i_end,k,j)*rdx*(w_old(i_end,k,j)-w_old(i_end-1,k,j))
      a_w(i_end,k,j) = a_w(i_end,k,j)-a_tendency(i_end,k,j)*rdx*(fzm(k)*(ru(ite,k,j)-ru(ite-1,k,j))+fzp(k)*(ru(ite,k-1,j)-ru(ite-1,&
&k-1,j)))
      a_w_old(i_end-1,k,j) = a_w_old(i_end-1,k,j)+a_tendency(i_end,k,j)*rdx*ub
      a_w_old(i_end,k,j) = a_w_old(i_end,k,j)-a_tendency(i_end,k,j)*rdx*ub
      a_uw = a_uw+a_ub*(0.5+sign(0.5,uw-0.))
      a_ub = 0.
      a_ru(ite-1,k-1,j) = a_ru(ite-1,k-1,j)+0.5*a_uw*fzp(k)
      a_ru(ite,k-1,j) = a_ru(ite,k-1,j)+0.5*a_uw*fzp(k)
      a_ru(ite-1,k,j) = a_ru(ite-1,k,j)+0.5*a_uw*fzm(k)
      a_ru(ite,k,j) = a_ru(ite,k,j)+0.5*a_uw*fzm(k)
      a_uw = 0.
    end do
  end do
endif
! recdepend vars : jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:5017
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:5018
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_xs .and. its .eq. ids) then
  k = ktf+1
! recompute : k
  do j = j_start, j_end
    a_ub = 0.
    a_uw = 0.
    uw = 0.5*((2.-fzm(k-1))*(ru(its,k-1,j)+ru(its+1,k-1,j))-fzp(k-1)*(ru(its,k-2,j)+ru(its+1,k-2,j)))
! recompute : uw
    ub = min(uw,0.)
! recompute : ub
    a_ru(its+1,k-2,j) = a_ru(its+1,k-2,j)+a_tendency(its,k,j)*rdx*w(its,k,j)*fzp(k-1)
    a_ru(its,k-2,j) = a_ru(its,k-2,j)-a_tendency(its,k,j)*rdx*w(its,k,j)*fzp(k-1)
    a_ru(its+1,k-1,j) = a_ru(its+1,k-1,j)-a_tendency(its,k,j)*rdx*w(its,k,j)*(2-fzm(k-1))
    a_ru(its,k-1,j) = a_ru(its,k-1,j)+a_tendency(its,k,j)*rdx*w(its,k,j)*(2.-fzm(k-1))
    a_ub = a_ub-a_tendency(its,k,j)*rdx*(w_old(its+1,k,j)-w_old(its,k,j))
    a_w(its,k,j) = a_w(its,k,j)-a_tendency(its,k,j)*rdx*((2.-fzm(k-1))*(ru(its+1,k-1,j)-ru(its,k-1,j))-fzp(k-1)*(ru(its+1,k-2,j)-&
&ru(its,k-2,j)))
    a_w_old(its+1,k,j) = a_w_old(its+1,k,j)-a_tendency(its,k,j)*rdx*ub
    a_w_old(its,k,j) = a_w_old(its,k,j)+a_tendency(its,k,j)*rdx*ub
    a_uw = a_uw+a_ub*(0.5+sign(0.5,0.-uw))
    a_ub = 0.
    a_ru(its+1,k-2,j) = a_ru(its+1,k-2,j)-0.5*a_uw*fzp(k-1)
    a_ru(its,k-2,j) = a_ru(its,k-2,j)-0.5*a_uw*fzp(k-1)
    a_ru(its+1,k-1,j) = a_ru(its+1,k-1,j)+0.5*a_uw*(2-fzm(k-1))
    a_ru(its,k-1,j) = a_ru(its,k-1,j)+0.5*a_uw*(2-fzm(k-1))
    a_uw = 0.
  end do
  do j = j_start, j_end
    a_ub = 0.
    a_uw = 0.
    do k = kts+1, ktf
      a_ub = 0.
      a_uw = 0.
      uw = 0.5*(fzm(k)*(ru(its,k,j)+ru(its+1,k,j))+fzp(k)*(ru(its,k-1,j)+ru(its+1,k-1,j)))
! recompute : uw
      ub = min(uw,0.)
! recompute : ub
      a_ru(its+1,k-1,j) = a_ru(its+1,k-1,j)-a_tendency(its,k,j)*rdx*w(its,k,j)*fzp(k)
      a_ru(its,k-1,j) = a_ru(its,k-1,j)+a_tendency(its,k,j)*rdx*w(its,k,j)*fzp(k)
      a_ru(its+1,k,j) = a_ru(its+1,k,j)-a_tendency(its,k,j)*rdx*w(its,k,j)*fzm(k)
      a_ru(its,k,j) = a_ru(its,k,j)+a_tendency(its,k,j)*rdx*w(its,k,j)*fzm(k)
      a_ub = a_ub-a_tendency(its,k,j)*rdx*(w_old(its+1,k,j)-w_old(its,k,j))
      a_w(its,k,j) = a_w(its,k,j)-a_tendency(its,k,j)*rdx*(fzm(k)*(ru(its+1,k,j)-ru(its,k,j))+fzp(k)*(ru(its+1,k-1,j)-ru(its,k-1,j)&
&))
      a_w_old(its+1,k,j) = a_w_old(its+1,k,j)-a_tendency(its,k,j)*rdx*ub
      a_w_old(its,k,j) = a_w_old(its,k,j)+a_tendency(its,k,j)*rdx*ub
      a_uw = a_uw+a_ub*(0.5+sign(0.5,0.-uw))
      a_ub = 0.
      a_ru(its+1,k-1,j) = a_ru(its+1,k-1,j)+0.5*a_uw*fzp(k)
      a_ru(its,k-1,j) = a_ru(its,k-1,j)+0.5*a_uw*fzp(k)
      a_ru(its+1,k,j) = a_ru(its+1,k,j)+0.5*a_uw*fzm(k)
      a_ru(its,k,j) = a_ru(its,k,j)+0.5*a_uw*fzm(k)
      a_uw = 0.
    end do
  end do
endif
! recdepend vars : kde,kte
! recompute pos : ASSIGN_STMT module_advect_em.f90:3963
! recompute vars : ktf
ktf = min(kte,kde-1)
! recompute vars : ktf
!tafsupport: FORCED "horz_order" to "6"
  degrade_xs = .TRUE.
! recompute : degrade_xs
  degrade_xe = .TRUE.
! recompute : degrade_xe
  degrade_ys = .TRUE.
! recompute : degrade_ys
  degrade_ye = .TRUE.
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+2) then
    degrade_xs = .FALSE.
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-3) then
    degrade_xe = .FALSE.
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+2) then
    degrade_ys = .FALSE.
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-3) then
    degrade_ye = .FALSE.
  endif
! recompute : degrade_ye
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  j_start_f = j_start
! recompute : j_start_f
  j_end_f = j_end+1
! recompute : j_end_f
  if (degrade_ys) then
    j_start_f = jds+3
  endif
! recompute : j_start_f
  if (degrade_ye) then
    j_end_f = jde-3
  endif
! recompute : j_end_f
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = max(ids+1,its)
    i_start_f = i_start+2
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = min(ide-2,ite)
    i_end_f = ide-3
  endif
! recompute : i_end,i_end_f
  do j = j_end, j_start, -1
    do k = kts+1, ktf+1
      do i = i_start, i_end
        mrdx = msft(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      i = ide-2
! recompute : i
      k = ktf+1
! recompute : k
      vel = (2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j)
! recompute : vel
      a_vel = a_vel+a_fqx(i,k)*(0.58333333*(w(i,k,j)+w(i-1,k,j))-0.083333333*(w(i+1,k,j)+w(i-2,k,j)))
      a_w(i-2,k,j) = a_w(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i-1,k,j) = a_w(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
      a_w(i+1,k,j) = a_w(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqx(i,k)*vel
      a_fqx(i,k) = 0.
      a_ru(i,k-2,j) = a_ru(i,k-2,j)-a_vel*fzp(k-1)
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*(2-fzm(k-1))
      a_vel = 0.
      do k = kts+1, ktf
        a_vel = 0.
        vel = fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j)
! recompute : vel
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(w(i,k,j)+w(i-1,k,j))-0.083333333*(w(i+1,k,j)+w(i-2,k,j)))
        a_w(i-2,k,j) = a_w(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
        a_w(i-1,k,j) = a_w(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
        a_w(i+1,k,j) = a_w(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqx(i,k)*vel
        a_fqx(i,k) = 0.
        a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*fzp(k)
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel*fzm(k)
        a_vel = 0.
      end do
      if (i_end .eq. ide-2) then
        i = ide-1
! recompute : i
        k = ktf+1
! recompute : k
        a_ru(i,k-2,j) = a_ru(i,k-2,j)-0.5*a_fqx(i,k)*fzp(k-1)*(w(i,k,j)+w(i-1,k,j))
        a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.5*a_fqx(i,k)*(2-fzm(k-1))*(w(i,k,j)+w(i-1,k,j))
        a_w(i-1,k,j) = a_w(i-1,k,j)+0.5*a_fqx(i,k)*((2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j))
        a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqx(i,k)*((2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j))
        a_fqx(i,k) = 0.
        do k = kts+1, ktf
          a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.5*a_fqx(i,k)*fzp(k)*(w(i,k,j)+w(i-1,k,j))
          a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_fqx(i,k)*fzm(k)*(w(i,k,j)+w(i-1,k,j))
          a_w(i-1,k,j) = a_w(i-1,k,j)+0.5*a_fqx(i,k)*(fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j))
          a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqx(i,k)*(fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    if (degrade_xs) then
      do k = kts+1, ktf
        i = i_start+1
      end do
! recompute : i
      k = ktf+1
! recompute : k
      vel = (2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j)
! recompute : vel
      a_vel = a_vel+a_fqx(i,k)*(0.58333333*(w(i,k,j)+w(i-1,k,j))-0.083333333*(w(i+1,k,j)+w(i-2,k,j)))
      a_w(i-2,k,j) = a_w(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i-1,k,j) = a_w(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
      a_w(i+1,k,j) = a_w(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqx(i,k)*vel
      a_fqx(i,k) = 0.
      a_ru(i,k-2,j) = a_ru(i,k-2,j)-a_vel*fzp(k-1)
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*(2-fzm(k-1))
      a_vel = 0.
      k = ktf
      i = i_start+1
! recompute : i
      vel = fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j)
! recompute : vel
      a_vel = a_vel+a_fqx(i,k)*(0.58333333*(w(i,k,j)+w(i-1,k,j))-0.083333333*(w(i+1,k,j)+w(i-2,k,j)))
      a_w(i-2,k,j) = a_w(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i-1,k,j) = a_w(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
      a_w(i+1,k,j) = a_w(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
      a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqx(i,k)*vel
      a_fqx(i,k) = 0.
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*fzp(k)
      a_ru(i,k,j) = a_ru(i,k,j)+a_vel*fzm(k)
      a_vel = 0.
      do k = kts+1, ktf-1
        a_vel = 0.
        i = i_start+1
! recompute : i
        vel = fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j)
! recompute : vel
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(w(i,k,j)+w(i-1,k,j))-0.083333333*(w(i+1,k,j)+w(i-2,k,j)))
        a_w(i-2,k,j) = a_w(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
        a_w(i-1,k,j) = a_w(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
        a_w(i+1,k,j) = a_w(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqx(i,k)*vel
        a_fqx(i,k) = 0.
        a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*fzp(k)
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel*fzm(k)
        a_vel = 0.
      end do
      if (i_start .eq. ids+1) then
        i = ids+1
! recompute : i
        k = ktf+1
! recompute : k
        a_ru(i,k-2,j) = a_ru(i,k-2,j)-0.5*a_fqx(i,k)*fzp(k-1)*(w(i,k,j)+w(i-1,k,j))
        a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.5*a_fqx(i,k)*(2-fzm(k-1))*(w(i,k,j)+w(i-1,k,j))
        a_w(i-1,k,j) = a_w(i-1,k,j)+0.5*a_fqx(i,k)*((2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j))
        a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqx(i,k)*((2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j))
        a_fqx(i,k) = 0.
        do k = kts+1, ktf
          a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.5*a_fqx(i,k)*fzp(k)*(w(i,k,j)+w(i-1,k,j))
          a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_fqx(i,k)*fzm(k)*(w(i,k,j)+w(i-1,k,j))
          a_w(i-1,k,j) = a_w(i-1,k,j)+0.5*a_fqx(i,k)*(fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j))
          a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqx(i,k)*(fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_advect_em.f90:4174
! recompute vars : k
    k = ktf+1
! recompute vars : k
    do i = i_start_f, i_end_f
      a_vel = 0.
      vel = (2.-fzm(k-1))*ru(i,k-1,j)-fzp(k-1)*ru(i,k-2,j)
! recompute : vel
      a_vel = a_vel+a_fqx(i,k)*(0.61666667*(w(i,k,j)+w(i-1,k,j))-0.13333333*(w(i+1,k,j)+w(i-2,k,j))+0.016666667*(w(i+2,k,j)+w(i-3,&
&k,j)))
      a_w(i-3,k,j) = a_w(i-3,k,j)+0.016666667*a_fqx(i,k)*vel
      a_w(i-2,k,j) = a_w(i-2,k,j)-0.13333333*a_fqx(i,k)*vel
      a_w(i-1,k,j) = a_w(i-1,k,j)+0.61666667*a_fqx(i,k)*vel
      a_w(i+2,k,j) = a_w(i+2,k,j)+0.016666667*a_fqx(i,k)*vel
      a_w(i+1,k,j) = a_w(i+1,k,j)-0.13333333*a_fqx(i,k)*vel
      a_w(i,k,j) = a_w(i,k,j)+0.61666667*a_fqx(i,k)*vel
      a_fqx(i,k) = 0.
      a_ru(i,k-2,j) = a_ru(i,k-2,j)-a_vel*fzp(k-1)
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*(2-fzm(k-1))
      a_vel = 0.
    end do
    do k = kts+1, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = fzm(k)*ru(i,k,j)+fzp(k)*ru(i,k-1,j)
! recompute : vel
        a_vel = a_vel+a_fqx(i,k)*(0.61666667*(w(i,k,j)+w(i-1,k,j))-0.13333333*(w(i+1,k,j)+w(i-2,k,j))+0.016666667*(w(i+2,k,j)+w(i-&
&3,k,j)))
        a_w(i-3,k,j) = a_w(i-3,k,j)+0.016666667*a_fqx(i,k)*vel
        a_w(i-2,k,j) = a_w(i-2,k,j)-0.13333333*a_fqx(i,k)*vel
        a_w(i-1,k,j) = a_w(i-1,k,j)+0.61666667*a_fqx(i,k)*vel
        a_w(i+2,k,j) = a_w(i+2,k,j)+0.016666667*a_fqx(i,k)*vel
        a_w(i+1,k,j) = a_w(i+1,k,j)-0.13333333*a_fqx(i,k)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.61666667*a_fqx(i,k)*vel
        a_fqx(i,k) = 0.
        a_ru(i,k-1,j) = a_ru(i,k-1,j)+a_vel*fzp(k)
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel*fzm(k)
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:4000
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:4001
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:4002
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:4003
! recompute vars : j_end
  j_end = min(jte,jde-1)
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:4011
! recompute vars : j_start
  if (degrade_ys) then
    j_start = max(jts,jds+1)
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:4016
! recompute vars : j_end
  if (degrade_ye) then
    j_end = min(jte,jde-2)
  endif
! recompute vars : j_end
  a_j_loop_y_flux_6: do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:4023
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
! recdepend vars : jp1
! recompute pos : ASSIGN_STMT module_advect_em.f90:4024
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
    j_loop_y_flux_9c: do j4 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do j_loop_y_flux_9c
!    if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts+1, ktf+1
        do i = i_start, i_end
          mrdy = msft(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .ge. j_start_f .and. j .le. j_end_f) then
      k = ktf+1
! recompute : k
      do i = i_start, i_end
        a_vel = 0.
        vel = (2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j)
! recompute : vel
        a_vel = a_vel+a_fqy(i,k,jp1)*(0.61666667*(w(i,k,j)+w(i,k,j-1))-0.13333333*(w(i,k,j+1)+w(i,k,j-2))+0.016666667*(w(i,k,j+2)+&
&w(i,k,j-3)))
        a_w(i,k,j-3) = a_w(i,k,j-3)+0.016666667*a_fqy(i,k,jp1)*vel
        a_w(i,k,j-2) = a_w(i,k,j-2)-0.13333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j-1) = a_w(i,k,j-1)+0.61666667*a_fqy(i,k,jp1)*vel
        a_w(i,k,j+2) = a_w(i,k,j+2)+0.016666667*a_fqy(i,k,jp1)*vel
        a_w(i,k,j+1) = a_w(i,k,j+1)-0.13333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.61666667*a_fqy(i,k,jp1)*vel
        a_fqy(i,k,jp1) = 0.
        a_rv(i,k-2,j) = a_rv(i,k-2,j)-a_vel*fzp(k-1)
        a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*(2-fzm(k-1))
        a_vel = 0.
      end do
      do k = kts+1, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j)
! recompute : vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.61666667*(w(i,k,j)+w(i,k,j-1))-0.13333333*(w(i,k,j+1)+w(i,k,j-2))+0.016666667*(w(i,k,j+2)&
&+w(i,k,j-3)))
          a_w(i,k,j-3) = a_w(i,k,j-3)+0.016666667*a_fqy(i,k,jp1)*vel
          a_w(i,k,j-2) = a_w(i,k,j-2)-0.13333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j-1) = a_w(i,k,j-1)+0.61666667*a_fqy(i,k,jp1)*vel
          a_w(i,k,j+2) = a_w(i,k,j+2)+0.016666667*a_fqy(i,k,jp1)*vel
          a_w(i,k,j+1) = a_w(i,k,j+1)-0.13333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j) = a_w(i,k,j)+0.61666667*a_fqy(i,k,jp1)*vel
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*fzp(k)
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel*fzm(k)
          a_vel = 0.
        end do
      end do
    else if (j .eq. jds+1) then
      k = ktf+1
! recompute : k
      do i = i_start, i_end
        a_rv(i,k-2,j) = a_rv(i,k-2,j)-0.5*a_fqy(i,k,jp1)*fzp(k-1)*(w(i,k,j)+w(i,k,j-1))
        a_rv(i,k-1,j) = a_rv(i,k-1,j)+0.5*a_fqy(i,k,jp1)*(2-fzm(k-1))*(w(i,k,j)+w(i,k,j-1))
        a_w(i,k,j-1) = a_w(i,k,j-1)+0.5*a_fqy(i,k,jp1)*((2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j))
        a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqy(i,k,jp1)*((2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j))
        a_fqy(i,k,jp1) = 0.
      end do
      do k = kts+1, ktf
        do i = i_start, i_end
          a_rv(i,k-1,j) = a_rv(i,k-1,j)+0.5*a_fqy(i,k,jp1)*fzp(k)*(w(i,k,j)+w(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_fqy(i,k,jp1)*fzm(k)*(w(i,k,j)+w(i,k,j-1))
          a_w(i,k,j-1) = a_w(i,k,j-1)+0.5*a_fqy(i,k,jp1)*(fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j))
          a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqy(i,k,jp1)*(fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j))
          a_fqy(i,k,jp1) = 0.
        end do
      end do
    else if (j .eq. jds+2) then
      k = ktf+1
! recompute : k
      do i = i_start, i_end
        a_vel = 0.
        vel = (2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j)
! recompute : vel
        a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(w(i,k,j)+w(i,k,j-1))-0.083333333*(w(i,k,j+1)+w(i,k,j-2)))
        a_w(i,k,j-2) = a_w(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j-1) = a_w(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j+1) = a_w(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
        a_fqy(i,k,jp1) = 0.
        a_rv(i,k-2,j) = a_rv(i,k-2,j)-a_vel*fzp(k-1)
        a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*(2-fzm(k-1))
        a_vel = 0.
      end do
      do k = kts+1, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j)
! recompute : vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(w(i,k,j)+w(i,k,j-1))-0.083333333*(w(i,k,j+1)+w(i,k,j-2)))
          a_w(i,k,j-2) = a_w(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j-1) = a_w(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j+1) = a_w(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*fzp(k)
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel*fzm(k)
          a_vel = 0.
        end do
      end do
    else if (j .eq. jde-1) then
      k = ktf+1
! recompute : k
      do i = i_start, i_end
        a_rv(i,k-2,j) = a_rv(i,k-2,j)-0.5*a_fqy(i,k,jp1)*fzp(k-1)*(w(i,k,j)+w(i,k,j-1))
        a_rv(i,k-1,j) = a_rv(i,k-1,j)+0.5*a_fqy(i,k,jp1)*(2-fzm(k-1))*(w(i,k,j)+w(i,k,j-1))
        a_w(i,k,j-1) = a_w(i,k,j-1)+0.5*a_fqy(i,k,jp1)*((2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j))
        a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqy(i,k,jp1)*((2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j))
        a_fqy(i,k,jp1) = 0.
      end do
      do k = kts+1, ktf
        do i = i_start, i_end
          a_rv(i,k-1,j) = a_rv(i,k-1,j)+0.5*a_fqy(i,k,jp1)*fzp(k)*(w(i,k,j)+w(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_fqy(i,k,jp1)*fzm(k)*(w(i,k,j)+w(i,k,j-1))
          a_w(i,k,j-1) = a_w(i,k,j-1)+0.5*a_fqy(i,k,jp1)*(fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j))
          a_w(i,k,j) = a_w(i,k,j)+0.5*a_fqy(i,k,jp1)*(fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j))
          a_fqy(i,k,jp1) = 0.
        end do
      end do
    else if (j .eq. jde-2) then
      k = ktf+1
! recompute : k
      do i = i_start, i_end
        a_vel = 0.
        vel = (2.-fzm(k-1))*rv(i,k-1,j)-fzp(k-1)*rv(i,k-2,j)
! recompute : vel
        a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(w(i,k,j)+w(i,k,j-1))-0.083333333*(w(i,k,j+1)+w(i,k,j-2)))
        a_w(i,k,j-2) = a_w(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j-1) = a_w(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j+1) = a_w(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
        a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
        a_fqy(i,k,jp1) = 0.
        a_rv(i,k-2,j) = a_rv(i,k-2,j)-a_vel*fzp(k-1)
        a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*(2-fzm(k-1))
        a_vel = 0.
      end do
      do k = kts+1, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = fzm(k)*rv(i,k,j)+fzp(k)*rv(i,k-1,j)
! recompute : vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(w(i,k,j)+w(i,k,j-1))-0.083333333*(w(i,k,j+1)+w(i,k,j-2)))
          a_w(i,k,j-2) = a_w(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j-1) = a_w(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j+1) = a_w(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
          a_w(i,k,j) = a_w(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k-1,j) = a_rv(i,k-1,j)+a_vel*fzp(k)
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel*fzm(k)
          a_vel = 0.
        end do
      end do
    endif
  end do a_j_loop_y_flux_6

end subroutine a_advect_w
