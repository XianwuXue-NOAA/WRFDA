subroutine a_moist_physics_prep_em( t_new, a_t_new, t_old, a_t_old, t0, rho, a_rho, al, a_al, alb, p, a_p, p8w, a_p8w, p0, &
&pb, ph, a_ph, phb, pii, a_pii, pf, a_pf, z, a_z, z_at_w, a_z_at_w, dz8w, a_dz8w, h_diabatic, a_h_diabatic, fzm, fzp, &
&ide, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.8.81  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_al(ims:ime,kms:kme,jms:jme)
real                :: a_alb(ims:ime,kms:kme,jms:jme)
real, intent(out)   :: a_dz8w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_h_diabatic(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_p8w(ims:ime,kms:kme,jms:jme)
real                :: a_pb(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_pf(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real                :: a_phb(ims:ime,kms:kme,jms:jme)
real, intent(out)   :: a_pii(ims:ime,kms:kme,jms:jme)
real, intent(out)   :: a_rho(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_new(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_z(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_z_at_w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: al(ims:ime,kms:kme,jms:jme)
real, intent(in) :: alb(ims:ime,kms:kme,jms:jme)
real, intent(out) :: dz8w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
real, intent(inout) :: h_diabatic(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: p0
real, intent(out) :: p8w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: pb(ims:ime,kms:kme,jms:jme)
real, intent(out) :: pf(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ph(ims:ime,kms:kme,jms:jme)
real, intent(in) :: phb(ims:ime,kms:kme,jms:jme)
real, intent(out) :: pii(ims:ime,kms:kme,jms:jme)
real, intent(out) :: rho(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t0
real, intent(inout) :: t_new(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: t_old(ims:ime,kms:kme,jms:jme)
real, intent(out) :: z(ims:ime,kms:kme,jms:jme)
real, intent(out) :: z_at_w(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_w1
real a_w2
real a_z0
real a_z1
real a_z2
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer k_end
integer k_start
real w1
real w2
real z0
real z1
real z2

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_pb(:,:,:)=0.
a_phb(:,:,:)=0.
a_alb(:,:,:)=0.

a_w1 = 0.
a_w2 = 0.
a_z0 = 0.
a_z1 = 0.
a_z2 = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
!----------------------------------------------
! FUNCTION AND TAPE COMPUTATIONS
!----------------------------------------------
i_start = its
i_end = min(ite,ide-1)
j_start = jts
j_end = min(jte,jde-1)
k_start = kts
k_end = min(kte,kde-1)

do j = j_start, j_end
  do k = k_start, kte
    do i = i_start, i_end
      z_at_w(i,k,j) = (ph(i,k,j)+phb(i,k,j))/g
    end do
  end do
end do
do j = j_start, j_end
  do k = k_start, kte-1
    do i = i_start, i_end
      dz8w(i,k,j) = z_at_w(i,k+1,j)-z_at_w(i,k,j)
    end do
  end do
end do
do j = j_start, j_end
  do i = i_start, i_end
    dz8w(i,kte,j) = 0.
  end do
end do
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
!      h_diabatic(i,k,j) = t_new(i,k,j)   !This is the key, comment this line make it right.
      t_new(i,k,j) = t_new(i,k,j)+t0
      t_old(i,k,j) = t_old(i,k,j)+t0
      rho(i,k,j) = 1./(al(i,k,j)+alb(i,k,j))
      pii(i,k,j) = ((p(i,k,j)+pb(i,k,j))/p0)**rcp
      z(i,k,j) = 0.5*(z_at_w(i,k,j)+z_at_w(i,k+1,j))
      pf(i,k,j) = p(i,k,j)+pb(i,k,j)
    end do
  end do
end do

!----------------------------------------------
! ADJOINT COMPUTATIONS
!----------------------------------------------
do j = j_start, j_end
  do k = k_start, k_end
    do i = i_start, i_end
      a_p(i,k,j) = a_p(i,k,j)+a_pf(i,k,j)
      a_pb(i,k,j) = a_pb(i,k,j)+a_pf(i,k,j)
      a_pf(i,k,j) = 0.
      a_z_at_w(i,k+1,j) = a_z_at_w(i,k+1,j)+0.5*a_z(i,k,j)
      a_z_at_w(i,k,j) = a_z_at_w(i,k,j)+0.5*a_z(i,k,j)
      a_z(i,k,j) = 0.
      a_p(i,k,j) = a_p(i,k,j)+a_pii(i,k,j)/p0*rcp*((p(i,k,j)+pb(i,k,j))/p0)**(rcp-1)
      a_pb(i,k,j) = a_pb(i,k,j)+a_pii(i,k,j)/p0*rcp*((p(i,k,j)+pb(i,k,j))/p0)**(rcp-1)
      a_pii(i,k,j) = 0.
      a_al(i,k,j) = a_al(i,k,j)-a_rho(i,k,j)/((al(i,k,j)+alb(i,k,j))*(al(i,k,j)+alb(i,k,j)))
      a_alb(i,k,j) = a_alb(i,k,j)-a_rho(i,k,j)/((al(i,k,j)+alb(i,k,j))*(al(i,k,j)+alb(i,k,j)))
      a_rho(i,k,j) = 0.
    end do
  end do
end do
do j = j_start, j_end
  do i = i_start, i_end
    a_dz8w(i,kte,j) = 0.
  end do
end do
do j = j_start, j_end
  do k = k_start, kte-1
    do i = i_start, i_end
      a_z_at_w(i,k+1,j) = a_z_at_w(i,k+1,j)+a_dz8w(i,k,j)
      a_z_at_w(i,k,j) = a_z_at_w(i,k,j)-a_dz8w(i,k,j)
      a_dz8w(i,k,j) = 0.
    end do
  end do
end do
do j = j_start, j_end
  do k = k_start, kte
    do i = i_start, i_end
      a_ph(i,k,j) = a_ph(i,k,j)+a_z_at_w(i,k,j)/g
      a_phb(i,k,j) = a_phb(i,k,j)+a_z_at_w(i,k,j)/g
      a_z_at_w(i,k,j) = 0.
    end do
  end do
end do

end subroutine a_moist_physics_prep_em
