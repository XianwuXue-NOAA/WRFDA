subroutine a_calc_mu_uv( config_flags, a_mu, a_muu, a_muv, ids, ide, jds, jde, ims, ime, jms, jme, its, ite, jts, jte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_muu(ims:ime,jms:jme)
real, intent(inout) :: a_muv(ims:ime,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts

!==============================================
! declare local variables
!==============================================
integer i
integer im
integer itf
integer j
integer jm
integer jtf

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
itf = min(ite,ide-1)
! recompute : itf
jtf = jte
! recompute : jtf
if (jts .ne. jds .and. jte .ne. jde) then
  do j = jts, jtf
    do i = its, itf
      a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
      a_muv(i,j) = 0.
    end do
  end do
else if (jts .eq. jds .and. jte .ne. jde) then
  j = jts
! recompute : j
  jm = jts
! recompute : jm
  if (config_flags%periodic_y) then
    jm = jts-1
  endif
! recompute : jm
  do i = its, itf
    a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
    a_mu(i,jm) = a_mu(i,jm)+0.5*a_muv(i,j)
    a_muv(i,j) = 0.
  end do
  do j = jts+1, jtf
    do i = its, itf
      a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
      a_muv(i,j) = 0.
    end do
  end do
else if (jts .ne. jds .and. jte .eq. jde) then
  j = jte
! recompute : j
  jm = jte-1
! recompute : jm
  if (config_flags%periodic_y) then
    jm = jte
  endif
! recompute : jm
  do i = its, itf
    a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
    a_mu(i,jm) = a_mu(i,jm)+0.5*a_muv(i,j)
    a_muv(i,j) = 0.
    a_mu(i,j-1) = a_mu(i,j-1)+a_muv(i,j)
    a_muv(i,j) = 0.
  end do
  do j = jts, jtf-1
    do i = its, itf
      a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
      a_muv(i,j) = 0.
    end do
  end do
else if (jts .eq. jds .and. jte .eq. jde) then
  j = jte
! recompute : j
  jm = jte-1
! recompute : jm
  if (config_flags%periodic_y) then
    jm = jte
  endif
! recompute : jm
  do i = its, itf
    a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
    a_mu(i,jm) = a_mu(i,jm)+0.5*a_muv(i,j)
    a_muv(i,j) = 0.
  end do
! recdepend vars : jts
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:150
! recompute vars : j
  j = jts
! recompute vars : j
! recdepend vars : j,jts
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:151
! recompute vars : jm
  jm = jts
! recompute vars : jm
! recdepend vars : config_flags,j,jm,jts
! recompute pos : IF_STMT module_big_step_utilities_em.f90:152
! recompute vars : jm
  if (config_flags%periodic_y) then
    jm = jts-1
  endif
! recompute vars : jm
  do i = its, itf
    a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
    a_mu(i,jm) = a_mu(i,jm)+0.5*a_muv(i,j)
    a_muv(i,j) = 0.
  end do
  do j = jts+1, jtf-1
    do i = its, itf
      a_mu(i,j-1) = a_mu(i,j-1)+0.5*a_muv(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muv(i,j)
      a_muv(i,j) = 0.
    end do
  end do
endif
! recdepend vars : ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:46
! recompute vars : itf
itf = ite
! recompute vars : itf
! recdepend vars : itf,jde,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:47
! recompute vars : jtf
jtf = min(jte,jde-1)
! recompute vars : jtf
if (its .ne. ids .and. ite .ne. ide) then
  do j = jts, jtf
    do i = its, itf
      a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
      a_muu(i,j) = 0.
    end do
  end do
else if (its .eq. ids .and. ite .ne. ide) then
  i = its
! recompute : i
  im = its
! recompute : im
  if (config_flags%periodic_x) then
    im = its-1
  endif
! recompute : im
  do j = jts, jtf
    a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
    a_mu(im,j) = a_mu(im,j)+0.5*a_muu(i,j)
    a_muu(i,j) = 0.
  end do
  do j = jts, jtf
    do i = its+1, itf
      a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
      a_muu(i,j) = 0.
    end do
  end do
else if (its .ne. ids .and. ite .eq. ide) then
  i = ite
! recompute : i
  im = ite-1
! recompute : im
  if (config_flags%periodic_x) then
    im = ite
  endif
! recompute : im
  do j = jts, jtf
    a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
    a_mu(im,j) = a_mu(im,j)+0.5*a_muu(i,j)
    a_muu(i,j) = 0.
  end do
  do j = jts, jtf
    do i = its, itf-1
      a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
      a_muu(i,j) = 0.
    end do
  end do
else if (its .eq. ids .and. ite .eq. ide) then
  i = ite
! recompute : i
  im = ite-1
! recompute : im
  if (config_flags%periodic_x) then
    im = ite
  endif
! recompute : im
  do j = jts, jtf
    a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
    a_mu(im,j) = a_mu(im,j)+0.5*a_muu(i,j)
    a_muu(i,j) = 0.
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:89
! recompute vars : i
  i = its
! recompute vars : i
! recdepend vars : i,its
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:90
! recompute vars : im
  im = its
! recompute vars : im
! recdepend vars : config_flags,i,im,its
! recompute pos : IF_STMT module_big_step_utilities_em.f90:91
! recompute vars : im
  if (config_flags%periodic_x) then
    im = its-1
  endif
! recompute vars : im
  do j = jts, jtf
    a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
    a_mu(im,j) = a_mu(im,j)+0.5*a_muu(i,j)
    a_muu(i,j) = 0.
  end do
  do j = jts, jtf
    do i = its+1, itf-1
      a_mu(i-1,j) = a_mu(i-1,j)+0.5*a_muu(i,j)
      a_mu(i,j) = a_mu(i,j)+0.5*a_muu(i,j)
      a_muu(i,j) = 0.
    end do
  end do
endif

end subroutine a_calc_mu_uv
