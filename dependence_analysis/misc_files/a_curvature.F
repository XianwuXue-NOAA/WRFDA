subroutine a_curvature( ru, a_ru, rv, a_rv, rw, a_rw, u, a_u, v, a_v, a_ru_tend, a_rv_tend, a_rw_tend, config_flags, msfu, msfv, &
&fzm, fzp, rdx, rdy, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rw(ims:ime,kms:kme,jms:jme)
real, intent(in) :: u(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_vxgm(its-1:ite,kts:kte,jts-1:jte)
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer ktf
logical specified
real vxgm(its-1:ite,kts:kte,jts-1:jte)

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_vxgm(:,:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified =  .false. 
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified =  .true. 
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
i_start = its-1
! recompute : i_start
i_end = ite
! recompute : i_end
j_start = jts-1
! recompute : j_start
j_end = jte
! recompute : j_end
if ((config_flags%open_xs .or. specified .or. config_flags%nested) .and. its .eq. ids) then
  i_start = its
endif
! recompute : i_start
if ((config_flags%open_xe .or. specified .or. config_flags%nested) .and. ite .eq. ide) then
  i_end = ite-1
endif
! recompute : i_end
if ((config_flags%open_ys .or. specified .or. config_flags%nested) .and. jts .eq. jds) then
  j_start = jts
endif
! recompute : j_start
if ((config_flags%open_ye .or. specified .or. config_flags%nested) .and. jte .eq. jde) then
  j_end = jte-1
endif
! recompute : j_end
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      vxgm(i,k,j) = 0.5*(u(i,k,j)+u(i+1,k,j))*(msfv(i,j+1)-msfv(i,j))*rdy-0.5*(v(i,k,j)+v(i,k,j+1))*(msfu(i+1,j)-msfu(i,j))*rdx
    end do
  end do
end do
! recompute : vxgm
if ((config_flags%open_xs .or. specified .or. config_flags%nested) .and. its .eq. ids) then
  do j = jts-1, jte
    do k = kts, ktf
      vxgm(its-1,k,j) = vxgm(its,k,j)
    end do
  end do
endif
! recompute : vxgm
if ((config_flags%open_xe .or. specified .or. config_flags%nested) .and. ite .eq. ide) then
  do j = jts-1, jte
    do k = kts, ktf
      vxgm(ite,k,j) = vxgm(ite-1,k,j)
    end do
  end do
endif
! recompute : vxgm
if ((config_flags%open_ys .or. specified .or. config_flags%nested) .and. jts .eq. jds) then
  do k = kts, ktf
    do i = its-1, ite
      vxgm(i,k,jts-1) = vxgm(i,k,jts)
    end do
  end do
endif
! recompute : vxgm
if ((config_flags%open_ye .or. specified .or. config_flags%nested) .and. jte .eq. jde) then
  do k = kts, ktf
    do i = its-1, ite
      vxgm(i,k,jte) = vxgm(i,k,jte-1)
    end do
  end do
endif
! recompute : vxgm
i_start = its
! recompute : i_start
if (config_flags%open_xs .or. specified .or. config_flags%nested) then
  i_start = max(ids+1,its)
endif
! recompute : i_start
if (config_flags%open_xe .or. specified .or. config_flags%nested) then
  i_end = min(ide-1,ite)
endif
! recompute : i_end
j_start = jts
! recompute : j_start
if (config_flags%open_ys .or. specified .or. config_flags%nested) then
  j_start = max(jds+1,jts)
endif
! recompute : j_start
if (config_flags%open_ye .or. specified .or. config_flags%nested) then
  j_end = min(jde-1,jte)
endif
! recompute : j_end
do j = jts, min(jte,jde-1)
  do k = max(2,kts), ktf
    do i = its, min(ite,ide-1)
      a_ru(i+1,k-1,j) = a_ru(i+1,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*fzp(k)*(fzm(k)*(u(i,k,j)+u(i+1,k,j))+fzp(k)*(u(i,k-1,j)+u(i+&
&1,k-1,j)))
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*fzp(k)*(fzm(k)*(u(i,k,j)+u(i+1,k,j))+fzp(k)*(u(i,k-1,j)+u(i+1,k-&
&1,j)))
      a_ru(i+1,k,j) = a_ru(i+1,k,j)+0.25*a_rw_tend(i,k,j)*reradius*fzm(k)*(fzm(k)*(u(i,k,j)+u(i+1,k,j))+fzp(k)*(u(i,k-1,j)+u(i+1,k-&
&1,j)))
      a_ru(i,k,j) = a_ru(i,k,j)+0.25*a_rw_tend(i,k,j)*reradius*fzm(k)*(fzm(k)*(u(i,k,j)+u(i+1,k,j))+fzp(k)*(u(i,k-1,j)+u(i+1,k-1,j)&
&))
      a_rv(i,k-1,j+1) = a_rv(i,k-1,j+1)+0.25*a_rw_tend(i,k,j)*reradius*fzp(k)*(fzm(k)*(v(i,k,j)+v(i,k,j+1))+fzp(k)*(v(i,k-1,j)+v(i,&
&k-1,j+1)))
      a_rv(i,k-1,j) = a_rv(i,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*fzp(k)*(fzm(k)*(v(i,k,j)+v(i,k,j+1))+fzp(k)*(v(i,k-1,j)+v(i,k-1,&
&j+1)))
      a_rv(i,k,j+1) = a_rv(i,k,j+1)+0.25*a_rw_tend(i,k,j)*reradius*fzm(k)*(fzm(k)*(v(i,k,j)+v(i,k,j+1))+fzp(k)*(v(i,k-1,j)+v(i,k-1,&
&j+1)))
      a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_rw_tend(i,k,j)*reradius*fzm(k)*(fzm(k)*(v(i,k,j)+v(i,k,j+1))+fzp(k)*(v(i,k-1,j)+v(i,k-1,j+1)&
&))
      a_u(i+1,k-1,j) = a_u(i+1,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(ru(i,k,j)+ru(i+1,k,j))+fzp(k)*(ru(i,k-1,j)+ru(i+1,k-&
&1,j)))*fzp(k)
      a_u(i,k-1,j) = a_u(i,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(ru(i,k,j)+ru(i+1,k,j))+fzp(k)*(ru(i,k-1,j)+ru(i+1,k-1,j))&
&)*fzp(k)
      a_u(i+1,k,j) = a_u(i+1,k,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(ru(i,k,j)+ru(i+1,k,j))+fzp(k)*(ru(i,k-1,j)+ru(i+1,k-1,j))&
&)*fzm(k)
      a_u(i,k,j) = a_u(i,k,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(ru(i,k,j)+ru(i+1,k,j))+fzp(k)*(ru(i,k-1,j)+ru(i+1,k-1,j)))*&
&fzm(k)
      a_v(i,k-1,j+1) = a_v(i,k-1,j+1)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(rv(i,k,j)+rv(i,k,j+1))+fzp(k)*(rv(i,k-1,j)+rv(i,k-1,&
&j+1)))*fzp(k)
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(rv(i,k,j)+rv(i,k,j+1))+fzp(k)*(rv(i,k-1,j)+rv(i,k-1,j+1))&
&)*fzp(k)
      a_v(i,k,j+1) = a_v(i,k,j+1)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(rv(i,k,j)+rv(i,k,j+1))+fzp(k)*(rv(i,k-1,j)+rv(i,k-1,j+1))&
&)*fzm(k)
      a_v(i,k,j) = a_v(i,k,j)+0.25*a_rw_tend(i,k,j)*reradius*(fzm(k)*(rv(i,k,j)+rv(i,k,j+1))+fzp(k)*(rv(i,k-1,j)+rv(i,k-1,j+1)))*&
&fzm(k)
    end do
  end do
end do
do j = j_start, j_end
  do k = kts, ktf
    do i = its, min(ite,ide-1)
      a_ru(i+1,k,j-1) = a_ru(i+1,k,j-1)-0.125*a_rv_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i,k,j-1))
      a_ru(i,k,j-1) = a_ru(i,k,j-1)-0.125*a_rv_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i,k,j-1))
      a_ru(i+1,k,j) = a_ru(i+1,k,j)-0.125*a_rv_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i,k,j-1))
      a_ru(i,k,j) = a_ru(i,k,j)-0.125*a_rv_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i,k,j-1))
      a_rw(i,k+1,j-1) = a_rw(i,k+1,j-1)+0.25*a_rv_tend(i,k,j)*v(i,k,j)*reradius
      a_rw(i,k+1,j) = a_rw(i,k+1,j)+0.25*a_rv_tend(i,k,j)*v(i,k,j)*reradius
      a_rw(i,k,j-1) = a_rw(i,k,j-1)+0.25*a_rv_tend(i,k,j)*v(i,k,j)*reradius
      a_rw(i,k,j) = a_rw(i,k,j)+0.25*a_rv_tend(i,k,j)*v(i,k,j)*reradius
      a_v(i,k,j) = a_v(i,k,j)+0.25*a_rv_tend(i,k,j)*reradius*(rw(i,k+1,j-1)+rw(i,k,j-1)+rw(i,k+1,j)+rw(i,k,j))
      a_vxgm(i,k,j-1) = a_vxgm(i,k,j-1)-0.125*a_rv_tend(i,k,j)*(ru(i,k,j)+ru(i+1,k,j)+ru(i,k,j-1)+ru(i+1,k,j-1))
      a_vxgm(i,k,j) = a_vxgm(i,k,j)-0.125*a_rv_tend(i,k,j)*(ru(i,k,j)+ru(i+1,k,j)+ru(i,k,j-1)+ru(i+1,k,j-1))
    end do
  end do
end do
do j = jts, min(jde-1,jte)
  do k = kts, ktf
    do i = i_start, i_end
      a_rv(i-1,k,j+1) = a_rv(i-1,k,j+1)+0.125*a_ru_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i-1,k,j))
      a_rv(i,k,j+1) = a_rv(i,k,j+1)+0.125*a_ru_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i-1,k,j))
      a_rv(i-1,k,j) = a_rv(i-1,k,j)+0.125*a_ru_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i-1,k,j))
      a_rv(i,k,j) = a_rv(i,k,j)+0.125*a_ru_tend(i,k,j)*(vxgm(i,k,j)+vxgm(i-1,k,j))
      a_rw(i-1,k+1,j) = a_rw(i-1,k+1,j)-0.25*a_ru_tend(i,k,j)*u(i,k,j)*reradius
      a_rw(i,k+1,j) = a_rw(i,k+1,j)-0.25*a_ru_tend(i,k,j)*u(i,k,j)*reradius
      a_rw(i-1,k,j) = a_rw(i-1,k,j)-0.25*a_ru_tend(i,k,j)*u(i,k,j)*reradius
      a_rw(i,k,j) = a_rw(i,k,j)-0.25*a_ru_tend(i,k,j)*u(i,k,j)*reradius
      a_u(i,k,j) = a_u(i,k,j)-0.25*a_ru_tend(i,k,j)*reradius*(rw(i-1,k+1,j)+rw(i-1,k,j)+rw(i,k+1,j)+rw(i,k,j))
      a_vxgm(i-1,k,j) = a_vxgm(i-1,k,j)+0.125*a_ru_tend(i,k,j)*(rv(i-1,k,j+1)+rv(i,k,j+1)+rv(i-1,k,j)+rv(i,k,j))
      a_vxgm(i,k,j) = a_vxgm(i,k,j)+0.125*a_ru_tend(i,k,j)*(rv(i-1,k,j+1)+rv(i,k,j+1)+rv(i-1,k,j)+rv(i,k,j))
    end do
  end do
end do
if ((config_flags%open_ye .or. specified .or. config_flags%nested) .and. jte .eq. jde) then
  do k = kts, ktf
    do i = its-1, ite
      a_vxgm(i,k,jte-1) = a_vxgm(i,k,jte-1)+a_vxgm(i,k,jte)
      a_vxgm(i,k,jte) = 0.
    end do
  end do
endif
if ((config_flags%open_ys .or. specified .or. config_flags%nested) .and. jts .eq. jds) then
  do k = kts, ktf
    do i = its-1, ite
      a_vxgm(i,k,jts) = a_vxgm(i,k,jts)+a_vxgm(i,k,jts-1)
      a_vxgm(i,k,jts-1) = 0.
    end do
  end do
endif
if ((config_flags%open_xe .or. specified .or. config_flags%nested) .and. ite .eq. ide) then
  do j = jts-1, jte
    do k = kts, ktf
      a_vxgm(ite-1,k,j) = a_vxgm(ite-1,k,j)+a_vxgm(ite,k,j)
      a_vxgm(ite,k,j) = 0.
    end do
  end do
endif
if ((config_flags%open_xs .or. specified .or. config_flags%nested) .and. its .eq. ids) then
  do j = jts-1, jte
    do k = kts, ktf
      a_vxgm(its,k,j) = a_vxgm(its,k,j)+a_vxgm(its-1,k,j)
      a_vxgm(its-1,k,j) = 0.
    end do
  end do
endif
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:3594
! recompute vars : i_start
i_start = its-1
! recompute vars : i_start
! recdepend vars : i_start,ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:3595
! recompute vars : i_end
i_end = ite
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:3596
! recompute vars : j_start
j_start = jts-1
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:3597
! recompute vars : j_end
j_end = jte
! recompute vars : j_end
!  recdepend vars : config_flags,i_end,i_start,ids,its,j_end,j_start,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:3599
! recompute vars : i_start
if ((config_flags%open_xs .or. specified .or. config_flags%nested) .and. its .eq. ids) then
  i_start = its
endif
! recompute vars : i_start
!  recdepend vars : config_flags,i_end,i_start,ide,ite,j_end,j_start,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:3601
! recompute vars : i_end
if ((config_flags%open_xe .or. specified .or. config_flags%nested) .and. ite .eq. ide) then
  i_end = ite-1
endif
! recompute vars : i_end
!  recdepend vars : config_flags,i_end,i_start,j_end,j_start,jds,jts,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:3603
! recompute vars : j_start
if ((config_flags%open_ys .or. specified .or. config_flags%nested) .and. jts .eq. jds) then
  j_start = jts
endif
! recompute vars : j_start
!  recdepend vars : config_flags,i_end,i_start,j_end,j_start,jde,jte,spe
! cified
! recompute pos : IF_STMT module_big_step_utilities_em.f90:3605
! recompute vars : j_end
if ((config_flags%open_ye .or. specified .or. config_flags%nested) .and. jte .eq. jde) then
  j_end = jte-1
endif
! recompute vars : j_end
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      a_u(i+1,k,j) = a_u(i+1,k,j)+0.5*a_vxgm(i,k,j)*(msfv(i,j+1)-msfv(i,j))*rdy
      a_u(i,k,j) = a_u(i,k,j)+0.5*a_vxgm(i,k,j)*(msfv(i,j+1)-msfv(i,j))*rdy
      a_v(i,k,j+1) = a_v(i,k,j+1)-0.5*a_vxgm(i,k,j)*(msfu(i+1,j)-msfu(i,j))*rdx
      a_v(i,k,j) = a_v(i,k,j)-0.5*a_vxgm(i,k,j)*(msfu(i+1,j)-msfu(i,j))*rdx
      a_vxgm(i,k,j) = 0.
    end do
  end do
end do

end subroutine a_curvature
