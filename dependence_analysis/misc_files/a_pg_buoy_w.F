subroutine a_pg_buoy_w( a_rw_tend, p, a_p, cqw, a_cqw, a_mu, mub, rdnw, rdn, g, msft, ide, jde, kde, ims, ime, jms, jme, kms, kme, &
&its, ite, jts, jte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_cqw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: cqw(ims:ime,kms:kme,jms:jme)
real, intent(in) :: g
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: mub(ims:ime,jms:jme)
real, intent(in) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdn(kms:kme)
real, intent(in) :: rdnw(kms:kme)

!==============================================
! declare local variables
!==============================================
real a_cq1
real a_cq2
real cq1
integer i
integer itf
integer j
integer jtf
integer k

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_cq1 = 0.
a_cq2 = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
itf = min(ite,ide-1)
! recompute : itf
jtf = min(jte,jde-1)
! recompute : jtf
do j = jts, jtf
  a_cq1 = 0.
  a_cq2 = 0.
  do k = 2, kde-1
    a_cq1 = 0.
    a_cq2 = 0.
    do i = its, itf
      a_cq1 = 0.
      a_cq2 = 0.
      cq1 = 1./(1.+cqw(i,k,j))
! recompute : cq1
      a_cq1 = a_cq1+a_rw_tend(i,k,j)*1./msft(i,j)*g*rdn(k)*(p(i,k,j)-p(i,k-1,j))
      a_cq2 = a_cq2-a_rw_tend(i,k,j)*1./msft(i,j)*g*mub(i,j)
      a_mu(i,j) = a_mu(i,j)-a_rw_tend(i,k,j)*1./msft(i,j)*g
      a_p(i,k-1,j) = a_p(i,k-1,j)-a_rw_tend(i,k,j)*1./msft(i,j)*g*cq1*rdn(k)
      a_p(i,k,j) = a_p(i,k,j)+a_rw_tend(i,k,j)*1./msft(i,j)*g*cq1*rdn(k)
      a_cq1 = a_cq1+a_cqw(i,k,j)
      a_cqw(i,k,j) = 0.
      a_cq1 = a_cq1+a_cq2*cqw(i,k,j)
      a_cqw(i,k,j) = a_cqw(i,k,j)+a_cq2*cq1
      a_cq2 = 0.
      a_cqw(i,k,j) = a_cqw(i,k,j)-a_cq1/((1.+cqw(i,k,j))*(1.+cqw(i,k,j)))
      a_cq1 = 0.
    end do
  end do
! recdepend vars : kde
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:2094
! recompute vars : k
  k = kde
! recompute vars : k
  do i = its, itf
    a_cq1 = 0.
    a_cq2 = 0.
    cq1 = 1./(1.+cqw(i,k-1,j))
! recompute : cq1
    a_cq1 = a_cq1-2*a_rw_tend(i,k,j)*1./msft(i,j)*g*rdnw(k-1)*p(i,k-1,j)
    a_cq2 = a_cq2-a_rw_tend(i,k,j)*1./msft(i,j)*g*mub(i,j)
    a_mu(i,j) = a_mu(i,j)-a_rw_tend(i,k,j)*1./msft(i,j)*g
    a_p(i,k-1,j) = a_p(i,k-1,j)-2*a_rw_tend(i,k,j)*1./msft(i,j)*g*cq1*rdnw(k-1)
    a_cq1 = a_cq1+a_cq2*cqw(i,k-1,j)
    a_cqw(i,k-1,j) = a_cqw(i,k-1,j)+a_cq2*cq1
    a_cq2 = 0.
    a_cqw(i,k-1,j) = a_cqw(i,k-1,j)-a_cq1/((1.+cqw(i,k-1,j))*(1.+cqw(i,k-1,j)))
    a_cq1 = 0.
  end do
end do

end subroutine a_pg_buoy_w
