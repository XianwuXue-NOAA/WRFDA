subroutine a_smag_km( config_flags, xkmh, a_xkmh, a_xkmhd, bn2, a_bn2, defor11, defor22, defor33, defor12, defor13, defor23, rdzw, &
&dx, dy, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_bn2(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmh(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_xkmhd(ims:ime,kms:kme,jms:jme)
real, intent(in) :: bn2(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: defor11(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor12(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor13(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor22(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor23(ims:ime,kms:kme,jms:jme)
real, intent(in) :: defor33(ims:ime,kms:kme,jms:jme)
real, intent(in) :: dx
real, intent(in) :: dy
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: rdzw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: xkmh(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_tmp
real cr_len
real def2(its:ite,kts:kte,jts:jte)
real deltas
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer ktf
real mlen_h
real pr
real tmp

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_tmp = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
ktf = min(kte,kde-1)
! recompute : ktf
i_start = its
! recompute : i_start
i_end = min(ite,ide-1)
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = min(jte,jde-1)
! recompute : j_end
if (config_flags%open_xs .or. config_flags%specified .or. config_flags%nested) then
  i_start = max(ids+1,its)
endif
! recompute : i_start
if (config_flags%open_xe .or. config_flags%specified .or. config_flags%nested) then
  i_end = min(ide-2,ite)
endif
! recompute : i_end
if (config_flags%open_ys .or. config_flags%specified .or. config_flags%nested) then
  j_start = max(jds+1,jts)
endif
! recompute : j_start
if (config_flags%open_ye .or. config_flags%specified .or. config_flags%nested) then
  j_end = min(jde-2,jte)
endif
! recompute : j_end
pr = 1./3.
! recompute : pr
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      def2(i,k,j) = 0.5*(defor11(i,k,j)*defor11(i,k,j)+defor22(i,k,j)*defor22(i,k,j)+defor33(i,k,j)*defor33(i,k,j))
    end do
  end do
end do
! recompute : def2
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      tmp = 0.25*(defor12(i,k,j)+defor12(i,k,j+1)+defor12(i+1,k,j)+defor12(i+1,k,j+1))
      def2(i,k,j) = def2(i,k,j)+0.5*tmp*tmp
    end do
  end do
end do
! recompute : def2
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      tmp = 0.25*(defor13(i,k+1,j)+defor13(i,k,j)+defor13(i+1,k+1,j)+defor13(i+1,k,j))
      def2(i,k,j) = def2(i,k,j)+0.5*tmp*tmp
    end do
  end do
end do
! recompute : def2
do j = j_start, j_end
  do k = kts, ktf
    do i = i_start, i_end
      tmp = 0.25*(defor23(i,k+1,j)+defor23(i,k,j)+defor23(i,k+1,j+1)+defor23(i,k,j+1))
      def2(i,k,j) = def2(i,k,j)+0.5*tmp*tmp
    end do
  end do
end do
! recompute : def2
cr_len = dx+1.
! recompute : cr_len
if (dx .gt. cr_len) then
  mlen_h = sqrt(dx*dy)
! recompute : mlen_h
  do j = j_start, j_end
    a_tmp = 0.
    do k = kts, ktf
      a_tmp = 0.
      do i = i_start, i_end
        a_tmp = 0.
        tmp = max(0.,def2(i,k,j)-bn2(i,k,j)/pr)
! recompute : tmp
        tmp = tmp**0.5
! recompute : tmp
        xkmh(i,k,j) = max(c_s*c_s*mlen_h*mlen_h*tmp,1.e-6*mlen_h*mlen_h)
! recompute : xkmh
        a_xkmh(i,k,j) = a_xkmh(i,k,j)+a_xkmhd(i,k,j)
        a_xkmhd(i,k,j) = 0.
        a_xkmh(i,k,j) = a_xkmh(i,k,j)*(0.5+sign(0.5,10.*mlen_h-xkmh(i,k,j)))
        a_tmp = a_tmp+a_xkmh(i,k,j)*(0.5+sign(0.5,c_s*c_s*mlen_h*mlen_h*tmp-1.e-6*mlen_h*mlen_h))*c_s*c_s*mlen_h*mlen_h
        a_xkmh(i,k,j) = 0.
! recdepend vars : bn2,def2,i,j,k,pr
! recompute pos : ASSIGN_STMT module_diffusion_em.f90:1516
! recompute vars : tmp
        tmp = max(0.,def2(i,k,j)-bn2(i,k,j)/pr)
! recompute vars : tmp
        a_tmp = 0.5*a_tmp*tmp**(-0.5)
        a_bn2(i,k,j) = a_bn2(i,k,j)-a_tmp*((0.5-sign(0.5,0.-(def2(i,k,j)-bn2(i,k,j)/pr)))/pr)
        a_tmp = 0.
      end do
    end do
  end do
else
  do j = j_start, j_end
    a_tmp = 0.
    do k = kts, ktf
      a_tmp = 0.
      do i = i_start, i_end
        a_tmp = 0.
        deltas = (dx*dy/rdzw(i,k,j))**0.33333333
! recompute : deltas
        tmp = max(0.,def2(i,k,j)-bn2(i,k,j)/pr)
! recompute : tmp
        tmp = tmp**0.5
! recompute : tmp
        xkmh(i,k,j) = max(c_s*c_s*deltas*deltas*tmp,1.e-6*deltas*deltas)
! recompute : xkmh
        a_xkmh(i,k,j) = a_xkmh(i,k,j)+a_xkmhd(i,k,j)
        a_xkmhd(i,k,j) = 0.
        a_xkmh(i,k,j) = a_xkmh(i,k,j)*(0.5+sign(0.5,10.*deltas-xkmh(i,k,j)))
        a_tmp = a_tmp+a_xkmh(i,k,j)*(0.5+sign(0.5,c_s*c_s*deltas*deltas*tmp-1.e-6*deltas*deltas))*c_s*c_s*deltas*deltas
        a_xkmh(i,k,j) = 0.
! recdepend vars : bn2,def2,i,j,k,pr
! recompute pos : ASSIGN_STMT module_diffusion_em.f90:1533
! recompute vars : tmp
        tmp = max(0.,def2(i,k,j)-bn2(i,k,j)/pr)
! recompute vars : tmp
        a_tmp = 0.5*a_tmp*tmp**(-0.5)
        a_bn2(i,k,j) = a_bn2(i,k,j)-a_tmp*((0.5-sign(0.5,0.-(def2(i,k,j)-bn2(i,k,j)/pr)))/pr)
        a_tmp = 0.
      end do
    end do
  end do
endif

end subroutine a_smag_km
