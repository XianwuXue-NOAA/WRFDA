subroutine a_calc_ww_cp( u, a_u, v, a_v, mup, a_mup, mub, a_ww, rdx, rdy, msft, msfu, msfv, dnw, ide, jde, kde, ims, ime, jms, jme,&
& kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
real, intent(inout) :: a_mup(ims:ime,jms:jme)
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ww(ims:ime,kms:kme,jms:jme)
real, intent(in) :: dnw(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mub(ims:ime,jms:jme)
real, intent(in) :: mup(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: u(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_divv(its:ite,kts:kte)
real a_dmdt(its:ite)
real a_muu(its:ite+1,jts:jte+1)
real a_muv(its:ite+1,jts:jte+1)
integer i
integer itf
integer j
integer jtf
integer k
integer ktf
real muu(its:ite+1,jts:jte+1)
real muv(its:ite+1,jts:jte+1)

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_divv(:,:) = 0.
a_dmdt(:) = 0.
a_muu(:,:) = 0.
a_muv(:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
jtf = min(jte,jde-1)
! recompute : jtf
ktf = min(kte,kde-1)
! recompute : ktf
itf = min(ite,ide-1)
! recompute : itf
do j = jts, jtf
  do i = its, min(ite+1,ide)
    muu(i,j) = 0.5*(mup(i,j)+mub(i,j)+mup(i-1,j)+mub(i-1,j))/msfu(i,j)
  end do
end do
! recompute : muu
do j = jts, min(jte+1,jde)
  do i = its, itf
    muv(i,j) = 0.5*(mup(i,j)+mub(i,j)+mup(i,j-1)+mub(i,j-1))/msfv(i,j)
  end do
end do
! recompute : muv
do j = jts, jtf
  do k = ktf, 2, -1
    do i = its, itf
      a_divv(i,k-1) = a_divv(i,k-1)-a_ww(i,k,j)
      a_dmdt(i) = a_dmdt(i)-a_ww(i,k,j)*dnw(k-1)
      a_ww(i,k-1,j) = a_ww(i,k-1,j)+a_ww(i,k,j)
      a_ww(i,k,j) = 0.
    end do
  end do
  do k = ktf, kts, -1
    do i = its, itf
      a_divv(i,k) = a_divv(i,k)+a_dmdt(i)
      a_muu(i+1,j) = a_muu(i+1,j)+a_divv(i,k)*msft(i,j)*dnw(k)*rdx*u(i+1,k,j)
      a_muu(i,j) = a_muu(i,j)-a_divv(i,k)*msft(i,j)*dnw(k)*rdx*u(i,k,j)
      a_muv(i,j+1) = a_muv(i,j+1)+a_divv(i,k)*msft(i,j)*dnw(k)*rdy*v(i,k,j+1)
      a_muv(i,j) = a_muv(i,j)-a_divv(i,k)*msft(i,j)*dnw(k)*rdy*v(i,k,j)
      a_u(i+1,k,j) = a_u(i+1,k,j)+a_divv(i,k)*msft(i,j)*dnw(k)*rdx*muu(i+1,j)
      a_u(i,k,j) = a_u(i,k,j)-a_divv(i,k)*msft(i,j)*dnw(k)*rdx*muu(i,j)
      a_v(i,k,j+1) = a_v(i,k,j+1)+a_divv(i,k)*msft(i,j)*dnw(k)*rdy*muv(i,j+1)
      a_v(i,k,j) = a_v(i,k,j)-a_divv(i,k)*msft(i,j)*dnw(k)*rdy*muv(i,j)
      a_divv(i,k) = 0.
    end do
  end do
  do i = its, ite
    a_ww(i,kte,j) = 0.
    a_ww(i,1,j) = 0.
    a_dmdt(i) = 0.
  end do
end do
do j = jts, min(jte+1,jde)
  do i = its, itf
    a_mup(i,j-1) = a_mup(i,j-1)+a_muv(i,j)*(0.5/msfv(i,j))
    a_mup(i,j) = a_mup(i,j)+a_muv(i,j)*(0.5/msfv(i,j))
    a_muv(i,j) = 0.
  end do
end do
do j = jts, jtf
  do i = its, min(ite+1,ide)
    a_mup(i-1,j) = a_mup(i-1,j)+a_muu(i,j)*(0.5/msfu(i,j))
    a_mup(i,j) = a_mup(i,j)+a_muu(i,j)*(0.5/msfu(i,j))
    a_muu(i,j) = 0.
  end do
end do

end subroutine a_calc_ww_cp
