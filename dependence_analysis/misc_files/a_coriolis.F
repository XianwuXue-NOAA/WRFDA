subroutine a_coriolis( a_ru, a_rv, a_rw, a_ru_tend, a_rv_tend, a_rw_tend, config_flags, f, e, sina, cosa, fzm, fzp, ids, ide, jds, &
&jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw_tend(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: cosa(ims:ime,jms:jme)
real, intent(in) :: e(ims:ime,jms:jme)
real, intent(in) :: f(ims:ime,jms:jme)
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: sina(ims:ime,jms:jme)

!==============================================
! declare local variables
!==============================================
integer i
integer i_end
integer i_start
integer j
integer j_end
integer j_start
integer k
integer ktf
logical specified

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified =  .false. 
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified =  .true. 
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
i_start = its
! recompute : i_start
i_end = ite
! recompute : i_end
if (config_flags%open_xs .or. specified .or. config_flags%nested) then
  i_start = max(ids+1,its)
endif
! recompute : i_start
if (config_flags%open_xe .or. specified .or. config_flags%nested) then
  i_end = min(ide-1,ite)
endif
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = jte
! recompute : j_end
if (config_flags%open_ys .or. specified .or. config_flags%nested) then
  j_start = max(jds+1,jts)
endif
! recompute : j_start
if (config_flags%open_ye .or. specified .or. config_flags%nested) then
  j_end = min(jde-1,jte)
endif
! recompute : j_end
do j = jts, min(jte,jde-1)
  do k = kts+1, ktf
    do i = its, min(ite,ide-1)
      a_ru(i+1,k-1,j) = a_ru(i+1,k-1,j)+0.5*a_rw_tend(i,k,j)*e(i,j)*cosa(i,j)*fzp(k)
      a_ru(i,k-1,j) = a_ru(i,k-1,j)+0.5*a_rw_tend(i,k,j)*e(i,j)*cosa(i,j)*fzp(k)
      a_ru(i+1,k,j) = a_ru(i+1,k,j)+0.5*a_rw_tend(i,k,j)*e(i,j)*cosa(i,j)*fzm(k)
      a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_rw_tend(i,k,j)*e(i,j)*cosa(i,j)*fzm(k)
      a_rv(i,k-1,j+1) = a_rv(i,k-1,j+1)-0.5*a_rw_tend(i,k,j)*e(i,j)*sina(i,j)*fzp(k)
      a_rv(i,k-1,j) = a_rv(i,k-1,j)-0.5*a_rw_tend(i,k,j)*e(i,j)*sina(i,j)*fzp(k)
      a_rv(i,k,j+1) = a_rv(i,k,j+1)-0.5*a_rw_tend(i,k,j)*e(i,j)*sina(i,j)*fzm(k)
      a_rv(i,k,j) = a_rv(i,k,j)-0.5*a_rw_tend(i,k,j)*e(i,j)*sina(i,j)*fzm(k)
    end do
  end do
end do
if (config_flags%open_ye .and. jte .eq. jde) then
  do k = kts, ktf
    do i = its, min(ide-1,ite)
      a_ru(i+1,k,jte-1) = a_ru(i+1,k,jte-1)-0.5*a_rv_tend(i,k,jte)*f(i,jte-1)
      a_ru(i,k,jte-1) = a_ru(i,k,jte-1)-0.5*a_rv_tend(i,k,jte)*f(i,jte-1)
      a_rw(i,k+1,jte-1) = a_rw(i,k+1,jte-1)+0.5*a_rv_tend(i,k,jte)*e(i,jte-1)*sina(i,jte-1)
      a_rw(i,k,jte-1) = a_rw(i,k,jte-1)+0.5*a_rv_tend(i,k,jte)*e(i,jte-1)*sina(i,jte-1)
    end do
  end do
endif
do j = j_start, j_end
  do k = kts, ktf
    do i = its, min(ide-1,ite)
      a_ru(i+1,k,j-1) = a_ru(i+1,k,j-1)-0.125*a_rv_tend(i,k,j)*(f(i,j)+f(i,j-1))
      a_ru(i,k,j-1) = a_ru(i,k,j-1)-0.125*a_rv_tend(i,k,j)*(f(i,j)+f(i,j-1))
      a_ru(i+1,k,j) = a_ru(i+1,k,j)-0.125*a_rv_tend(i,k,j)*(f(i,j)+f(i,j-1))
      a_ru(i,k,j) = a_ru(i,k,j)-0.125*a_rv_tend(i,k,j)*(f(i,j)+f(i,j-1))
      a_rw(i,k+1,j-1) = a_rw(i,k+1,j-1)+0.0625*a_rv_tend(i,k,j)*(e(i,j)+e(i,j-1))*(sina(i,j)+sina(i,j-1))
      a_rw(i,k+1,j) = a_rw(i,k+1,j)+0.0625*a_rv_tend(i,k,j)*(e(i,j)+e(i,j-1))*(sina(i,j)+sina(i,j-1))
      a_rw(i,k,j-1) = a_rw(i,k,j-1)+0.0625*a_rv_tend(i,k,j)*(e(i,j)+e(i,j-1))*(sina(i,j)+sina(i,j-1))
      a_rw(i,k,j) = a_rw(i,k,j)+0.0625*a_rv_tend(i,k,j)*(e(i,j)+e(i,j-1))*(sina(i,j)+sina(i,j-1))
    end do
  end do
end do
if (config_flags%open_ys .and. jts .eq. jds) then
  do k = kts, ktf
    do i = its, min(ide-1,ite)
      a_ru(i+1,k,jts) = a_ru(i+1,k,jts)-0.5*a_rv_tend(i,k,jts)*f(i,jts)
      a_ru(i,k,jts) = a_ru(i,k,jts)-0.5*a_rv_tend(i,k,jts)*f(i,jts)
      a_rw(i,k+1,jts) = a_rw(i,k+1,jts)+0.5*a_rv_tend(i,k,jts)*e(i,jts)*sina(i,jts)
      a_rw(i,k,jts) = a_rw(i,k,jts)+0.5*a_rv_tend(i,k,jts)*e(i,jts)*sina(i,jts)
    end do
  end do
endif
do j = jts, min(jte,jde-1)
  if (config_flags%open_xe .and. ite .eq. ide) then
    do k = kts, ktf
      a_rv(ite-1,k,j+1) = a_rv(ite-1,k,j+1)+0.5*a_ru_tend(ite,k,j)*f(ite-1,j)
      a_rv(ite-1,k,j) = a_rv(ite-1,k,j)+0.5*a_ru_tend(ite,k,j)*f(ite-1,j)
      a_rw(ite-1,k+1,j) = a_rw(ite-1,k+1,j)-0.5*a_ru_tend(ite,k,j)*e(ite-1,j)*cosa(ite-1,j)
      a_rw(ite-1,k,j) = a_rw(ite-1,k,j)-0.5*a_ru_tend(ite,k,j)*e(ite-1,j)*cosa(ite-1,j)
    end do
  endif
  if (config_flags%open_xs .and. its .eq. ids) then
    do k = kts, ktf
      a_rv(its,k,j+1) = a_rv(its,k,j+1)+0.5*a_ru_tend(its,k,j)*f(its,j)
      a_rv(its,k,j) = a_rv(its,k,j)+0.5*a_ru_tend(its,k,j)*f(its,j)
      a_rw(its,k+1,j) = a_rw(its,k+1,j)-0.5*a_ru_tend(its,k,j)*e(its,j)*cosa(its,j)
      a_rw(its,k,j) = a_rw(its,k,j)-0.5*a_ru_tend(its,k,j)*e(its,j)*cosa(its,j)
    end do
  endif
  do k = kts, ktf
    do i = i_start, i_end
      a_rv(i-1,k,j+1) = a_rv(i-1,k,j+1)+0.125*a_ru_tend(i,k,j)*(f(i,j)+f(i-1,j))
      a_rv(i,k,j+1) = a_rv(i,k,j+1)+0.125*a_ru_tend(i,k,j)*(f(i,j)+f(i-1,j))
      a_rv(i-1,k,j) = a_rv(i-1,k,j)+0.125*a_ru_tend(i,k,j)*(f(i,j)+f(i-1,j))
      a_rv(i,k,j) = a_rv(i,k,j)+0.125*a_ru_tend(i,k,j)*(f(i,j)+f(i-1,j))
      a_rw(i-1,k+1,j) = a_rw(i-1,k+1,j)-0.0625*a_ru_tend(i,k,j)*(e(i,j)+e(i-1,j))*(cosa(i,j)+cosa(i-1,j))
      a_rw(i,k+1,j) = a_rw(i,k+1,j)-0.0625*a_ru_tend(i,k,j)*(e(i,j)+e(i-1,j))*(cosa(i,j)+cosa(i-1,j))
      a_rw(i-1,k,j) = a_rw(i-1,k,j)-0.0625*a_ru_tend(i,k,j)*(e(i,j)+e(i-1,j))*(cosa(i,j)+cosa(i-1,j))
      a_rw(i,k,j) = a_rw(i,k,j)-0.0625*a_ru_tend(i,k,j)*(e(i,j)+e(i-1,j))*(cosa(i,j)+cosa(i-1,j))
    end do
  end do
end do

end subroutine a_coriolis
