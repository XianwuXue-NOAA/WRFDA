subroutine a_calc_cq( moist, a_moist, a_cqu, a_cqv, a_cqw, n_moist, ide, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, &
&jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_cqu(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqw(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: n_moist
real, intent(inout) :: a_moist(ims:ime,kms:kme,jms:jme,n_moist)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: moist(ims:ime,kms:kme,jms:jme,n_moist)

!==============================================
! declare local variables
!==============================================
real a_qtot
integer i
integer ispe
integer itf
integer j
integer jtf
integer k
integer ktf
real qtot

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_qtot = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
ktf = min(kte,kde-1)
! recompute : ktf
if (n_moist .ge. param_first_scalar) then
  itf = min(ite,ide-1)
! recompute : itf
  jtf = min(jte,jde-1)
! recompute : jtf
  do j = jts, jtf
    a_qtot = 0.
    do k = kts+1, ktf
      a_qtot = 0.
      do i = its, itf
        a_qtot = 0.
        a_qtot = a_qtot+0.5*a_cqw(i,k,j)
        a_cqw(i,k,j) = 0.
        do ispe = param_first_scalar, n_moist
          a_moist(i,k-1,j,ispe) = a_moist(i,k-1,j,ispe)+a_qtot
          a_moist(i,k,j,ispe) = a_moist(i,k,j,ispe)+a_qtot
        end do
        a_qtot = 0.
      end do
    end do
  end do
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:860
! recompute vars : itf
  itf = min(ite,ide-1)
! recompute vars : itf
! recdepend vars : itf,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:861
! recompute vars : jtf
  jtf = jte
! recompute vars : jtf
  do j = jts, jtf
    a_qtot = 0.
    do k = kts, ktf
      a_qtot = 0.
      do i = its, itf
        a_qtot = 0.
        qtot = 0.
! recompute : qtot
        do ispe = param_first_scalar, n_moist
          qtot = qtot+moist(i,k,j,ispe)+moist(i,k,j-1,ispe)
        end do
! recompute : qtot
        a_qtot = a_qtot-a_cqv(i,k,j)*(0.5/((1.+0.5*qtot)*(1.+0.5*qtot)))
        a_cqv(i,k,j) = 0.
        do ispe = param_first_scalar, n_moist
          a_moist(i,k,j-1,ispe) = a_moist(i,k,j-1,ispe)+a_qtot
          a_moist(i,k,j,ispe) = a_moist(i,k,j,ispe)+a_qtot
        end do
        a_qtot = 0.
      end do
    end do
  end do
! recdepend vars : ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:839
! recompute vars : itf
  itf = ite
! recompute vars : itf
! recdepend vars : itf,jde,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:840
! recompute vars : jtf
  jtf = min(jte,jde-1)
! recompute vars : jtf
  do j = jts, jtf
    a_qtot = 0.
    do k = kts, ktf
      a_qtot = 0.
      do i = its, itf
        a_qtot = 0.
        qtot = 0.
! recompute : qtot
        do ispe = param_first_scalar, n_moist
          qtot = qtot+moist(i,k,j,ispe)+moist(i-1,k,j,ispe)
        end do
! recompute : qtot
        a_qtot = a_qtot-a_cqu(i,k,j)*(0.5/((1.+0.5*qtot)*(1.+0.5*qtot)))
        a_cqu(i,k,j) = 0.
        do ispe = param_first_scalar, n_moist
          a_moist(i-1,k,j,ispe) = a_moist(i-1,k,j,ispe)+a_qtot
          a_moist(i,k,j,ispe) = a_moist(i,k,j,ispe)+a_qtot
        end do
        a_qtot = 0.
      end do
    end do
  end do
else
  itf = min(ite,ide-1)
! recompute : itf
  jtf = min(jte,jde-1)
! recompute : jtf
  do j = jts, jtf
    do k = kts+1, ktf
      do i = its, itf
        a_cqw(i,k,j) = 0.
      end do
    end do
  end do
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:905
! recompute vars : itf
  itf = min(ite,ide-1)
! recompute vars : itf
! recdepend vars : itf,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:906
! recompute vars : jtf
  jtf = jte
! recompute vars : jtf
  do j = jts, jtf
    do k = kts, ktf
      do i = its, itf
        a_cqv(i,k,j) = 0.
      end do
    end do
  end do
! recdepend vars : ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:839
! recompute vars : itf
  itf = ite
! recompute vars : itf
! recdepend vars : itf,jde,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:840
! recompute vars : jtf
  jtf = min(jte,jde-1)
! recompute vars : jtf
  do j = jts, jtf
    do k = kts, ktf
      do i = its, itf
        a_cqu(i,k,j) = 0.
      end do
    end do
  end do
endif

end subroutine a_calc_cq
