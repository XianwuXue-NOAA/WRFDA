subroutine a_couple_momentum( muu, a_muu, a_ru, u, a_u, msfu, muv, a_muv, a_rv, v, a_v, msfv, mut, a_mut, a_rw, w, a_w, msft, ide, &
&jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
real, intent(inout) :: a_mut(ims:ime,jms:jme)
real, intent(inout) :: a_muu(ims:ime,jms:jme)
real, intent(inout) :: a_muv(ims:ime,jms:jme)
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mut(ims:ime,jms:jme)
real, intent(in) :: muu(ims:ime,jms:jme)
real, intent(in) :: muv(ims:ime,jms:jme)
real, intent(in) :: u(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
integer i
integer itf
integer j
integer jtf
integer k
integer ktf

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
ktf = min(kte,kde-1)
! recompute : ktf
itf = min(ite,ide-1)
! recompute : itf
jtf = min(jte,jde-1)
! recompute : jtf
do j = jts, jtf
  do k = kts, kte
    do i = its, itf
      a_mut(i,j) = a_mut(i,j)+a_rw(i,k,j)*(w(i,k,j)/msft(i,j))
      a_w(i,k,j) = a_w(i,k,j)+a_rw(i,k,j)*(mut(i,j)/msft(i,j))
      a_rw(i,k,j) = 0.
    end do
  end do
end do
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:359
! recompute vars : itf
itf = min(ite,ide-1)
! recompute vars : itf
! recdepend vars : itf,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:360
! recompute vars : jtf
jtf = jte
! recompute vars : jtf
do j = jts, jtf
  do k = kts, ktf
    do i = its, itf
      a_muv(i,j) = a_muv(i,j)+a_rv(i,k,j)*(v(i,k,j)/msfv(i,j))
      a_v(i,k,j) = a_v(i,k,j)+a_rv(i,k,j)*(muv(i,j)/msfv(i,j))
      a_rv(i,k,j) = 0.
    end do
  end do
end do
! recdepend vars : ite
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:348
! recompute vars : itf
itf = ite
! recompute vars : itf
! recdepend vars : itf,jde,jte
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:349
! recompute vars : jtf
jtf = min(jte,jde-1)
! recompute vars : jtf
do j = jts, jtf
  do k = kts, ktf
    do i = its, itf
      a_muu(i,j) = a_muu(i,j)+a_ru(i,k,j)*(u(i,k,j)/msfu(i,j))
      a_u(i,k,j) = a_u(i,k,j)+a_ru(i,k,j)*(muu(i,j)/msfu(i,j))
      a_ru(i,k,j) = 0.
    end do
  end do
end do

end subroutine a_couple_momentum
