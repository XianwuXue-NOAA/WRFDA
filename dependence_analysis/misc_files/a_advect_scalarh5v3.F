subroutine a_advect_scalar( field, a_field, field_old, a_field_old, a_tendency, ru, a_ru, rv, a_rv, rom, a_rom, config_flags, msft,&
& fzm, fzp, rdx, rdy, rdzw, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_field(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_field_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rom(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_tendency(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: field(ims:ime,kms:kme,jms:jme)
real, intent(in) :: field_old(ims:ime,kms:kme,jms:jme)
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: rdzw(kms:kme)
real, intent(in) :: rom(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_fqx(its:ite+1,kts:kte)
real a_fqy(its:ite,kts:kte,2)
real a_ub
real a_vb
real a_vel
real a_vflux(its:ite,kts:kte)
logical degrade_xe
logical degrade_xs
logical degrade_ye
logical degrade_ys
integer horz_order
integer i
integer i_end
integer i_end_f
integer i_start
integer i_start_f
integer j
integer j1
integer j2
integer j3
integer j4
integer j_end
integer j_end_f
integer j_start
integer j_start_f
integer jp0
integer jp1
integer jtmp
integer k
integer ktf
real mrdx
real mrdy
logical specified
real ub
real vb
real vel
integer vert_order

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_fqx(:,:) = 0.
a_fqy(:,:,:) = 0.
a_ub = 0.
a_vb = 0.
a_vel = 0.
a_vflux(:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified = .FALSE.
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified = .TRUE.
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
!tafsupport: FORCED "config_flags%h_sca_adv_order" to "5"
horz_order = 5
! recompute : horz_order
!tafsupport: FORCED "config_flags%v_sca_adv_order" to "3"
vert_order = 3
! recompute : vert_order
!tafsupport: FORCED "horz_order" to "5"
  ktf = min(kte,kde-1)
! recompute : ktf
i_start = its
! recompute : i_start
i_end = min(ite,ide-1)
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = min(jte,jde-1)
! recompute : j_end
!tafsupport: FORCED "vert_order" to "3"
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do i = i_start, i_end
      k = ktf
! recompute : k
      a_field(i,k-1,j) = a_field(i,k-1,j)+a_vflux(i,k)*rom(i,k,j)*fzp(k)
      a_field(i,k,j) = a_field(i,k,j)+a_vflux(i,k)*rom(i,k,j)*fzm(k)
      a_rom(i,k,j) = a_rom(i,k,j)+a_vflux(i,k)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:3831
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_field(i,k-1,j) = a_field(i,k-1,j)+a_vflux(i,k)*rom(i,k,j)*fzp(k)
      a_field(i,k,j) = a_field(i,k,j)+a_vflux(i,k)*rom(i,k,j)*fzm(k)
      a_rom(i,k,j) = a_rom(i,k,j)+a_vflux(i,k)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
      a_vflux(i,k) = 0.
    end do
    do k = kts+2, ktf-1
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = rom(i,k,j)
! recompute : vel
        a_field(i,k-2,j) = a_field(i,k-2,j)+a_vflux(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,-vel))
        a_field(i,k-1,j) = a_field(i,k-1,j)+a_vflux(i,k)*vel*(0.58333333+0.25*sign(1.,-vel))
        a_field(i,k+1,j) = a_field(i,k+1,j)+a_vflux(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,-vel))
        a_field(i,k,j) = a_field(i,k,j)+a_vflux(i,k)*vel*(0.58333333+(-0.25)*sign(1.,-vel))
        a_vel = a_vel+a_vflux(i,k)*(0.58333333*(field(i,k,j)+field(i,k-1,j))-0.083333333*(field(i,k+1,j)+field(i,k-2,j))+&
&0.083333333*(field(i,k+1,j)-field(i,k-2,j)-3.*(field(i,k,j)-field(i,k-1,j)))*sign(1.,-vel))
        a_vflux(i,k) = 0.
        a_rom(i,k,j) = a_rom(i,k,j)+a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:3621
! recompute vars : i_start
i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:3622
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:3624
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_ye .and. jte .eq. jde) then
  do i = i_start, i_end
    a_vb = 0.
    do k = kts, ktf
      a_vb = 0.
      vb = max(0.5*(rv(i,k,jte-1)+rv(i,k,jte)),0.)
! recompute : vb
      a_field(i,k,j_end) = a_field(i,k,j_end)-a_tendency(i,k,j_end)*rdy*(rv(i,k,jte)-rv(i,k,jte-1))
      a_field_old(i,k,j_end-1) = a_field_old(i,k,j_end-1)+a_tendency(i,k,j_end)*rdy*vb
      a_field_old(i,k,j_end) = a_field_old(i,k,j_end)-a_tendency(i,k,j_end)*rdy*vb
      a_rv(i,k,jte-1) = a_rv(i,k,jte-1)+a_tendency(i,k,j_end)*rdy*field(i,k,j_end)
      a_rv(i,k,jte) = a_rv(i,k,jte)-a_tendency(i,k,j_end)*rdy*field(i,k,j_end)
      a_vb = a_vb-a_tendency(i,k,j_end)*rdy*(field_old(i,k,j_end)-field_old(i,k,j_end-1))
      a_rv(i,k,jte-1) = a_rv(i,k,jte-1)+0.5*a_vb*(0.5+sign(0.5,0.5*(rv(i,k,jte-1)+rv(i,k,jte))-0.))
      a_rv(i,k,jte) = a_rv(i,k,jte)+0.5*a_vb*(0.5+sign(0.5,0.5*(rv(i,k,jte-1)+rv(i,k,jte))-0.))
      a_vb = 0.
    end do
  end do
endif
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:3621
! recompute vars : i_start
i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:3622
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
if (config_flags%open_ys .and. jts .eq. jds) then
  do i = i_start, i_end
    a_vb = 0.
    do k = kts, ktf
      a_vb = 0.
      vb = min(0.5*(rv(i,k,jts)+rv(i,k,jts+1)),0.)
! recompute : vb
      a_field(i,k,jts) = a_field(i,k,jts)-a_tendency(i,k,jts)*rdy*(rv(i,k,jts+1)-rv(i,k,jts))
      a_field_old(i,k,jts+1) = a_field_old(i,k,jts+1)-a_tendency(i,k,jts)*rdy*vb
      a_field_old(i,k,jts) = a_field_old(i,k,jts)+a_tendency(i,k,jts)*rdy*vb
      a_rv(i,k,jts+1) = a_rv(i,k,jts+1)-a_tendency(i,k,jts)*rdy*field(i,k,jts)
      a_rv(i,k,jts) = a_rv(i,k,jts)+a_tendency(i,k,jts)*rdy*field(i,k,jts)
      a_vb = a_vb-a_tendency(i,k,jts)*rdy*(field_old(i,k,jts+1)-field_old(i,k,jts))
      a_rv(i,k,jts+1) = a_rv(i,k,jts+1)+0.5*a_vb*(0.5+sign(0.5,0.-0.5*(rv(i,k,jts)+rv(i,k,jts+1))))
      a_rv(i,k,jts) = a_rv(i,k,jts)+0.5*a_vb*(0.5+sign(0.5,0.-0.5*(rv(i,k,jts)+rv(i,k,jts+1))))
      a_vb = 0.
    end do
  end do
endif
! recdepend vars : ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:3622
! recompute vars : i_end
i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:3623
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:3624
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_xe .and. ite .eq. ide) then
  do j = j_start, j_end
    a_ub = 0.
    do k = kts, ktf
      a_ub = 0.
      ub = max(0.5*(ru(ite-1,k,j)+ru(ite,k,j)),0.)
! recompute : ub
      a_field(i_end,k,j) = a_field(i_end,k,j)-a_tendency(i_end,k,j)*rdx*(ru(ite,k,j)-ru(ite-1,k,j))
      a_field_old(i_end-1,k,j) = a_field_old(i_end-1,k,j)+a_tendency(i_end,k,j)*rdx*ub
      a_field_old(i_end,k,j) = a_field_old(i_end,k,j)-a_tendency(i_end,k,j)*rdx*ub
      a_ru(ite-1,k,j) = a_ru(ite-1,k,j)+a_tendency(i_end,k,j)*rdx*field(i_end,k,j)
      a_ru(ite,k,j) = a_ru(ite,k,j)-a_tendency(i_end,k,j)*rdx*field(i_end,k,j)
      a_ub = a_ub-a_tendency(i_end,k,j)*rdx*(field_old(i_end,k,j)-field_old(i_end-1,k,j))
      a_ru(ite-1,k,j) = a_ru(ite-1,k,j)+0.5*a_ub*(0.5+sign(0.5,0.5*(ru(ite-1,k,j)+ru(ite,k,j))-0.))
      a_ru(ite,k,j) = a_ru(ite,k,j)+0.5*a_ub*(0.5+sign(0.5,0.5*(ru(ite-1,k,j)+ru(ite,k,j))-0.))
      a_ub = 0.
    end do
  end do
endif
! recdepend vars : jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:3623
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:3624
! recompute vars : j_end
j_end = min(jte,jde-1)
! recompute vars : j_end
if (config_flags%open_xs .and. its .eq. ids) then
  do j = j_start, j_end
    a_ub = 0.
    do k = kts, ktf
      a_ub = 0.
      ub = min(0.5*(ru(its,k,j)+ru(its+1,k,j)),0.)
! recompute : ub
      a_field(its,k,j) = a_field(its,k,j)-a_tendency(its,k,j)*rdx*(ru(its+1,k,j)-ru(its,k,j))
      a_field_old(its+1,k,j) = a_field_old(its+1,k,j)-a_tendency(its,k,j)*rdx*ub
      a_field_old(its,k,j) = a_field_old(its,k,j)+a_tendency(its,k,j)*rdx*ub
      a_ru(its+1,k,j) = a_ru(its+1,k,j)-a_tendency(its,k,j)*rdx*field(its,k,j)
      a_ru(its,k,j) = a_ru(its,k,j)+a_tendency(its,k,j)*rdx*field(its,k,j)
      a_ub = a_ub-a_tendency(its,k,j)*rdx*(field_old(its+1,k,j)-field_old(its,k,j))
      a_ru(its+1,k,j) = a_ru(its+1,k,j)+0.5*a_ub*(0.5+sign(0.5,0.-0.5*(ru(its,k,j)+ru(its+1,k,j))))
      a_ru(its,k,j) = a_ru(its,k,j)+0.5*a_ub*(0.5+sign(0.5,0.-0.5*(ru(its,k,j)+ru(its+1,k,j))))
      a_ub = 0.
    end do
  end do
endif
! recdepend vars : kde,kte
! recompute pos : ASSIGN_STMT module_advect_em.f90:2795
! recompute vars : ktf
ktf = min(kte,kde-1)
! recompute vars : ktf
!tafsupport: FORCED "horz_order" to "5"
  degrade_xs = .TRUE.
! recompute : degrade_xs
  degrade_xe = .TRUE.
! recompute : degrade_xe
  degrade_ys = .TRUE.
! recompute : degrade_ys
  degrade_ye = .TRUE.
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+2) then
    degrade_xs = .FALSE.
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-3) then
    degrade_xe = .FALSE.
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+2) then
    degrade_ys = .FALSE.
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-3) then
    degrade_ye = .FALSE.
  endif
! recompute : degrade_ye
! recompute : ktf
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  j_start_f = j_start
! recompute : j_start_f
  j_end_f = j_end+1
! recompute : j_end_f
  if (degrade_ys) then
    j_start_f = jds+3
  endif
! recompute : j_start_f
  if (degrade_ye) then
    j_end_f = jde-3
  endif
! recompute : j_end_f
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = min(jte,jde-1)
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = max(ids+1,its)
    i_start_f = i_start+2
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = min(ide-2,ite)
    i_end_f = ide-3
  endif
! recompute : i_end,i_end_f
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msft(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      i = ide-2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = ru(i,k,j)
! recompute : vel
        a_field(i-2,k,j) = a_field(i-2,k,j)+a_fqx(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_fqx(i,k)*vel*(0.58333333+0.25*sign(1.,vel))
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_fqx(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
        a_field(i,k,j) = a_field(i,k,j)+a_fqx(i,k)*vel*(0.58333333+(-0.25)*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(field(i,k,j)+field(i-1,k,j))-0.083333333*(field(i+1,k,j)+field(i-2,k,j))+0.083333333*&
&(field(i+1,k,j)-field(i-2,k,j)-3.*(field(i,k,j)-field(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel
        a_vel = 0.
      end do
      if (i_end .eq. ide-2) then
        i = ide-1
! recompute : i
        do k = kts, ktf
          a_field(i-1,k,j) = a_field(i-1,k,j)+0.5*a_fqx(i,k)*ru(i,k,j)
          a_field(i,k,j) = a_field(i,k,j)+0.5*a_fqx(i,k)*ru(i,k,j)
          a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_fqx(i,k)*(field(i,k,j)+field(i-1,k,j))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    if (degrade_xs) then
      i = ids+2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = ru(i,k,j)
! recompute : vel
        a_field(i-2,k,j) = a_field(i-2,k,j)+a_fqx(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_fqx(i,k)*vel*(0.58333333+0.25*sign(1.,vel))
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_fqx(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
        a_field(i,k,j) = a_field(i,k,j)+a_fqx(i,k)*vel*(0.58333333+(-0.25)*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(field(i,k,j)+field(i-1,k,j))-0.083333333*(field(i+1,k,j)+field(i-2,k,j))+0.083333333*&
&(field(i+1,k,j)-field(i-2,k,j)-3.*(field(i,k,j)-field(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel
        a_vel = 0.
      end do
      if (i_start .eq. ids+1) then
        i = ids+1
! recompute : i
        do k = kts, ktf
          a_field(i-1,k,j) = a_field(i-1,k,j)+0.5*a_fqx(i,k)*ru(i,k,j)
          a_field(i,k,j) = a_field(i,k,j)+0.5*a_fqx(i,k)*ru(i,k,j)
          a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_fqx(i,k)*(field(i,k,j)+field(i-1,k,j))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    do k = kts, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = ru(i,k,j)
! recompute : vel
        a_field(i-3,k,j) = a_field(i-3,k,j)+a_fqx(i,k)*vel*(0.016666667-(-0.016666667)*sign(1.,vel))
        a_field(i-2,k,j) = a_field(i-2,k,j)+a_fqx(i,k)*vel*((-0.13333333)-0.083333333*sign(1.,vel))
        a_field(i-1,k,j) = a_field(i-1,k,j)+a_fqx(i,k)*vel*(0.61666667-(-0.16666667)*sign(1.,vel))
        a_field(i+2,k,j) = a_field(i+2,k,j)+a_fqx(i,k)*vel*(0.016666667-0.016666667*sign(1.,vel))
        a_field(i+1,k,j) = a_field(i+1,k,j)+a_fqx(i,k)*vel*((-0.13333333)-(-0.083333333)*sign(1.,vel))
        a_field(i,k,j) = a_field(i,k,j)+a_fqx(i,k)*vel*(0.61666667-0.16666667*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.61666667*(field(i,k,j)+field(i-1,k,j))-0.13333333*(field(i+1,k,j)+field(i-2,k,j))+0.016666667*&
&(field(i+2,k,j)+field(i-3,k,j))-0.016666667*(field(i+2,k,j)-field(i-3,k,j)-5.*(field(i+1,k,j)-field(i-2,k,j))+10.*&
&(field(i,k,j)-field(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j) = a_ru(i,k,j)+a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:3057
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:3058
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:3059
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:3060
! recompute vars : j_end
  j_end = min(jte,jde-1)
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:3068
! recompute vars : j_start
  if (degrade_ys) then
    j_start = max(jts,jds+1)
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:3073
! recompute vars : j_end
  if (degrade_ye) then
    j_end = min(jte,jde-2)
  endif
! recompute vars : j_end

  a_j_loop_y_flux_5: do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:3080
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
! recdepend vars : jp1
! recompute pos : ASSIGN_STMT module_advect_em.f90:3081
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
    j_loop_y_flux_9a: do j1 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do j_loop_y_flux_9a
!    if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          mrdy = msft(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .ge. j_start_f .and. j .le. j_end_f) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = rv(i,k,j)
! recompute : vel
          a_field(i,k,j-3) = a_field(i,k,j-3)+a_fqy(i,k,jp1)*vel*(0.016666667-(-0.016666667)*sign(1.,vel))
          a_field(i,k,j-2) = a_field(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.13333333)-0.083333333*sign(1.,vel))
          a_field(i,k,j-1) = a_field(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.61666667-(-0.16666667)*sign(1.,vel))
          a_field(i,k,j+2) = a_field(i,k,j+2)+a_fqy(i,k,jp1)*vel*(0.016666667-0.016666667*sign(1.,vel))
          a_field(i,k,j+1) = a_field(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.13333333)-(-0.083333333)*sign(1.,vel))
          a_field(i,k,j) = a_field(i,k,j)+a_fqy(i,k,jp1)*vel*(0.61666667-0.16666667*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.61666667*(field(i,k,j)+field(i,k,j-1))-0.13333333*(field(i,k,j+1)+field(i,k,j-2))+&
&0.016666667*(field(i,k,j+2)+field(i,k,j-3))-0.016666667*(field(i,k,j+2)-field(i,k,j-3)-5.*(field(i,k,j+1)-field(i,k,j-2)&
&)+10.*(field(i,k,j)-field(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel
          a_vel = 0.
        end do
      end do



    else if (j .eq. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          a_field(i,k,j-1) = a_field(i,k,j-1)+0.5*a_fqy(i,k,jp1)*rv(i,k,j)
          a_field(i,k,j) = a_field(i,k,j)+0.5*a_fqy(i,k,jp1)*rv(i,k,j)
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_fqy(i,k,jp1)*(field(i,k,j)+field(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
        end do
      end do
    else if (j .eq. jds+2) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = rv(i,k,j)
! recompute : vel
          a_field(i,k,j-2) = a_field(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
          a_field(i,k,j-1) = a_field(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.58333333+0.25*sign(1.,vel))
          a_field(i,k,j+1) = a_field(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
          a_field(i,k,j) = a_field(i,k,j)+a_fqy(i,k,jp1)*vel*(0.58333333+(-0.25)*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(field(i,k,j)+field(i,k,j-1))-0.083333333*(field(i,k,j+1)+field(i,k,j-2))+&
&0.083333333*(field(i,k,j+1)-field(i,k,j-2)-3.*(field(i,k,j)-field(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel
          a_vel = 0.
        end do
      end do
    else if (j .eq. jde-1) then
      do k = kts, ktf
        do i = i_start, i_end
          a_field(i,k,j-1) = a_field(i,k,j-1)+0.5*a_fqy(i,k,jp1)*rv(i,k,j)
          a_field(i,k,j) = a_field(i,k,j)+0.5*a_fqy(i,k,jp1)*rv(i,k,j)
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_fqy(i,k,jp1)*(field(i,k,j)+field(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
        end do
      end do
    else if (j .eq. jde-2) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = rv(i,k,j)
! recompute : vel
          a_field(i,k,j-2) = a_field(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
          a_field(i,k,j-1) = a_field(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.58333333+0.25*sign(1.,vel))
          a_field(i,k,j+1) = a_field(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
          a_field(i,k,j) = a_field(i,k,j)+a_fqy(i,k,jp1)*vel*(0.58333333+(-0.25)*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(field(i,k,j)+field(i,k,j-1))-0.083333333*(field(i,k,j+1)+field(i,k,j-2))+&
&0.083333333*(field(i,k,j+1)-field(i,k,j-2)-3.*(field(i,k,j)-field(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j) = a_rv(i,k,j)+a_vel
          a_vel = 0.
        end do
      end do
    endif
  end do a_j_loop_y_flux_5

end subroutine a_advect_scalar
