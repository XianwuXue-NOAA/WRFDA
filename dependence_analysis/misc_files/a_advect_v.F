subroutine a_advect_v( v, a_v, v_old, a_v_old, a_tendency, ru, a_ru, rv, a_rv, rom, a_rom, mut, a_mut, config_flags, msfv, fzm, &
&fzp, rdx, rdy, rdzw, ids, ide, jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
real, intent(inout) :: a_mut(ims:ime,jms:jme)
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_rom(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_tendency(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v_old(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: fzm(kms:kme)
real, intent(in) :: fzp(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mut(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: rdzw(kms:kme)
real, intent(in) :: rom(ims:ime,kms:kme,jms:jme)
real, intent(in) :: ru(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rv(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v_old(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
real a_dum
real a_dup
real a_fqx(its:ite+1,kts:kte)
real a_fqy(its:ite,kts:kte,2)
real a_ub
real a_uw
real a_vb
real a_vel
real a_vflux(its:ite,kts:kte)
logical degrade_xe
logical degrade_xs
logical degrade_ye
logical degrade_ys
real dum
real dup
integer horz_order
integer i
integer i_end
integer i_end_f
integer i_start
integer i_start_f
integer j
integer j1
integer j2
integer j3
integer j4
integer j_end
integer j_end_f
integer j_start
integer j_start_f
integer jm
integer jmax
integer jmin
integer jp
integer jp0
integer jp1
integer jtmp
integer k
integer ktf
real mrdx
real mrdy
logical specified
real ub
real uw
real vb
real vel
integer vert_order

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_dum = 0.
a_dup = 0.
a_fqx(:,:) = 0.
a_fqy(:,:,:) = 0.
a_ub = 0.
a_uw = 0.
a_vb = 0.
a_vel = 0.
a_vflux(:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
specified =  .false. 
! recompute : specified
if (config_flags%specified .or. config_flags%nested) then
  specified =  .true. 
endif
! recompute : specified
ktf = min(kte,kde-1)
! recompute : ktf
horz_order = config_flags%h_mom_adv_order
! recompute : horz_order
vert_order = config_flags%v_mom_adv_order
! recompute : vert_order
horizontal_order_tesu: if (horz_order .eq. 6) then
  ktf = min(kte,kde-1)
else if (horz_order .eq. 4) then horizontal_order_tesu
  ktf = min(kte,kde-1)
else if (horz_order .eq. 3) then horizontal_order_tesu
  ktf = min(kte,kde-1)
endif horizontal_order_tesu
! recompute : ktf
jmin = jds
! recompute : jmin
jmax = jde-1
! recompute : jmax
if (config_flags%open_ys) then
  jmin = jds
endif
! recompute : jmin
if (config_flags%open_ye) then
  jmax = jde-1
endif
! recompute : jmax
i_start = its
! recompute : i_start
i_end = min(ite,ide-1)
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = jte
! recompute : j_end
if (config_flags%open_ys .or. specified) then
  j_start = max(jds+1,jts)
endif
! recompute : j_start
if (config_flags%open_ye .or. specified) then
  j_end = min(jde-1,jte)
endif
! recompute : j_end
a_vert_order_test: if (vert_order .eq. 6) then
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do i = i_start, i_end
      a_vel = 0.
      k = ktf-1
! recompute : k
      vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
      k = ktf
! recompute : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_advect_em.f90:2544
! recompute vars : k
      k = ktf-1
! recompute vars : k
      a_v(i,k-2,j) = a_v(i,k-2,j)-0.083333333*a_vflux(i,k)*vel
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.58333333*a_vflux(i,k)*vel
      a_v(i,k+1,j) = a_v(i,k+1,j)-0.083333333*a_vflux(i,k)*vel
      a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_vflux(i,k)*vel
      a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j)))
      a_vflux(i,k) = 0.
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_advect_em.f90:2544
! recompute vars : k
      k = ktf-1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
      a_vel = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2539
! recompute vars : k
      k = kts+2
! recompute vars : k
! recdepend vars : i,j,k,rom
! recompute pos : ASSIGN_STMT module_advect_em.f90:2540
! recompute vars : vel
      vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute vars : vel
      a_v(i,k-2,j) = a_v(i,k-2,j)-0.083333333*a_vflux(i,k)*vel
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.58333333*a_vflux(i,k)*vel
      a_v(i,k+1,j) = a_v(i,k+1,j)-0.083333333*a_vflux(i,k)*vel
      a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_vflux(i,k)*vel
      a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j)))
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2539
! recompute vars : k
      k = kts+2
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
      a_vel = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2536
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
    end do
    do k = kts+3, ktf-2
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
        a_v(i,k-3,j) = a_v(i,k-3,j)+0.016666667*a_vflux(i,k)*vel
        a_v(i,k-2,j) = a_v(i,k-2,j)-0.13333333*a_vflux(i,k)*vel
        a_v(i,k-1,j) = a_v(i,k-1,j)+0.61666667*a_vflux(i,k)*vel
        a_v(i,k+2,j) = a_v(i,k+2,j)+0.016666667*a_vflux(i,k)*vel
        a_v(i,k+1,j) = a_v(i,k+1,j)-0.13333333*a_vflux(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.61666667*a_vflux(i,k)*vel
        a_vel = a_vel+a_vflux(i,k)*(0.61666667*(v(i,k,j)+v(i,k-1,j))-0.13333333*(v(i,k+1,j)+v(i,k-2,j))+0.016666667*(v(i,k+2,j)+&
&v(i,k-3,j)))
        a_vflux(i,k) = 0.
        a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
else if (vert_order .eq. 5) then a_vert_order_test
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do i = i_start, i_end
      a_vel = 0.
      k = ktf-1
! recompute : k
      vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
      k = ktf
! recompute : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_advect_em.f90:2587
! recompute vars : k
      k = ktf-1
! recompute vars : k
      a_v(i,k-2,j) = a_v(i,k-2,j)+a_vflux(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,-vel))
      a_v(i,k-1,j) = a_v(i,k-1,j)+a_vflux(i,k)*vel*(0.58333333+0.25*sign(1.,-vel))
      a_v(i,k+1,j) = a_v(i,k+1,j)+a_vflux(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,-vel))
      a_v(i,k,j) = a_v(i,k,j)+a_vflux(i,k)*vel*(0.58333333+(-0.25)*sign(1.,-vel))
      a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j))+0.083333333*(v(i,k+1,j)-v(i,&
&k-2,j)-3.*(v(i,k,j)-v(i,k-1,j)))*sign(1.,-vel))
      a_vflux(i,k) = 0.
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_advect_em.f90:2587
! recompute vars : k
      k = ktf-1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
      a_vel = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2582
! recompute vars : k
      k = kts+2
! recompute vars : k
! recdepend vars : i,j,k,rom
! recompute pos : ASSIGN_STMT module_advect_em.f90:2583
! recompute vars : vel
      vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute vars : vel
      a_v(i,k-2,j) = a_v(i,k-2,j)+a_vflux(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,-vel))
      a_v(i,k-1,j) = a_v(i,k-1,j)+a_vflux(i,k)*vel*(0.58333333+0.25*sign(1.,-vel))
      a_v(i,k+1,j) = a_v(i,k+1,j)+a_vflux(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,-vel))
      a_v(i,k,j) = a_v(i,k,j)+a_vflux(i,k)*vel*(0.58333333+(-0.25)*sign(1.,-vel))
      a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j))+0.083333333*(v(i,k+1,j)-v(i,&
&k-2,j)-3.*(v(i,k,j)-v(i,k-1,j)))*sign(1.,-vel))
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2582
! recompute vars : k
      k = kts+2
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
      a_vel = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2579
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
    end do
    do k = kts+3, ktf-2
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
        a_v(i,k-3,j) = a_v(i,k-3,j)+a_vflux(i,k)*vel*(0.016666667-(-0.016666667)*sign(1.,-vel))
        a_v(i,k-2,j) = a_v(i,k-2,j)+a_vflux(i,k)*vel*((-0.13333333)-0.083333333*sign(1.,-vel))
        a_v(i,k-1,j) = a_v(i,k-1,j)+a_vflux(i,k)*vel*(0.61666667-(-0.16666667)*sign(1.,-vel))
        a_v(i,k+2,j) = a_v(i,k+2,j)+a_vflux(i,k)*vel*(0.016666667-0.016666667*sign(1.,-vel))
        a_v(i,k+1,j) = a_v(i,k+1,j)+a_vflux(i,k)*vel*((-0.13333333)-(-0.083333333)*sign(1.,-vel))
        a_v(i,k,j) = a_v(i,k,j)+a_vflux(i,k)*vel*(0.61666667-0.16666667*sign(1.,-vel))
        a_vel = a_vel+a_vflux(i,k)*(0.61666667*(v(i,k,j)+v(i,k-1,j))-0.13333333*(v(i,k+1,j)+v(i,k-2,j))+0.016666667*(v(i,k+2,j)+&
&v(i,k-3,j))-0.016666667*(v(i,k+2,j)-v(i,k-3,j)-5.*(v(i,k+1,j)-v(i,k-2,j))+10.*(v(i,k,j)-v(i,k-1,j)))*sign(1.,-vel))
        a_vflux(i,k) = 0.
        a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
else if (vert_order .eq. 4) then a_vert_order_test
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do i = i_start, i_end
      k = ktf
! recompute : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2622
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
    end do
    do k = kts+2, ktf-1
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
        a_v(i,k-2,j) = a_v(i,k-2,j)-0.083333333*a_vflux(i,k)*vel
        a_v(i,k-1,j) = a_v(i,k-1,j)+0.58333333*a_vflux(i,k)*vel
        a_v(i,k+1,j) = a_v(i,k+1,j)-0.083333333*a_vflux(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_vflux(i,k)*vel
        a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j)))
        a_vflux(i,k) = 0.
        a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
else if (vert_order .eq. 3) then a_vert_order_test
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do i = i_start, i_end
      k = ktf
! recompute : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
! recdepend vars : kts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2655
! recompute vars : k
      k = kts+1
! recompute vars : k
      a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
      a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
      a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
      a_vflux(i,k) = 0.
    end do
    do k = kts+2, ktf-1
      a_vel = 0.
      do i = i_start, i_end
        a_vel = 0.
        vel = 0.5*(rom(i,k,j)+rom(i,k,j-1))
! recompute : vel
        a_v(i,k-2,j) = a_v(i,k-2,j)+a_vflux(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,-vel))
        a_v(i,k-1,j) = a_v(i,k-1,j)+a_vflux(i,k)*vel*(0.58333333+0.25*sign(1.,-vel))
        a_v(i,k+1,j) = a_v(i,k+1,j)+a_vflux(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,-vel))
        a_v(i,k,j) = a_v(i,k,j)+a_vflux(i,k)*vel*(0.58333333+(-0.25)*sign(1.,-vel))
        a_vel = a_vel+a_vflux(i,k)*(0.58333333*(v(i,k,j)+v(i,k-1,j))-0.083333333*(v(i,k+1,j)+v(i,k-2,j))+0.083333333*(v(i,k+1,j)-&
&v(i,k-2,j)-3.*(v(i,k,j)-v(i,k-1,j)))*sign(1.,-vel))
        a_vflux(i,k) = 0.
        a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vel
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
else if (vert_order .eq. 2) then a_vert_order_test
  do j = j_start, j_end
    do k = kts, ktf
      do i = i_start, i_end
        a_vflux(i,k+1) = a_vflux(i,k+1)-a_tendency(i,k,j)*rdzw(k)
        a_vflux(i,k) = a_vflux(i,k)+a_tendency(i,k,j)*rdzw(k)
      end do
    end do
    do k = kts+1, ktf
      do i = i_start, i_end
        a_rom(i,k,j-1) = a_rom(i,k,j-1)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
        a_rom(i,k,j) = a_rom(i,k,j)+0.5*a_vflux(i,k)*(fzm(k)*v(i,k,j)+fzp(k)*v(i,k-1,j))
        a_v(i,k-1,j) = a_v(i,k-1,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzp(k)
        a_v(i,k,j) = a_v(i,k,j)+0.5*a_vflux(i,k)*(rom(i,k,j)+rom(i,k,j-1))*fzm(k)
        a_vflux(i,k) = 0.
      end do
    end do
  end do
endif a_vert_order_test
! recdepend vars : jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2438
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:2439
! recompute vars : j_end
j_end = min(jte,jde)
! recompute vars : j_end
! recdepend vars : config_flags,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:2444
! recompute vars : j_start
if (config_flags%open_ys) then
  j_start = max(jds+1,jts)
endif
! recompute vars : j_start
! recdepend vars : config_flags,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:2448
! recompute vars : j_end
if (config_flags%open_ye) then
  j_end = min(jte,jde-1)
endif
! recompute vars : j_end
if (config_flags%open_xe .and. ite .eq. ide) then
  do j = j_start, j_end
    a_dum = 0.
    a_dup = 0.
    a_ub = 0.
    a_uw = 0.
    mrdx = msfv(ite-1,j)*rdx
! recompute : mrdx
    jp = min(jmax,j)
! recompute : jp
    jm = max(jmin,j-1)
! recompute : jm
    do k = kts, ktf
      a_dum = 0.
      a_dup = 0.
      a_ub = 0.
      a_uw = 0.
      uw = 0.5*(ru(ite,k,jp)+ru(ite,k,jm))
! recompute : uw
      ub = max(uw,0.)
! recompute : ub
      dup = ru(ite,k,jp)-ru(ite-1,k,jp)
! recompute : dup
      dum = ru(ite,k,jm)-ru(ite-1,k,jm)
! recompute : dum
      a_dum = a_dum-0.5*a_tendency(ite-1,k,j)*mrdx*v(ite-1,k,j)
      a_dup = a_dup-0.5*a_tendency(ite-1,k,j)*mrdx*v(ite-1,k,j)
      a_ub = a_ub-a_tendency(ite-1,k,j)*mrdx*(v_old(ite-1,k,j)-v_old(ite-2,k,j))
      a_v(ite-1,k,j) = a_v(ite-1,k,j)-0.5*a_tendency(ite-1,k,j)*mrdx*(dup+dum)
      a_v_old(ite-2,k,j) = a_v_old(ite-2,k,j)+a_tendency(ite-1,k,j)*mrdx*ub
      a_v_old(ite-1,k,j) = a_v_old(ite-1,k,j)-a_tendency(ite-1,k,j)*mrdx*ub
      a_ru(ite-1,k,jm) = a_ru(ite-1,k,jm)-a_dum
      a_ru(ite,k,jm) = a_ru(ite,k,jm)+a_dum
      a_dum = 0.
      a_ru(ite-1,k,jp) = a_ru(ite-1,k,jp)-a_dup
      a_ru(ite,k,jp) = a_ru(ite,k,jp)+a_dup
      a_dup = 0.
      a_uw = a_uw+a_ub*(0.5+sign(0.5,uw-0.))
      a_ub = 0.
      a_ru(ite,k,jm) = a_ru(ite,k,jm)+0.5*a_uw
      a_ru(ite,k,jp) = a_ru(ite,k,jp)+0.5*a_uw
      a_uw = 0.
    end do
  end do
endif
! recdepend vars : jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2438
! recompute vars : j_start
j_start = jts
! recompute vars : j_start
! recdepend vars : j_start,jde,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:2439
! recompute vars : j_end
j_end = min(jte,jde)
! recompute vars : j_end
! recdepend vars : config_flags,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:2444
! recompute vars : j_start
if (config_flags%open_ys) then
  j_start = max(jds+1,jts)
endif
! recompute vars : j_start
! recdepend vars : config_flags,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:2448
! recompute vars : j_end
if (config_flags%open_ye) then
  j_end = min(jte,jde-1)
endif
! recompute vars : j_end
if (config_flags%open_xs .and. its .eq. ids) then
  do j = j_start, j_end
    a_dum = 0.
    a_dup = 0.
    a_ub = 0.
    a_uw = 0.
    mrdx = msfv(its,j)*rdx
! recompute : mrdx
    jp = min(jmax,j)
! recompute : jp
    jm = max(jmin,j-1)
! recompute : jm
    do k = kts, ktf
      a_dum = 0.
      a_dup = 0.
      a_ub = 0.
      a_uw = 0.
      uw = 0.5*(ru(its,k,jp)+ru(its,k,jm))
! recompute : uw
      ub = min(uw,0.)
! recompute : ub
      dup = ru(its+1,k,jp)-ru(its,k,jp)
! recompute : dup
      dum = ru(its+1,k,jm)-ru(its,k,jm)
! recompute : dum
      a_dum = a_dum-0.5*a_tendency(its,k,j)*mrdx*v(its,k,j)
      a_dup = a_dup-0.5*a_tendency(its,k,j)*mrdx*v(its,k,j)
      a_ub = a_ub-a_tendency(its,k,j)*mrdx*(v_old(its+1,k,j)-v_old(its,k,j))
      a_v(its,k,j) = a_v(its,k,j)-0.5*a_tendency(its,k,j)*mrdx*(dup+dum)
      a_v_old(its+1,k,j) = a_v_old(its+1,k,j)-a_tendency(its,k,j)*mrdx*ub
      a_v_old(its,k,j) = a_v_old(its,k,j)+a_tendency(its,k,j)*mrdx*ub
      a_ru(its+1,k,jm) = a_ru(its+1,k,jm)+a_dum
      a_ru(its,k,jm) = a_ru(its,k,jm)-a_dum
      a_dum = 0.
      a_ru(its+1,k,jp) = a_ru(its+1,k,jp)+a_dup
      a_ru(its,k,jp) = a_ru(its,k,jp)-a_dup
      a_dup = 0.
      a_uw = a_uw+a_ub*(0.5+sign(0.5,0.-uw))
      a_ub = 0.
      a_ru(its,k,jm) = a_ru(its,k,jm)+0.5*a_uw
      a_ru(its,k,jp) = a_ru(its,k,jp)+0.5*a_uw
      a_uw = 0.
    end do
  end do
endif
if (config_flags%open_ye .and. jte .eq. jde) then
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  do i = i_start, i_end
    a_vb = 0.
    do k = kts, ktf
      a_vb = 0.
      vb = max(rv(i,k,jte)+cb*mut(i,jte-1),0.)
! recompute : vb
      a_v_old(i,k,jte-1) = a_v_old(i,k,jte-1)+a_tendency(i,k,jte)*rdy*vb
      a_v_old(i,k,jte) = a_v_old(i,k,jte)-a_tendency(i,k,jte)*rdy*vb
      a_vb = a_vb-a_tendency(i,k,jte)*rdy*(v_old(i,k,jte)-v_old(i,k,jte-1))
      a_mut(i,jte-1) = a_mut(i,jte-1)+a_vb*(0.5+sign(0.5,rv(i,k,jte)+cb*mut(i,jte-1)-0.))*cb
      a_rv(i,k,jte) = a_rv(i,k,jte)+a_vb*(0.5+sign(0.5,rv(i,k,jte)+cb*mut(i,jte-1)-0.))
      a_vb = 0.
    end do
  end do
endif
if (config_flags%open_ys .and. jts .eq. jds) then
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  do i = i_start, i_end
    a_vb = 0.
    do k = kts, ktf
      a_vb = 0.
      vb = min(rv(i,k,jts)-cb*mut(i,jts),0.)
! recompute : vb
      a_v_old(i,k,jts+1) = a_v_old(i,k,jts+1)-a_tendency(i,k,jts)*rdy*vb
      a_v_old(i,k,jts) = a_v_old(i,k,jts)+a_tendency(i,k,jts)*rdy*vb
      a_vb = a_vb-a_tendency(i,k,jts)*rdy*(v_old(i,k,jts+1)-v_old(i,k,jts))
      a_mut(i,jts) = a_mut(i,jts)-a_vb*(0.5+sign(0.5,0.-(rv(i,k,jts)-cb*mut(i,jts))))*cb
      a_rv(i,k,jts) = a_rv(i,k,jts)+a_vb*(0.5+sign(0.5,0.-(rv(i,k,jts)-cb*mut(i,jts))))
      a_vb = 0.
    end do
  end do
endif
! recdepend vars : kde,kte
! recompute pos : ASSIGN_STMT module_advect_em.f90:1491
! recompute vars : ktf
ktf = min(kte,kde-1)
! recompute vars : ktf
a_horizontal_order_test: if (horz_order .eq. 6) then
  degrade_xs =  .true. 
! recompute : degrade_xs
  degrade_xe =  .true. 
! recompute : degrade_xe
  degrade_ys =  .true. 
! recompute : degrade_ys
  degrade_ye =  .true. 
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+2) then
    degrade_xs =  .false. 
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-3) then
    degrade_xe =  .false. 
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+2) then
    degrade_ys =  .false. 
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-2) then
    degrade_ye =  .false. 
  endif
! recompute : degrade_ye
! recompute : ktf
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  j_start_f = j_start
! recompute : j_start_f
  j_end_f = j_end+1
! recompute : j_end_f
  if (degrade_ys) then
    j_start_f = jds+3
  endif
! recompute : j_start_f
  if (degrade_ye) then
    j_end_f = jde-2
  endif
! recompute : j_end_f
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = max(ids+1,its)
    i_start_f = i_start+2
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = min(ide-2,ite)
    i_end_f = ide-3
  endif
! recompute : i_end,i_end_f
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      i = ide-2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i-1,k,j) = a_v(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
        a_v(i+1,k,j) = a_v(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqx(i,k)*vel
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j)))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
      if (i_end .eq. ide-2) then
        i = ide-1
! recompute : i
        do k = kts, ktf
          a_ru(i_end+1,k,j-1) = a_ru(i_end+1,k,j-1)+0.25*a_fqx(i,k)*(v(i_end+1,k,j)+v(i_end,k,j))
          a_ru(i_end+1,k,j) = a_ru(i_end+1,k,j)+0.25*a_fqx(i,k)*(v(i_end+1,k,j)+v(i_end,k,j))
          a_v(i_end+1,k,j) = a_v(i_end+1,k,j)+0.25*a_fqx(i,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
          a_v(i_end,k,j) = a_v(i_end,k,j)+0.25*a_fqx(i,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    if (degrade_xs) then
      i = ids+2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i-1,k,j) = a_v(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
        a_v(i+1,k,j) = a_v(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqx(i,k)*vel
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j)))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
      if (i_start .eq. ids+1) then
        i = ids+1
! recompute : i
        do k = kts, ktf
          a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.25*a_fqx(i,k)*(v(i,k,j)+v(i-1,k,j))
          a_ru(i,k,j) = a_ru(i,k,j)+0.25*a_fqx(i,k)*(v(i,k,j)+v(i-1,k,j))
          a_v(i-1,k,j) = a_v(i-1,k,j)+0.25*a_fqx(i,k)*(ru(i,k,j)+ru(i,k,j-1))
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqx(i,k)*(ru(i,k,j)+ru(i,k,j-1))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    do k = kts, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-3,k,j) = a_v(i-3,k,j)+0.016666667*a_fqx(i,k)*vel
        a_v(i-2,k,j) = a_v(i-2,k,j)-0.13333333*a_fqx(i,k)*vel
        a_v(i-1,k,j) = a_v(i-1,k,j)+0.61666667*a_fqx(i,k)*vel
        a_v(i+2,k,j) = a_v(i+2,k,j)+0.016666667*a_fqx(i,k)*vel
        a_v(i+1,k,j) = a_v(i+1,k,j)-0.13333333*a_fqx(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.61666667*a_fqx(i,k)*vel
        a_vel = a_vel+a_fqx(i,k)*(0.61666667*(v(i,k,j)+v(i-1,k,j))-0.13333333*(v(i+1,k,j)+v(i-2,k,j))+0.016666667*(v(i+2,k,j)+v(i-&
&3,k,j)))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:1530
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:1531
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:1532
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:1533
! recompute vars : j_end
  j_end = jte
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:1541
! recompute vars : j_start
  if (degrade_ys) then
    j_start = max(jts,jds+1)
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:1546
! recompute vars : j_end
  if (degrade_ye) then
    j_end = min(jte,jde-1)
  endif
! recompute vars : j_end
  a_j_loop_y_flux_6: do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:1553
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
! recdepend vars : jp1
! recompute pos : ASSIGN_STMT module_advect_em.f90:1554
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
    j_loop_y_flux_9c: do j4 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do j_loop_y_flux_9c
!     if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          mrdy = msfv(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .ge. j_start_f .and. j .le. j_end_f) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-3) = a_v(i,k,j-3)+0.016666667*a_fqy(i,k,jp1)*vel
          a_v(i,k,j-2) = a_v(i,k,j-2)-0.13333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.61666667*a_fqy(i,k,jp1)*vel
          a_v(i,k,j+2) = a_v(i,k,j+2)+0.016666667*a_fqy(i,k,jp1)*vel
          a_v(i,k,j+1) = a_v(i,k,j+1)-0.13333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j) = a_v(i,k,j)+0.61666667*a_fqy(i,k,jp1)*vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.61666667*(v(i,k,j)+v(i,k,j-1))-0.13333333*(v(i,k,j+1)+v(i,k,j-2))+0.016666667*(v(i,k,j+2)&
&+v(i,k,j-3)))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    else if (j .eq. jds+1) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j-1)
! recompute : vb
          if (specified .and. v(i,k,j) .lt. 0.) then
            vb = v(i,k,j)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j) .lt. 0.) then
            a_v(i,k,j) = a_v(i,k,j)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. jds+2) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j+1) = a_v(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2)))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    else if (j .eq. jde) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j)
! recompute : vb
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            vb = v(i,k,j-1)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. jde-1) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j+1) = a_v(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2)))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    endif
  end do a_j_loop_y_flux_6
else if (horz_order .eq. 5) then a_horizontal_order_test
  degrade_xs =  .true. 
! recompute : degrade_xs
  degrade_xe =  .true. 
! recompute : degrade_xe
  degrade_ys =  .true. 
! recompute : degrade_ys
  degrade_ye =  .true. 
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+2) then
    degrade_xs =  .false. 
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-3) then
    degrade_xe =  .false. 
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+2) then
    degrade_ys =  .false. 
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-2) then
    degrade_ye =  .false. 
  endif
! recompute : degrade_ye
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  j_start_f = j_start
! recompute : j_start_f
  j_end_f = j_end+1
! recompute : j_end_f
  if (degrade_ys) then
    j_start_f = jds+3
  endif
! recompute : j_start_f
  if (degrade_ye) then
    j_end_f = jde-2
  endif
! recompute : j_end_f
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = max(ids+1,its)
    i_start_f = i_start+2
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = min(ide-2,ite)
    i_end_f = ide-3
  endif
! recompute : i_end,i_end_f
  do j = j_end, j_start, -1
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      i = ide-2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)+a_fqx(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
        a_v(i-1,k,j) = a_v(i-1,k,j)+a_fqx(i,k)*vel*(0.58333333+0.25*sign(1.,vel))
        a_v(i+1,k,j) = a_v(i+1,k,j)+a_fqx(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
        a_v(i,k,j) = a_v(i,k,j)+a_fqx(i,k)*vel*(0.58333333+(-0.25)*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j))+0.083333333*(v(i+1,k,j)-v(i-&
&2,k,j)-3.*(v(i,k,j)-v(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
      if (i_end .eq. ide-2) then
        i = ide-1
! recompute : i
        do k = kts, ktf
          a_ru(i_end+1,k,j-1) = a_ru(i_end+1,k,j-1)+0.25*a_fqx(i,k)*(v(i_end+1,k,j)+v(i_end,k,j))
          a_ru(i_end+1,k,j) = a_ru(i_end+1,k,j)+0.25*a_fqx(i,k)*(v(i_end+1,k,j)+v(i_end,k,j))
          a_v(i_end+1,k,j) = a_v(i_end+1,k,j)+0.25*a_fqx(i,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
          a_v(i_end,k,j) = a_v(i_end,k,j)+0.25*a_fqx(i,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    if (degrade_xs) then
      i = ids+2
! recompute : i
      do k = kts, ktf
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)+a_fqx(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
        a_v(i-1,k,j) = a_v(i-1,k,j)+a_fqx(i,k)*vel*(0.58333333+0.25*sign(1.,vel))
        a_v(i+1,k,j) = a_v(i+1,k,j)+a_fqx(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
        a_v(i,k,j) = a_v(i,k,j)+a_fqx(i,k)*vel*(0.58333333+(-0.25)*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j))+0.083333333*(v(i+1,k,j)-v(i-&
&2,k,j)-3.*(v(i,k,j)-v(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
      if (i_start .eq. ids+1) then
        i = ids+1
! recompute : i
        do k = kts, ktf
          a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.25*a_fqx(i,k)*(v(i,k,j)+v(i-1,k,j))
          a_ru(i,k,j) = a_ru(i,k,j)+0.25*a_fqx(i,k)*(v(i,k,j)+v(i-1,k,j))
          a_v(i-1,k,j) = a_v(i-1,k,j)+0.25*a_fqx(i,k)*(ru(i,k,j)+ru(i,k,j-1))
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqx(i,k)*(ru(i,k,j)+ru(i,k,j-1))
          a_fqx(i,k) = 0.
        end do
      endif
    endif
    do k = kts, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-3,k,j) = a_v(i-3,k,j)+a_fqx(i,k)*vel*(0.016666667-(-0.016666667)*sign(1.,vel))
        a_v(i-2,k,j) = a_v(i-2,k,j)+a_fqx(i,k)*vel*((-0.13333333)-0.083333333*sign(1.,vel))
        a_v(i-1,k,j) = a_v(i-1,k,j)+a_fqx(i,k)*vel*(0.61666667-(-0.16666667)*sign(1.,vel))
        a_v(i+2,k,j) = a_v(i+2,k,j)+a_fqx(i,k)*vel*(0.016666667-0.016666667*sign(1.,vel))
        a_v(i+1,k,j) = a_v(i+1,k,j)+a_fqx(i,k)*vel*((-0.13333333)-(-0.083333333)*sign(1.,vel))
        a_v(i,k,j) = a_v(i,k,j)+a_fqx(i,k)*vel*(0.61666667-0.16666667*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.61666667*(v(i,k,j)+v(i-1,k,j))-0.13333333*(v(i+1,k,j)+v(i-2,k,j))+0.016666667*(v(i+2,k,j)+v(i-&
&3,k,j))-0.016666667*(v(i+2,k,j)-v(i-3,k,j)-5.*(v(i+1,k,j)-v(i-2,k,j))+10.*(v(i,k,j)-v(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:1765
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:1766
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:1767
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:1768
! recompute vars : j_end
  j_end = jte
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds,jts
! recompute pos : IF_STMT module_advect_em.f90:1776
! recompute vars : j_start
  if (degrade_ys) then
    j_start = max(jts,jds+1)
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde,jte
! recompute pos : IF_STMT module_advect_em.f90:1781
! recompute vars : j_end
  if (degrade_ye) then
    j_end = min(jte,jde-1)
  endif
! recompute vars : j_end
  a_j_loop_y_flux_5: do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:1788
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
! recdepend vars : jp1
! recompute pos : ASSIGN_STMT module_advect_em.f90:1789
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
    j_loop_y_flux_9a: do j1 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do j_loop_y_flux_9a
!    if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          mrdy = msfv(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .ge. j_start_f .and. j .le. j_end_f) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-3) = a_v(i,k,j-3)+a_fqy(i,k,jp1)*vel*(0.016666667-(-0.016666667)*sign(1.,vel))
          a_v(i,k,j-2) = a_v(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.13333333)-0.083333333*sign(1.,vel))
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.61666667-(-0.16666667)*sign(1.,vel))
          a_v(i,k,j+2) = a_v(i,k,j+2)+a_fqy(i,k,jp1)*vel*(0.016666667-0.016666667*sign(1.,vel))
          a_v(i,k,j+1) = a_v(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.13333333)-(-0.083333333)*sign(1.,vel))
          a_v(i,k,j) = a_v(i,k,j)+a_fqy(i,k,jp1)*vel*(0.61666667-0.16666667*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.61666667*(v(i,k,j)+v(i,k,j-1))-0.13333333*(v(i,k,j+1)+v(i,k,j-2))+0.016666667*(v(i,k,j+2)&
&+v(i,k,j-3))-0.016666667*(v(i,k,j+2)-v(i,k,j-3)-5.*(v(i,k,j+1)-v(i,k,j-2))+10.*(v(i,k,j)-v(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    else if (j .eq. jds+1) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j-1)
! recompute : vb
          if (specified .and. v(i,k,j) .lt. 0.) then
            vb = v(i,k,j)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j) .lt. 0.) then
            a_v(i,k,j) = a_v(i,k,j)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. jds+2) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.58333333+0.25*sign(1.,vel))
          a_v(i,k,j+1) = a_v(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
          a_v(i,k,j) = a_v(i,k,j)+a_fqy(i,k,jp1)*vel*(0.58333333+(-0.25)*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2))+0.083333333*(v(i,k,j+&
&1)-v(i,k,j-2)-3.*(v(i,k,j)-v(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    else if (j .eq. jde) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j)
! recompute : vb
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            vb = v(i,k,j-1)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. jde-1) then
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.58333333+0.25*sign(1.,vel))
          a_v(i,k,j+1) = a_v(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
          a_v(i,k,j) = a_v(i,k,j)+a_fqy(i,k,jp1)*vel*(0.58333333+(-0.25)*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2))+0.083333333*(v(i,k,j+&
&1)-v(i,k,j-2)-3.*(v(i,k,j)-v(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    endif
  end do a_j_loop_y_flux_5
else if (horz_order .eq. 4) then a_horizontal_order_test
  degrade_xs =  .true. 
! recompute : degrade_xs
  degrade_xe =  .true. 
! recompute : degrade_xe
  degrade_ys =  .true. 
! recompute : degrade_ys
  degrade_ye =  .true. 
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+1) then
    degrade_xs =  .false. 
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-2) then
    degrade_xe =  .false. 
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+1) then
    degrade_ys =  .false. 
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-1) then
    degrade_ye =  .false. 
  endif
! recompute : degrade_ye
! recompute : ktf
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = ids+1
    i_start_f = i_start+1
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = ide-2
    i_end_f = ide-2
  endif
! recompute : i_end,i_end_f
  do j = j_start, j_end
    a_vel = 0.
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      do k = kts, ktf
        a_ru(i_end+1,k,j-1) = a_ru(i_end+1,k,j-1)+0.25*a_fqx(i_end+1,k)*(v(i_end+1,k,j)+v(i_end,k,j))
        a_ru(i_end+1,k,j) = a_ru(i_end+1,k,j)+0.25*a_fqx(i_end+1,k)*(v(i_end+1,k,j)+v(i_end,k,j))
        a_v(i_end+1,k,j) = a_v(i_end+1,k,j)+0.25*a_fqx(i_end+1,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
        a_v(i_end,k,j) = a_v(i_end,k,j)+0.25*a_fqx(i_end+1,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
        a_fqx(i_end+1,k) = 0.
      end do
    endif
    if (degrade_xs) then
      do k = kts, ktf
        a_ru(i_start,k,j-1) = a_ru(i_start,k,j-1)+0.25*a_fqx(i_start,k)*(v(i_start,k,j)+v(i_start-1,k,j))
        a_ru(i_start,k,j) = a_ru(i_start,k,j)+0.25*a_fqx(i_start,k)*(v(i_start,k,j)+v(i_start-1,k,j))
        a_v(i_start-1,k,j) = a_v(i_start-1,k,j)+0.25*a_fqx(i_start,k)*(ru(i_start,k,j)+ru(i_start,k,j-1))
        a_v(i_start,k,j) = a_v(i_start,k,j)+0.25*a_fqx(i_start,k)*(ru(i_start,k,j)+ru(i_start,k,j-1))
        a_fqx(i_start,k) = 0.
      end do
    endif
    do k = kts, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i-1,k,j) = a_v(i-1,k,j)+0.58333333*a_fqx(i,k)*vel
        a_v(i+1,k,j) = a_v(i+1,k,j)-0.083333333*a_fqx(i,k)*vel
        a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqx(i,k)*vel
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j)))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:1998
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:1999
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2000
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:2001
! recompute vars : j_end
  j_end = jte
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds
! recompute pos : IF_STMT module_advect_em.f90:2010
! recompute vars : j_start
  if (degrade_ys) then
    j_start = jds+1
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde
! recompute pos : IF_STMT module_advect_em.f90:2015
! recompute vars : j_end
  if (degrade_ye) then
    j_end = jde-1
  endif
! recompute vars : j_end
  do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:2023
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
! recdepend vars : jp0
! recompute pos : ASSIGN_STMT module_advect_em.f90:2024
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
    do j2 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do
!    if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          mrdy = msfv(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .eq. j_start .and. degrade_ys) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j-1)
! recompute : vb
          if (specified .and. v(i,k,j) .lt. 0.) then
            vb = v(i,k,j)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j) .lt. 0.) then
            a_v(i,k,j) = a_v(i,k,j)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. j_end+1 .and. degrade_ye) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j)
! recompute : vb
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            vb = v(i,k,j-1)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        end do
      end do
    else
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.58333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j+1) = a_v(i,k,j+1)-0.083333333*a_fqy(i,k,jp1)*vel
          a_v(i,k,j) = a_v(i,k,j)+0.58333333*a_fqy(i,k,jp1)*vel
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2)))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    endif
  end do
else if (horz_order .eq. 3) then a_horizontal_order_test
  degrade_xs =  .true. 
! recompute : degrade_xs
  degrade_xe =  .true. 
! recompute : degrade_xe
  degrade_ys =  .true. 
! recompute : degrade_ys
  degrade_ye =  .true. 
! recompute : degrade_ye
  if (config_flags%periodic_x .or. config_flags%symmetric_xs .or. its .gt. ids+1) then
    degrade_xs =  .false. 
  endif
! recompute : degrade_xs
  if (config_flags%periodic_x .or. config_flags%symmetric_xe .or. ite .lt. ide-2) then
    degrade_xe =  .false. 
  endif
! recompute : degrade_xe
  if (config_flags%periodic_y .or. config_flags%symmetric_ys .or. jts .gt. jds+1) then
    degrade_ys =  .false. 
  endif
! recompute : degrade_ys
  if (config_flags%periodic_y .or. config_flags%symmetric_ye .or. jte .lt. jde-1) then
    degrade_ye =  .false. 
  endif
! recompute : degrade_ye
! recompute : ktf
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_ys .or. specified) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye .or. specified) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  i_start_f = i_start
! recompute : i_start_f
  i_end_f = i_end+1
! recompute : i_end_f
  if (degrade_xs) then
    i_start = ids+1
    i_start_f = i_start+1
  endif
! recompute : i_start,i_start_f
  if (degrade_xe) then
    i_end = ide-2
    i_end_f = ide-2
  endif
! recompute : i_end,i_end_f
  do j = j_start, j_end
    a_vel = 0.
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        a_fqx(i+1,k) = a_fqx(i+1,k)-a_tendency(i,k,j)*mrdx
        a_fqx(i,k) = a_fqx(i,k)+a_tendency(i,k,j)*mrdx
      end do
    end do
    if (degrade_xe) then
      do k = kts, ktf
        a_ru(i_end+1,k,j-1) = a_ru(i_end+1,k,j-1)+0.25*a_fqx(i_end+1,k)*(v(i_end+1,k,j)+v(i_end,k,j))
        a_ru(i_end+1,k,j) = a_ru(i_end+1,k,j)+0.25*a_fqx(i_end+1,k)*(v(i_end+1,k,j)+v(i_end,k,j))
        a_v(i_end+1,k,j) = a_v(i_end+1,k,j)+0.25*a_fqx(i_end+1,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
        a_v(i_end,k,j) = a_v(i_end,k,j)+0.25*a_fqx(i_end+1,k)*(ru(i_end+1,k,j)+ru(i_end+1,k,j-1))
        a_fqx(i_end+1,k) = 0.
      end do
    endif
    if (degrade_xs) then
      do k = kts, ktf
        a_ru(i_start,k,j-1) = a_ru(i_start,k,j-1)+0.25*a_fqx(i_start,k)*(v(i_start,k,j)+v(i_start-1,k,j))
        a_ru(i_start,k,j) = a_ru(i_start,k,j)+0.25*a_fqx(i_start,k)*(v(i_start,k,j)+v(i_start-1,k,j))
        a_v(i_start-1,k,j) = a_v(i_start-1,k,j)+0.25*a_fqx(i_start,k)*(ru(i_start,k,j)+ru(i_start,k,j-1))
        a_v(i_start,k,j) = a_v(i_start,k,j)+0.25*a_fqx(i_start,k)*(ru(i_start,k,j)+ru(i_start,k,j-1))
        a_fqx(i_start,k) = 0.
      end do
    endif
    do k = kts, ktf
      a_vel = 0.
      do i = i_start_f, i_end_f
        a_vel = 0.
        vel = 0.5*(ru(i,k,j)+ru(i,k,j-1))
! recompute : vel
        a_v(i-2,k,j) = a_v(i-2,k,j)+a_fqx(i,k)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
        a_v(i-1,k,j) = a_v(i-1,k,j)+a_fqx(i,k)*vel*(0.58333333+0.25*sign(1.,vel))
        a_v(i+1,k,j) = a_v(i+1,k,j)+a_fqx(i,k)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
        a_v(i,k,j) = a_v(i,k,j)+a_fqx(i,k)*vel*(0.58333333+(-0.25)*sign(1.,vel))
        a_vel = a_vel+a_fqx(i,k)*(0.58333333*(v(i,k,j)+v(i-1,k,j))-0.083333333*(v(i+1,k,j)+v(i-2,k,j))+0.083333333*(v(i+1,k,j)-v(i-&
&2,k,j)-3.*(v(i,k,j)-v(i-1,k,j)))*sign(1.,vel))
        a_fqx(i,k) = 0.
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.5*a_vel
        a_ru(i,k,j) = a_ru(i,k,j)+0.5*a_vel
        a_vel = 0.
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:2173
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:2174
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
! recdepend vars : i_end,i_start,jts
! recompute pos : ASSIGN_STMT module_advect_em.f90:2175
! recompute vars : j_start
  j_start = jts
! recompute vars : j_start
! recdepend vars : i_end,i_start,j_start,jte
! recompute pos : ASSIGN_STMT module_advect_em.f90:2176
! recompute vars : j_end
  j_end = jte
! recompute vars : j_end
! recdepend vars : degrade_ys,i_end,i_start,j_end,j_start,jds
! recompute pos : IF_STMT module_advect_em.f90:2185
! recompute vars : j_start
  if (degrade_ys) then
    j_start = jds+1
  endif
! recompute vars : j_start
! recdepend vars : degrade_ye,i_end,i_start,j_end,j_start,jde
! recompute pos : IF_STMT module_advect_em.f90:2190
! recompute vars : j_end
  if (degrade_ye) then
    j_end = jde-1
  endif
! recompute vars : j_end
  do j = j_end+1, j_start, -1
! recompute pos : ASSIGN_STMT module_advect_em.f90:2198
! recompute vars : jp0
    jp0 = 1
! recompute vars : jp0
! recdepend vars : jp0
! recompute pos : ASSIGN_STMT module_advect_em.f90:2199
! recompute vars : jp1
    jp1 = 2
! recompute vars : jp1
    do j3 = j_start, j-1
      jtmp = jp1
      jp1 = jp0
      jp0 = jtmp
    end do
!    if (j .gt. j_start) then
    if (j .gt. jds+1) then
      do k = kts, ktf
        do i = i_start, i_end
          mrdy = msfv(i,j-1)*rdy
! recompute : mrdy
          a_fqy(i,k,jp0) = a_fqy(i,k,jp0)+a_tendency(i,k,j-1)*mrdy
          a_fqy(i,k,jp1) = a_fqy(i,k,jp1)-a_tendency(i,k,j-1)*mrdy
        end do
      end do
    endif
    if (j .eq. j_start .and. degrade_ys) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j-1)
! recompute : vb
          if (specified .and. v(i,k,j) .lt. 0.) then
            vb = v(i,k,j)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(v(i,k,j)+vb)
          a_v(i,k,j) = a_v(i,k,j)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j) .lt. 0.) then
            a_v(i,k,j) = a_v(i,k,j)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
          a_vb = 0.
        end do
      end do
    else if (j .eq. j_end+1 .and. degrade_ye) then
      do k = kts, ktf
        a_vb = 0.
        do i = i_start, i_end
          a_vb = 0.
          vb = v(i,k,j)
! recompute : vb
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            vb = v(i,k,j-1)
          endif
! recompute : vb
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_rv(i,k,j) = a_rv(i,k,j)+0.25*a_fqy(i,k,jp1)*(vb+v(i,k,j-1))
          a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_vb = a_vb+0.25*a_fqy(i,k,jp1)*(rv(i,k,j)+rv(i,k,j-1))
          a_fqy(i,k,jp1) = 0.
          if (specified .and. v(i,k,j-1) .gt. 0.) then
            a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
            a_vb = 0.
          endif
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        end do
      end do
    else
      do k = kts, ktf
        a_vel = 0.
        do i = i_start, i_end
          a_vel = 0.
          vel = 0.5*(rv(i,k,j)+rv(i,k,j-1))
! recompute : vel
          a_v(i,k,j-2) = a_v(i,k,j-2)+a_fqy(i,k,jp1)*vel*((-0.083333333)+(-0.083333333)*sign(1.,vel))
          a_v(i,k,j-1) = a_v(i,k,j-1)+a_fqy(i,k,jp1)*vel*(0.58333333+0.25*sign(1.,vel))
          a_v(i,k,j+1) = a_v(i,k,j+1)+a_fqy(i,k,jp1)*vel*((-0.083333333)+0.083333333*sign(1.,vel))
          a_v(i,k,j) = a_v(i,k,j)+a_fqy(i,k,jp1)*vel*(0.58333333+(-0.25)*sign(1.,vel))
          a_vel = a_vel+a_fqy(i,k,jp1)*(0.58333333*(v(i,k,j)+v(i,k,j-1))-0.083333333*(v(i,k,j+1)+v(i,k,j-2))+0.083333333*(v(i,k,j+&
&1)-v(i,k,j-2)-3.*(v(i,k,j)-v(i,k,j-1)))*sign(1.,vel))
          a_fqy(i,k,jp1) = 0.
          a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.5*a_vel
          a_rv(i,k,j) = a_rv(i,k,j)+0.5*a_vel
          a_vel = 0.
        end do
      end do
    endif
  end do
else if (horz_order .eq. 2) then a_horizontal_order_test
  i_start = its
! recompute : i_start
  i_end = min(ite,ide-1)
! recompute : i_end
  j_start = jts
! recompute : j_start
  j_end = jte
! recompute : j_end
  if (config_flags%open_ys) then
    j_start = max(jds+1,jts)
  endif
! recompute : j_start
  if (config_flags%open_ye) then
    j_end = min(jde-1,jte)
  endif
! recompute : j_end
  if (specified) then
    j_start = max(jds+2,jts)
  endif
! recompute : j_start
  if (specified) then
    j_end = min(jde-2,jte)
  endif
! recompute : j_end
  if (config_flags%open_xs .or. specified) then
    i_start = max(ids+1,its)
  endif
! recompute : i_start
  if (config_flags%open_xe .or. specified) then
    i_end = min(ide-2,ite)
  endif
! recompute : i_end
  do j = j_start, j_end
    do k = kts, ktf
      do i = i_start, i_end
        mrdx = msfv(i,j)*rdx
! recompute : mrdx
        a_ru(i+1,k,j-1) = a_ru(i+1,k,j-1)-0.25*a_tendency(i,k,j)*mrdx*(v(i+1,k,j)+v(i,k,j))
        a_ru(i,k,j-1) = a_ru(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdx*(v(i,k,j)+v(i-1,k,j))
        a_ru(i+1,k,j) = a_ru(i+1,k,j)-0.25*a_tendency(i,k,j)*mrdx*(v(i+1,k,j)+v(i,k,j))
        a_ru(i,k,j) = a_ru(i,k,j)+0.25*a_tendency(i,k,j)*mrdx*(v(i,k,j)+v(i-1,k,j))
        a_v(i-1,k,j) = a_v(i-1,k,j)+0.25*a_tendency(i,k,j)*mrdx*(ru(i,k,j)+ru(i,k,j-1))
        a_v(i+1,k,j) = a_v(i+1,k,j)-0.25*a_tendency(i,k,j)*mrdx*(ru(i+1,k,j)+ru(i+1,k,j-1))
        a_v(i,k,j) = a_v(i,k,j)-0.25*a_tendency(i,k,j)*mrdx*(ru(i+1,k,j)+ru(i+1,k,j-1)-(ru(i,k,j)+ru(i,k,j-1)))
      end do
    end do
  end do
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:2319
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:2320
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
  if (specified .and. jte .ge. jde-1) then
    j = jde-1
! recompute : j
    do k = kts, ktf
      a_vb = 0.
      do i = i_start, i_end
        a_vb = 0.
        mrdy = msfv(i,j)*rdy
! recompute : mrdy
        vb = v(i,k,j+1)
! recompute : vb
        if (v(i,k,j) .gt. 0.) then
          vb = v(i,k,j)
        endif
! recompute : vb
        a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j)+v(i,k,j-1))
        a_rv(i,k,j+1) = a_rv(i,k,j+1)-0.25*a_tendency(i,k,j)*mrdy*(vb+v(i,k,j))
        a_rv(i,k,j) = a_rv(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(vb+v(i,k,j)-(v(i,k,j)+v(i,k,j-1)))
        a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j)+rv(i,k,j-1))
        a_v(i,k,j) = a_v(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j)-(rv(i,k,j)+rv(i,k,j-1)))
        a_vb = a_vb-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j))
        if (v(i,k,j) .gt. 0.) then
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        endif
        a_v(i,k,j+1) = a_v(i,k,j+1)+a_vb
        a_vb = 0.
      end do
    end do
  endif
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:2319
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:2320
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
  if (specified .and. jts .le. jds+1) then
    j = jds+1
! recompute : j
    do k = kts, ktf
      a_vb = 0.
      do i = i_start, i_end
        a_vb = 0.
        mrdy = msfv(i,j)*rdy
! recompute : mrdy
        vb = v(i,k,j-1)
! recompute : vb
        if (v(i,k,j) .lt. 0.) then
          vb = v(i,k,j)
        endif
! recompute : vb
        a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j)+vb)
        a_rv(i,k,j+1) = a_rv(i,k,j+1)-0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j+1)+v(i,k,j))
        a_rv(i,k,j) = a_rv(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j+1)+v(i,k,j)-(v(i,k,j)+vb))
        a_v(i,k,j+1) = a_v(i,k,j+1)-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j))
        a_v(i,k,j) = a_v(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j)-(rv(i,k,j)+rv(i,k,j-1)))
        a_vb = a_vb+0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j)+rv(i,k,j-1))
        if (v(i,k,j) .lt. 0.) then
          a_v(i,k,j) = a_v(i,k,j)+a_vb
          a_vb = 0.
        endif
        a_v(i,k,j-1) = a_v(i,k,j-1)+a_vb
        a_vb = 0.
      end do
    end do
  endif
! recdepend vars : its
! recompute pos : ASSIGN_STMT module_advect_em.f90:2319
! recompute vars : i_start
  i_start = its
! recompute vars : i_start
! recdepend vars : i_start,ide,ite
! recompute pos : ASSIGN_STMT module_advect_em.f90:2320
! recompute vars : i_end
  i_end = min(ite,ide-1)
! recompute vars : i_end
  do j = j_start, j_end
    do k = kts, ktf
      do i = i_start, i_end
        mrdy = msfv(i,j)*rdy
! recompute : mrdy
        a_rv(i,k,j-1) = a_rv(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j)+v(i,k,j-1))
        a_rv(i,k,j+1) = a_rv(i,k,j+1)-0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j+1)+v(i,k,j))
        a_rv(i,k,j) = a_rv(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(v(i,k,j+1)+v(i,k,j)-(v(i,k,j)+v(i,k,j-1)))
        a_v(i,k,j-1) = a_v(i,k,j-1)+0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j)+rv(i,k,j-1))
        a_v(i,k,j+1) = a_v(i,k,j+1)-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j))
        a_v(i,k,j) = a_v(i,k,j)-0.25*a_tendency(i,k,j)*mrdy*(rv(i,k,j+1)+rv(i,k,j)-(rv(i,k,j)+rv(i,k,j-1)))
      end do
    end do
  end do
endif a_horizontal_order_test

end subroutine a_advect_v
