subroutine a_rk_step_prep( config_flags, u, a_u, v, a_v, w, a_w, a_ph, mu, a_mu, moist, a_moist, a_ru, a_rv, a_rw, a_ww, a_php, &
&a_alt, muu, a_muu, muv, a_muv, mub, mut, a_mut, a_al, a_cqu, a_cqv, a_cqw, msfu, msfv, msft, dnw, rdx, rdy, n_moist, ids, ide, &
&jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_al(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_alt(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqu(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_cqw(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: n_moist
real, intent(inout) :: a_moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_mut(ims:ime,jms:jme)
real, intent(inout) :: a_muu(ims:ime,jms:jme)
real, intent(inout) :: a_muv(ims:ime,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_php(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ru(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rv(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_rw(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ww(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: dnw(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: msfu(ims:ime,jms:jme)
real, intent(in) :: msfv(ims:ime,jms:jme)
real, intent(in) :: mu(ims:ime,jms:jme)
real, intent(in) :: mub(ims:ime,jms:jme)
real, intent(out) :: mut(ims:ime,jms:jme)
real, intent(out) :: muu(ims:ime,jms:jme)
real, intent(out) :: muv(ims:ime,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy
real, intent(in) :: u(ims:ime,kms:kme,jms:jme)
real, intent(in) :: v(ims:ime,kms:kme,jms:jme)
real, intent(in) :: w(ims:ime,kms:kme,jms:jme)

!==============================================
! declare local variables
!==============================================
integer kds

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
! TBH:  OVERWRITE mut
! TBH:  HORIZONTAL DEPENDENCE:  NONE
call calculate_full( mut,mub,mu,ids,ide,jds,jde,1,2,ims,ime,jms,jme,1,1,its,ite,jts,jte,1,1 )
! recompute : mut
! TBH:  OVERWRITE muu,muv
! TBH:  HORIZONTAL DEPENDENCE:  mu     ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  mub    ( [i-1,i    ], [j-1,j    ] )
call calc_mu_uv( config_flags,mu,mub,muu,muv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! recompute : muu,muv
! TBH:  OVERWRITE a_php, a_ph
! TBH:  HORIZONTAL DEPENDENCE:  NONE
call a_calc_php( a_php,a_ph,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_alt, a_al
! TBH:  HORIZONTAL DEPENDENCE:  NONE
call a_calc_alt( a_alt,a_al,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_moist, a_cqu, a_cqv, a_cqw
! TBH:  HORIZONTAL DEPENDENCE:  moist    ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_moist  ( [i-1,i    ], [j-1,j    ] )
call a_calc_cq( moist,a_moist,a_cqu,a_cqv,a_cqw,n_moist,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_u, a_v, a_mu, a_ww
! TBH:  HORIZONTAL DEPENDENCE:  mu       ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  mub      ( [i-1,i,i+1], [j-1,j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  u        ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_u      ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  v        ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_v      ( [    i    ], [    j,j+1] )
! TBH:  HORIZONTAL DEPENDENCE:  a_mu     ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_ww     ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msft     ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfu     ( [i-1,i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  msfv     ( [    i    ], [j-1,j,j+1] )
call a_calc_ww_cp( u,a_u,v,a_v,mu,a_mu,mub,a_ww,rdx,rdy,msft,msfu,msfv,dnw,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,&
&kte )
! TBH:  OVERWRITE a_muu,a_ru,a_u,a_muv,a_rv,a_v,a_mut,a_rw,a_w
! TBH:  HORIZONTAL DEPENDENCE:  NONE
call a_couple_momentum( muu,a_muu,a_ru,u,a_u,msfu,muv,a_muv,a_rv,v,a_v,msfv,mut,a_mut,a_rw,w,a_w,msft,ide,jde,kde,ims,ime,jms,jme,&
&kms,kme,its,ite,jts,jte,kts,kte )
! TBH:  OVERWRITE a_mu,a_muu,a_muv
! TBH:  HORIZONTAL DEPENDENCE:  a_mu     ( [i-1,i    ], [j-1,j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_muu    ( [    i,i+1], [    j    ] )
! TBH:  HORIZONTAL DEPENDENCE:  a_muv    ( [    i    ], [    j,j+1] )
call a_calc_mu_uv( config_flags,a_mu,a_muu,a_muv,ids,ide,jds,jde,ims,ime,jms,jme,its,ite,jts,jte )
! TBH:  OVERWRITE a_mut, a_mu
! TBH:  HORIZONTAL DEPENDENCE:  NONE
call a_calculate_full( a_mut,a_mu,ide,jde,2,ims,ime,jms,jme,1,1,its,ite,jts,jte,1,1 )

end subroutine a_rk_step_prep
