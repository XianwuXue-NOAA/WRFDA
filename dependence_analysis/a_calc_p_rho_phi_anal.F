subroutine a_calc_p_rho_phi( moist, a_moist, n_moist, al, a_al, alb, mu, a_mu, muts, a_muts, ph, a_ph, p, a_p, pb, t, a_t, p0, t0, &
&dnw, rdnw, rdn, non_hydrostatic, ide, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_al(ims:ime,kms:kme,jms:jme)
integer, intent(in) :: n_moist
real, intent(inout) :: a_moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(inout) :: a_mu(ims:ime,jms:jme)
real, intent(inout) :: a_muts(ims:ime,jms:jme)
real, intent(inout) :: a_p(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_t(ims:ime,kms:kme,jms:jme)
real, intent(out) :: al(ims:ime,kms:kme,jms:jme)
real, intent(in) :: alb(ims:ime,kms:kme,jms:jme)
real, intent(in) :: dnw(kms:kme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
real, intent(in) :: moist(ims:ime,kms:kme,jms:jme,n_moist)
real, intent(in) :: mu(ims:ime,jms:jme)
real, intent(in) :: muts(ims:ime,jms:jme)
logical, intent(in) :: non_hydrostatic
real, intent(out) :: p(ims:ime,kms:kme,jms:jme)
real, intent(in) :: p0
real, intent(in) :: pb(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: ph(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdn(kms:kme)
real, intent(in) :: rdnw(kms:kme)
real, intent(in) :: t(ims:ime,kms:kme,jms:jme)
real, intent(in) :: t0

!==============================================
! declare local variables
!==============================================
real a_qf1
real a_qf2
real a_qtot
real a_qvf
integer i
integer ispe
integer itf
integer j
integer jtf
integer k
integer k1
integer k2
integer ka1
integer ka2
integer ktf
real qf1
real qf2
real qtot
real qvf

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_qf1 = 0.
a_qf2 = 0.
a_qtot = 0.
a_qvf = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
itf = min(ite,ide-1)
! recompute : itf
jtf = min(jte,jde-1)
! recompute : jtf
ktf = min(kte,kde-1)
! recompute : ktf
if (non_hydrostatic) then
  if (n_moist .ge. param_first_scalar) then
    do j = jts, jtf
      do k = kts, ktf
        do i = its, itf
          a_qvf = 0.
          qvf = 1.+rvovrd*moist(i,k,j,p_qv)
! recompute : qvf
          al(i,k,j) = -(1./muts(i,j)*(alb(i,k,j)*mu(i,j)+rdnw(k)*(ph(i,k+1,j)-ph(i,k,j))))
! recompute : al
!xyh          if(j.eq.60) write(100+k,*)'i,a_al,a_p=', i,a_al(i,k,j),a_p(i,k,j)
          a_al(i,k,j) = a_al(i,k,j)-a_p(i,k,j)*r_d*(t0+t(i,k,j))*qvf*p0/(p0*(al(i,k,j)+alb(i,k,j))*p0*(al(i,k,j)+alb(i,k,j)))*&
&cpovcv*(r_d*(t0+t(i,k,j))*qvf/(p0*(al(i,k,j)+alb(i,k,j))))**(cpovcv-1)*p0
          a_qvf = a_qvf+a_p(i,k,j)*r_d*(t0+t(i,k,j))/(p0*(al(i,k,j)+alb(i,k,j)))*cpovcv*(r_d*(t0+t(i,k,j))*qvf/(p0*(al(i,k,j)+&
&alb(i,k,j))))**(cpovcv-1)*p0
          a_t(i,k,j) = a_t(i,k,j)+a_p(i,k,j)*r_d*qvf/(p0*(al(i,k,j)+alb(i,k,j)))*cpovcv*(r_d*(t0+t(i,k,j))*qvf/(p0*(al(i,k,j)+&
&alb(i,k,j))))**(cpovcv-1)*p0
          a_p(i,k,j) = 0.
          a_mu(i,j) = a_mu(i,j)-a_al(i,k,j)*1./muts(i,j)*alb(i,k,j)
          a_muts(i,j) = a_muts(i,j)+a_al(i,k,j)/(muts(i,j)*muts(i,j))*(alb(i,k,j)*mu(i,j)+rdnw(k)*(ph(i,k+1,j)-ph(i,k,j)))
          a_ph(i,k+1,j) = a_ph(i,k+1,j)-a_al(i,k,j)*1./muts(i,j)*rdnw(k)
          a_ph(i,k,j) = a_ph(i,k,j)+a_al(i,k,j)*1./muts(i,j)*rdnw(k)
          a_al(i,k,j) = 0.
          a_moist(i,k,j,p_qv) = a_moist(i,k,j,p_qv)+a_qvf*rvovrd
          a_qvf = 0.
        end do
      end do
    end do
  else
    do j = jts, jtf
      do k = kts, ktf
        do i = its, itf
          al(i,k,j) = -(1./muts(i,j)*(alb(i,k,j)*mu(i,j)+rdnw(k)*(ph(i,k+1,j)-ph(i,k,j))))
! recompute : al
          a_al(i,k,j) = a_al(i,k,j)-a_p(i,k,j)*p0*r_d*(t0+t(i,k,j))*p0/(p0*(al(i,k,j)+alb(i,k,j))*p0*(al(i,k,j)+alb(i,k,j)))*&
&cpovcv*(r_d*(t0+t(i,k,j))/(p0*(al(i,k,j)+alb(i,k,j))))**(cpovcv-1)
          a_t(i,k,j) = a_t(i,k,j)+a_p(i,k,j)*p0*r_d/(p0*(al(i,k,j)+alb(i,k,j)))*cpovcv*(r_d*(t0+t(i,k,j))/(p0*(al(i,k,j)+alb(i,k,j)&
&)))**(cpovcv-1)
          a_p(i,k,j) = 0.
          a_mu(i,j) = a_mu(i,j)-a_al(i,k,j)*1./muts(i,j)*alb(i,k,j)
          a_muts(i,j) = a_muts(i,j)+a_al(i,k,j)/(muts(i,j)*muts(i,j))*(alb(i,k,j)*mu(i,j)+rdnw(k)*(ph(i,k+1,j)-ph(i,k,j)))
          a_ph(i,k+1,j) = a_ph(i,k+1,j)-a_al(i,k,j)*1./muts(i,j)*rdnw(k)
          a_ph(i,k,j) = a_ph(i,k,j)+a_al(i,k,j)*1./muts(i,j)*rdnw(k)
          a_al(i,k,j) = 0.
        end do
      end do
    end do
  endif
else
  if (n_moist .ge. param_first_scalar) then
    do j = jts, jtf
      a_qf1 = 0.
      a_qf2 = 0.
      a_qtot = 0.
      a_qvf = 0.
      k = ktf
! recompute : k
      do i = its, itf
        qtot = 0.
        do ispe = param_first_scalar, n_moist
          qtot = qtot+moist(i,k,j,ispe)
        end do
        qf2 = 1./(1.+qtot)
        qf1 = qtot*qf2
        p(i,k,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/qf2)
        qvf = 1.+rvovrd*moist(i,k,j,p_qv)
        al(i,k,j) = r_d/p1000mb*(t(i,k,j)+t0)*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm-alb(i,k,j)
      end do
! recompute : p
      do k = ktf-1, kts, -1
        do i = its, itf
          qtot = 0.
          do ispe = param_first_scalar, n_moist
            qtot = qtot+0.5*(moist(i,k,j,ispe)+moist(i,k+1,j,ispe))
          end do
          qf2 = 1./(1.+qtot)
          qf1 = qtot*qf2
          p(i,k,j) = p(i,k+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k+1)
          qvf = 1.+rvovrd*moist(i,k,j,p_qv)
          al(i,k,j) = r_d/p1000mb*(t(i,k,j)+t0)*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm-alb(i,k,j)
        end do
      end do
! recompute : al
      do k = ktf+1, 2, -1
        do i = its, itf
          a_al(i,k-1,j) = a_al(i,k-1,j)-a_ph(i,k,j)*dnw(k-1)*muts(i,j)
          a_mu(i,j) = a_mu(i,j)-a_ph(i,k,j)*dnw(k-1)*alb(i,k-1,j)
          a_muts(i,j) = a_muts(i,j)-a_ph(i,k,j)*dnw(k-1)*al(i,k-1,j)
          a_ph(i,k-1,j) = a_ph(i,k-1,j)+a_ph(i,k,j)
          a_ph(i,k,j) = 0.
        end do
      end do
      do k = kts, ktf-1
!  recdepend vars : alb,cvpm,itf,its,j,k,moist,mu,muts,n_moist,p1000mb,p
! _qv,param_first_scalar,pb,r_d,rdnw,rvovrd,t,t0
! recompute pos : DOLOOP_STMT module_big_step_utilities_em.f90:1077
! recompute vars : p
        do i = its, itf
          qtot = 0.
          do ispe = param_first_scalar, n_moist
            qtot = qtot+moist(i,ka1,j,ispe)
          end do
          qf2 = 1./(1.+qtot)
          qf1 = qtot*qf2
          p(i,ka1,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(ka1)/qf2)
          qvf = 1.+rvovrd*moist(i,ka1,j,p_qv)
          al(i,ka1,j) = r_d/p1000mb*(t(i,ka1,j)+t0)*qvf*((p(i,ka1,j)+pb(i,ka1,j))/p1000mb)**cvpm-alb(i,ka1,j)
        end do
! recompute vars : p
        do k1 = ktf-1, k-(-1), -1
          do i = its, itf
            qtot = 0.
            do ispe = param_first_scalar, n_moist
              qtot = qtot+0.5*(moist(i,k1,j,ispe)+moist(i,k1+1,j,ispe))
            end do
            qf2 = 1./(1.+qtot)
            qf1 = qtot*qf2
            p(i,k1,j) = p(i,k1+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k1+1)
          end do
        end do
        do i = its, itf
          a_qf1 = 0.
          a_qf2 = 0.
          a_qtot = 0.
          a_qvf = 0.
          qtot = 0.
! recompute : qtot
          do ispe = param_first_scalar, n_moist
            qtot = qtot+0.5*(moist(i,k,j,ispe)+moist(i,k+1,j,ispe))
          end do
! recompute : qtot
          qf2 = 1./(1.+qtot)
! recompute : qf2
          qf1 = qtot*qf2
! recompute : qf1
          p(i,k,j) = p(i,k+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k+1)
! recompute : p
          qvf = 1.+rvovrd*moist(i,k,j,p_qv)
! recompute : qvf
          a_p(i,k,j) = a_p(i,k,j)+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*qvf/p1000mb*cvpm*((p(i,k,j)+pb(i,k,j))/p1000mb)**(cvpm-1)
          a_qvf = a_qvf+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
          a_t(i,k,j) = a_t(i,k,j)+a_al(i,k,j)*r_d/p1000mb*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
          a_al(i,k,j) = 0.
          a_moist(i,k,j,p_qv) = a_moist(i,k,j,p_qv)+a_qvf*rvovrd
          a_qvf = 0.
          a_mu(i,j) = a_mu(i,j)-a_p(i,k,j)*(1/qf2/rdn(k+1))
          a_muts(i,j) = a_muts(i,j)-a_p(i,k,j)*(qf1/qf2/rdn(k+1))
          a_p(i,k+1,j) = a_p(i,k+1,j)+a_p(i,k,j)
          a_qf1 = a_qf1-a_p(i,k,j)*(muts(i,j)/qf2/rdn(k+1))
          a_qf2 = a_qf2+a_p(i,k,j)*((mu(i,j)+qf1*muts(i,j))/(qf2*qf2)/rdn(k+1))
          a_p(i,k,j) = 0.
          a_qf2 = a_qf2+a_qf1*qtot
          a_qtot = a_qtot+a_qf1*qf2
          a_qf1 = 0.
          a_qtot = a_qtot-a_qf2/((1.+qtot)*(1.+qtot))
          a_qf2 = 0.
          do ispe = param_first_scalar, n_moist
            a_moist(i,k+1,j,ispe) = a_moist(i,k+1,j,ispe)+0.5*a_qtot
            a_moist(i,k,j,ispe) = a_moist(i,k,j,ispe)+0.5*a_qtot
          end do
          a_qtot = 0.
        end do
      end do
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1076
! recompute vars : k
      k = ktf
! recompute vars : k
      do i = its, itf
        a_qf1 = 0.
        a_qf2 = 0.
        a_qtot = 0.
        a_qvf = 0.
        qtot = 0.
! recompute : qtot
        do ispe = param_first_scalar, n_moist
          qtot = qtot+moist(i,k,j,ispe)
        end do
! recompute : qtot
        qf2 = 1./(1.+qtot)
! recompute : qf2
        qf1 = qtot*qf2
! recompute : qf1
        p(i,k,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/qf2)
! recompute : p
        qvf = 1.+rvovrd*moist(i,k,j,p_qv)
! recompute : qvf
        a_p(i,k,j) = a_p(i,k,j)+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*qvf/p1000mb*cvpm*((p(i,k,j)+pb(i,k,j))/p1000mb)**(cvpm-1)
        a_qvf = a_qvf+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
        a_t(i,k,j) = a_t(i,k,j)+a_al(i,k,j)*r_d/p1000mb*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
        a_al(i,k,j) = 0.
        a_moist(i,k,j,p_qv) = a_moist(i,k,j,p_qv)+a_qvf*rvovrd
        a_qvf = 0.
        a_mu(i,j) = a_mu(i,j)-a_p(i,k,j)*(0.5/rdnw(k)/qf2)
        a_muts(i,j) = a_muts(i,j)-a_p(i,k,j)*(0.5*qf1/rdnw(k)/qf2)
        a_qf1 = a_qf1-a_p(i,k,j)*(0.5*muts(i,j)/rdnw(k)/qf2)
        a_qf2 = a_qf2+a_p(i,k,j)*(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/(qf2*qf2))
        a_p(i,k,j) = 0.
        a_qf2 = a_qf2+a_qf1*qtot
        a_qtot = a_qtot+a_qf1*qf2
        a_qf1 = 0.
        a_qtot = a_qtot-a_qf2/((1.+qtot)*(1.+qtot))
        a_qf2 = 0.
        do ispe = param_first_scalar, n_moist
          a_moist(i,k,j,ispe) = a_moist(i,k,j,ispe)+a_qtot
        end do
        a_qtot = 0.
      end do
    end do
  else
    do j = jts, jtf
      a_qf1 = 0.
      a_qf2 = 0.
      a_qtot = 0.
      a_qvf = 0.
      k = ktf
! recompute : k
      do i = its, itf
        qtot = 0.
        qf2 = 1./(1.+qtot)
        qf1 = qtot*qf2
        p(i,k,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/qf2)
        qvf = 1.
        al(i,k,j) = r_d/p1000mb*(t(i,k,j)+t0)*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm-alb(i,k,j)
      end do
! recompute : p
      do k = ktf-1, kts, -1
        do i = its, itf
          qtot = 0.
          qf2 = 1./(1.+qtot)
          qf1 = qtot*qf2
          p(i,k,j) = p(i,k+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k+1)
          qvf = 1.
          al(i,k,j) = r_d/p1000mb*(t(i,k,j)+t0)*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm-alb(i,k,j)
        end do
      end do
! recompute : al
      do k = ktf+1, 2, -1
        do i = its, itf
          a_al(i,k-1,j) = a_al(i,k-1,j)-a_ph(i,k,j)*dnw(k-1)*muts(i,j)
          a_mu(i,j) = a_mu(i,j)-a_ph(i,k,j)*dnw(k-1)*alb(i,k-1,j)
          a_muts(i,j) = a_muts(i,j)-a_ph(i,k,j)*dnw(k-1)*al(i,k-1,j)
          a_ph(i,k-1,j) = a_ph(i,k-1,j)+a_ph(i,k,j)
          a_ph(i,k,j) = 0.
        end do
      end do
      do k = kts, ktf-1
!  recdepend vars : alb,cvpm,itf,its,j,k,mu,muts,p1000mb,pb,r_d,rdnw,t,t
! 0
! recompute pos : DOLOOP_STMT module_big_step_utilities_em.f90:1131
! recompute vars : p
        do i = its, itf
          qtot = 0.
          qf2 = 1./(1.+qtot)
          qf1 = qtot*qf2
          p(i,ka2,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(ka2)/qf2)
          qvf = 1.
          al(i,ka2,j) = r_d/p1000mb*(t(i,ka2,j)+t0)*qvf*((p(i,ka2,j)+pb(i,ka2,j))/p1000mb)**cvpm-alb(i,ka2,j)
        end do
! recompute vars : p
        do k2 = ktf-1, k-(-1), -1
          do i = its, itf
            qtot = 0.
            qf2 = 1./(1.+qtot)
            qf1 = qtot*qf2
            p(i,k2,j) = p(i,k2+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k2+1)
          end do
        end do
        do i = its, itf
          a_qf1 = 0.
          a_qf2 = 0.
          a_qtot = 0.
          a_qvf = 0.
          qtot = 0.
! recompute : qtot
          qf2 = 1./(1.+qtot)
! recompute : qf2
          qf1 = qtot*qf2
! recompute : qf1
          p(i,k,j) = p(i,k+1,j)-(mu(i,j)+qf1*muts(i,j))/qf2/rdn(k+1)
! recompute : p
          qvf = 1.
! recompute : qvf
          a_p(i,k,j) = a_p(i,k,j)+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*qvf/p1000mb*cvpm*((p(i,k,j)+pb(i,k,j))/p1000mb)**(cvpm-1)
          a_qvf = a_qvf+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
          a_t(i,k,j) = a_t(i,k,j)+a_al(i,k,j)*r_d/p1000mb*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
          a_al(i,k,j) = 0.
          a_mu(i,j) = a_mu(i,j)-a_p(i,k,j)*(1/qf2/rdn(k+1))
          a_muts(i,j) = a_muts(i,j)-a_p(i,k,j)*(qf1/qf2/rdn(k+1))
          a_p(i,k+1,j) = a_p(i,k+1,j)+a_p(i,k,j)
          a_qf1 = a_qf1-a_p(i,k,j)*(muts(i,j)/qf2/rdn(k+1))
          a_qf2 = a_qf2+a_p(i,k,j)*((mu(i,j)+qf1*muts(i,j))/(qf2*qf2)/rdn(k+1))
          a_p(i,k,j) = 0.
        end do
      end do
! recdepend vars : ktf
! recompute pos : ASSIGN_STMT module_big_step_utilities_em.f90:1130
! recompute vars : k
      k = ktf
! recompute vars : k
      do i = its, itf
        a_qf1 = 0.
        a_qf2 = 0.
        a_qtot = 0.
        a_qvf = 0.
        qtot = 0.
! recompute : qtot
        qf2 = 1./(1.+qtot)
! recompute : qf2
        qf1 = qtot*qf2
! recompute : qf1
        p(i,k,j) = -(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/qf2)
! recompute : p
        qvf = 1.
! recompute : qvf
        a_p(i,k,j) = a_p(i,k,j)+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*qvf/p1000mb*cvpm*((p(i,k,j)+pb(i,k,j))/p1000mb)**(cvpm-1)
        a_qvf = a_qvf+a_al(i,k,j)*r_d/p1000mb*(t(i,k,j)+t0)*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
        a_t(i,k,j) = a_t(i,k,j)+a_al(i,k,j)*r_d/p1000mb*qvf*((p(i,k,j)+pb(i,k,j))/p1000mb)**cvpm
        a_al(i,k,j) = 0.
        a_mu(i,j) = a_mu(i,j)-a_p(i,k,j)*(0.5/rdnw(k)/qf2)
        a_muts(i,j) = a_muts(i,j)-a_p(i,k,j)*(0.5*qf1/rdnw(k)/qf2)
        a_qf1 = a_qf1-a_p(i,k,j)*(0.5*muts(i,j)/rdnw(k)/qf2)
        a_qf2 = a_qf2+a_p(i,k,j)*(0.5*(mu(i,j)+qf1*muts(i,j))/rdnw(k)/(qf2*qf2))
        a_p(i,k,j) = 0.
      end do
    end do
  endif
endif

end subroutine a_calc_p_rho_phi
