subroutine a_diagnose_w( ph_tend, a_ph_tend, a_ph_new, a_ph_old, a_w, mu, a_mu, dt, a_u, a_v, ht, cf1, cf2, cf3, rdx, rdy, msft, &
&ide, jde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
real, intent(inout) :: a_mu(ims:ime,jms:jme)
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_ph_new(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph_old(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_ph_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_u(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_v(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_w(ims:ime,kms:kme,jms:jme)
real, intent(in) :: cf1
real, intent(in) :: cf2
real, intent(in) :: cf3
real, intent(in) :: dt
real, intent(in) :: ht(ims:ime,jms:jme)
integer, intent(in) :: ide
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kte
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: mu(ims:ime,jms:jme)
real, intent(in) :: ph_tend(ims:ime,kms:kme,jms:jme)
real, intent(in) :: rdx
real, intent(in) :: rdy

!==============================================
! declare local variables
!==============================================
integer i
integer itf
integer j
integer jtf
integer k

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
itf = min(ite,ide-1)
! recompute : itf
jtf = min(jte,jde-1)
! recompute : jtf
do j = jts, jtf
  do k = 2, kte
    do i = its, itf
      a_mu(i,j) = a_mu(i,j)+a_w(i,k,j)*(msft(i,j)*(ph_tend(i,k,j)/(mu(i,j)*mu(i,j)))/g)
      a_ph_new(i,k,j) = a_ph_new(i,k,j)+a_w(i,k,j)*(msft(i,j)/dt/g)
      a_ph_old(i,k,j) = a_ph_old(i,k,j)-a_w(i,k,j)*(msft(i,j)/dt/g)
      a_ph_tend(i,k,j) = a_ph_tend(i,k,j)-a_w(i,k,j)*(msft(i,j)/mu(i,j)/g)
      a_w(i,k,j) = 0.
    end do
  end do
  do i = its, itf
    a_u(i+1,3,j) = a_u(i+1,3,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i+1,j)-ht(i,j))*cf3
    a_u(i,3,j) = a_u(i,3,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i,j)-ht(i,j-1))*cf3
    a_u(i+1,2,j) = a_u(i+1,2,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i+1,j)-ht(i,j))*cf2
    a_u(i,2,j) = a_u(i,2,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i,j)-ht(i,j-1))*cf2
    a_u(i+1,1,j) = a_u(i+1,1,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i+1,j)-ht(i,j))*cf1
    a_u(i,1,j) = a_u(i,1,j)+0.5*a_w(i,1,j)*msft(i,j)*rdx*(ht(i,j)-ht(i,j-1))*cf1
    a_v(i,3,j+1) = a_v(i,3,j+1)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j+1)-ht(i,j))*cf3
    a_v(i,3,j) = a_v(i,3,j)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j)-ht(i,j-1))*cf3
    a_v(i,2,j+1) = a_v(i,2,j+1)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j+1)-ht(i,j))*cf2
    a_v(i,2,j) = a_v(i,2,j)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j)-ht(i,j-1))*cf2
    a_v(i,1,j+1) = a_v(i,1,j+1)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j+1)-ht(i,j))*cf1
    a_v(i,1,j) = a_v(i,1,j)+0.5*a_w(i,1,j)*msft(i,j)*rdy*(ht(i,j)-ht(i,j-1))*cf1
    a_w(i,1,j) = 0.
  end do
end do

end subroutine a_diagnose_w
