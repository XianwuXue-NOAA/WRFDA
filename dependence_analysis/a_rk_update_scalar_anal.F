! TBH:  OVERWRITE a_advect_tend,a_mu_new,a_mu_old,a_sc_tend,a_scalar_1,a_scalar_2,scalar_1
! TBH:  HORIZONTAL DEPENDENCE:  NONE
subroutine a_rk_update_scalar( scs, sce, scalar_1, a_scalar_1, scalar_2, a_scalar_2, sc_tend, a_sc_tend, advect_tend, &
&a_advect_tend, msft, mu_old, a_mu_old, mu_new, a_mu_new, mu_base, rk_step, dt, spec_zone, epsts, leapfrog, config_flags, ids, ide,&
& jds, jde, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
integer, intent(in) :: ime
integer, intent(in) :: ims
integer, intent(in) :: jme
integer, intent(in) :: jms
integer, intent(in) :: kme
integer, intent(in) :: kms
real, intent(inout) :: a_advect_tend(ims:ime,kms:kme,jms:jme)
real, intent(inout) :: a_mu_new(ims:ime,jms:jme)
real, intent(inout) :: a_mu_old(ims:ime,jms:jme)
integer, intent(in) :: sce
integer, intent(in) :: scs
real, intent(inout) :: a_sc_tend(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: a_scalar_1(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: a_scalar_2(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(in) :: advect_tend(ims:ime,kms:kme,jms:jme)
type (grid_config_rec_type), intent(in) :: config_flags
real, intent(in) :: dt
real, intent(in) :: epsts
integer, intent(in) :: ide
integer, intent(in) :: ids
integer, intent(in) :: ite
integer, intent(in) :: its
integer, intent(in) :: jde
integer, intent(in) :: jds
integer, intent(in) :: jte
integer, intent(in) :: jts
integer, intent(in) :: kde
integer, intent(in) :: kte
integer, intent(in) :: kts
logical, intent(in) :: leapfrog
real, intent(in) :: msft(ims:ime,jms:jme)
real, intent(in) :: mu_base(ims:ime,jms:jme)
real, intent(in) :: mu_new(ims:ime,jms:jme)
real, intent(in) :: mu_old(ims:ime,jms:jme)
integer, intent(in) :: rk_step
real, intent(inout) :: sc_tend(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: scalar_1(ims:ime,kms:kme,jms:jme,scs:sce)
real, intent(inout) :: scalar_2(ims:ime,kms:kme,jms:jme,scs:sce)
integer, intent(in) :: spec_zone

!==============================================
! declare local variables
!==============================================
real a_muold(its:ite)
real a_r_munew(its:ite)
real a_sc_middle
real a_tendency(its:ite,kts:kte,jts:jte)
integer i
integer i_end
integer i_end_spc
integer i_start
integer i_start_spc
integer im
integer j
integer j_end
integer j_end_spc
integer j_start
integer j_start_spc
integer k
integer k_end
integer k_end_spc
integer k_start
integer k_start_spc
real muold(its:ite)
real r_munew(its:ite)
real tendency(its:ite,kts:kte,jts:jte)

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_muold(:) = 0.
a_r_munew(:) = 0.
a_sc_middle = 0.
a_tendency(:,:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
i_start = its
! recompute : i_start
i_end = ite
! recompute : i_end
j_start = jts
! recompute : j_start
j_end = jte
! recompute : j_end
k_start = kts
! recompute : k_start
k_end = kte-1
! recompute : k_end
if (j_end .eq. jde) then
  j_end = j_end-1
endif
! recompute : j_end
if (i_end .eq. ide) then
  i_end = i_end-1
endif
! recompute : i_end
i_start_spc = i_start
! recompute : i_start_spc
i_end_spc = i_end
! recompute : i_end_spc
j_start_spc = j_start
! recompute : j_start_spc
j_end_spc = j_end
! recompute : j_end_spc
k_start_spc = k_start
! recompute : k_start_spc
k_end_spc = k_end
! recompute : k_end_spc
if (config_flags%nested .or. config_flags%specified) then
  i_start = max(its,ids+spec_zone)
  i_end = min(ite,ide-spec_zone-1)
  j_start = max(jts,jds+spec_zone)
  j_end = min(jte,jde-spec_zone-1)
  k_start = kts
  k_end = min(kte,kde-1)
endif
! recompute : i_end,i_start,j_end,j_start,k_end,k_start
if ( .not. leapfrog) then
  if (rk_step .eq. 1) then
    do im = scs, sce
      do j = jts, min(jte,jde-1)
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            tendency(i,k,j) = 0.
          end do
        end do
      end do
      do j = j_start, j_end
        do k = k_start, k_end
          do i = i_start, i_end
            tendency(i,k,j) = advect_tend(i,k,j)*msft(i,j)
          end do
        end do
      end do
! recompute : tendency
      do j = j_start_spc, j_end_spc
        do k = k_start_spc, k_end_spc
          do i = i_start_spc, i_end_spc
            tendency(i,k,j) = tendency(i,k,j)+sc_tend(i,k,j,im)
          end do
        end do
      end do
! recompute : tendency
      do j = jts, min(jte,jde-1)
        do i = its, min(ite,ide-1)
          muold(i) = mu_old(i,j)+mu_base(i,j)
          r_munew(i) = 1./(mu_new(i,j)+mu_base(i,j))
        end do
! recompute : muold,r_munew
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            scalar_1(i,k,j,im) = scalar_2(i,k,j,im)
! recompute : scalar_1
            a_muold(i) = a_muold(i)+a_scalar_2(i,k,j,im)*scalar_1(i,k,j,im)*r_munew(i)
            a_r_munew(i) = a_r_munew(i)+a_scalar_2(i,k,j,im)*(muold(i)*scalar_1(i,k,j,im)+dt*tendency(i,k,j))
            a_scalar_1(i,k,j,im) = a_scalar_1(i,k,j,im)+a_scalar_2(i,k,j,im)*muold(i)*r_munew(i)
            a_tendency(i,k,j) = a_tendency(i,k,j)+a_scalar_2(i,k,j,im)*dt*r_munew(i)
            a_scalar_2(i,k,j,im) = 0.
            a_scalar_2(i,k,j,im) = a_scalar_2(i,k,j,im)+a_scalar_1(i,k,j,im)
            a_scalar_1(i,k,j,im) = 0.
          end do
        end do
        do i = its, min(ite,ide-1)
          a_mu_new(i,j) = a_mu_new(i,j)-a_r_munew(i)/((mu_new(i,j)+mu_base(i,j))*(mu_new(i,j)+mu_base(i,j)))
          a_r_munew(i) = 0.
          a_mu_old(i,j) = a_mu_old(i,j)+a_muold(i)
          a_muold(i) = 0.
        end do
      end do
      do j = j_start_spc, j_end_spc
        do k = k_start_spc, k_end_spc
          do i = i_start_spc, i_end_spc
            a_sc_tend(i,k,j,im) = a_sc_tend(i,k,j,im)+a_tendency(i,k,j)
          end do
        end do
      end do
      do j = j_start, j_end
        do k = k_start, k_end
          do i = i_start, i_end
            a_advect_tend(i,k,j) = a_advect_tend(i,k,j)+a_tendency(i,k,j)*msft(i,j)
            a_tendency(i,k,j) = 0.
          end do
        end do
      end do
      do j = jts, min(jte,jde-1)
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            a_tendency(i,k,j) = 0.
          end do
        end do
      end do
    end do
  else
    do im = scs, sce
      do j = jts, min(jte,jde-1)
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            tendency(i,k,j) = 0.
          end do
        end do
      end do
      do j = j_start, j_end
        do k = k_start, k_end
          do i = i_start, i_end
            tendency(i,k,j) = advect_tend(i,k,j)*msft(i,j)
          end do
        end do
      end do
! recompute : tendency
      do j = j_start_spc, j_end_spc
        do k = k_start_spc, k_end_spc
          do i = i_start_spc, i_end_spc
            tendency(i,k,j) = tendency(i,k,j)+sc_tend(i,k,j,im)
          end do
        end do
      end do
! recompute : tendency
      do j = jts, min(jte,jde-1)
        do i = its, min(ite,ide-1)
          muold(i) = mu_old(i,j)+mu_base(i,j)
          r_munew(i) = 1./(mu_new(i,j)+mu_base(i,j))
        end do
! recompute : muold,r_munew
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            a_muold(i) = a_muold(i)+a_scalar_2(i,k,j,im)*scalar_1(i,k,j,im)*r_munew(i)
            a_r_munew(i) = a_r_munew(i)+a_scalar_2(i,k,j,im)*(muold(i)*scalar_1(i,k,j,im)+dt*tendency(i,k,j))
            a_scalar_1(i,k,j,im) = a_scalar_1(i,k,j,im)+a_scalar_2(i,k,j,im)*muold(i)*r_munew(i)
            a_tendency(i,k,j) = a_tendency(i,k,j)+a_scalar_2(i,k,j,im)*dt*r_munew(i)
            a_scalar_2(i,k,j,im) = 0.
          end do
        end do
        do i = its, min(ite,ide-1)
          a_mu_new(i,j) = a_mu_new(i,j)-a_r_munew(i)/((mu_new(i,j)+mu_base(i,j))*(mu_new(i,j)+mu_base(i,j)))
          a_r_munew(i) = 0.
          a_mu_old(i,j) = a_mu_old(i,j)+a_muold(i)
          a_muold(i) = 0.
        end do
      end do
      do j = j_start_spc, j_end_spc
        do k = k_start_spc, k_end_spc
          do i = i_start_spc, i_end_spc
            a_sc_tend(i,k,j,im) = a_sc_tend(i,k,j,im)+a_tendency(i,k,j)
          end do
        end do
      end do
      do j = j_start, j_end
        do k = k_start, k_end
          do i = i_start, i_end
            a_advect_tend(i,k,j) = a_advect_tend(i,k,j)+a_tendency(i,k,j)*msft(i,j)
            a_tendency(i,k,j) = 0.
          end do
        end do
      end do
      do j = jts, min(jte,jde-1)
        do k = kts, min(kte,kde-1)
          do i = its, min(ite,ide-1)
            a_tendency(i,k,j) = 0.
          end do
        end do
      end do
    end do
  endif
else
  do im = scs, sce
    a_sc_middle = 0.
    do j = jts, min(jte,jde-1)
      do k = kts, min(kte,kde-1)
        do i = its, min(ite,ide-1)
          tendency(i,k,j) = 0.
        end do
      end do
    end do
    do j = j_start, j_end
      do k = k_start, k_end
        do i = i_start, i_end
          tendency(i,k,j) = advect_tend(i,k,j)
        end do
      end do
    end do
! recompute : tendency
    do j = j_start_spc, j_end_spc
      do k = k_start_spc, k_end_spc
        do i = i_start_spc, i_end_spc
          tendency(i,k,j) = tendency(i,k,j)+sc_tend(i,k,j,im)
        end do
      end do
    end do
! recompute : tendency
    do j = jts, min(jte,jde-1)
      a_sc_middle = 0.
      do i = its, min(ite,ide-1)
        muold(i) = mu_old(i,j)+mu_base(i,j)
        r_munew(i) = 1./(mu_new(i,j)+mu_base(i,j))
      end do
! recompute : muold,r_munew
      do k = kts, min(kte,kde-1)
        a_sc_middle = 0.
        do i = its, min(ite,ide-1)
          a_sc_middle = 0.
          a_sc_middle = a_sc_middle+a_scalar_1(i,k,j,im)*(1+(-2)*epsts)
          a_scalar_2(i,k,j,im) = a_scalar_2(i,k,j,im)+a_scalar_1(i,k,j,im)*epsts
          a_scalar_1(i,k,j,im) = a_scalar_1(i,k,j,im)*epsts
          a_muold(i) = a_muold(i)+a_scalar_2(i,k,j,im)*scalar_1(i,k,j,im)*r_munew(i)
          a_r_munew(i) = a_r_munew(i)+a_scalar_2(i,k,j,im)*(muold(i)*scalar_1(i,k,j,im)+2*msft(i,j)**2*dt*tendency(i,k,j))
          a_scalar_1(i,k,j,im) = a_scalar_1(i,k,j,im)+a_scalar_2(i,k,j,im)*muold(i)*r_munew(i)
          a_tendency(i,k,j) = a_tendency(i,k,j)+2*a_scalar_2(i,k,j,im)*msft(i,j)**2*dt*r_munew(i)
          a_scalar_2(i,k,j,im) = 0.
          a_scalar_2(i,k,j,im) = a_scalar_2(i,k,j,im)+a_sc_middle
          a_sc_middle = 0.
        end do
      end do
      do i = its, min(ite,ide-1)
        a_mu_new(i,j) = a_mu_new(i,j)-a_r_munew(i)/((mu_new(i,j)+mu_base(i,j))*(mu_new(i,j)+mu_base(i,j)))
        a_r_munew(i) = 0.
        a_mu_old(i,j) = a_mu_old(i,j)+a_muold(i)
        a_muold(i) = 0.
      end do
    end do
    do j = j_start_spc, j_end_spc
      do k = k_start_spc, k_end_spc
        do i = i_start_spc, i_end_spc
          a_sc_tend(i,k,j,im) = a_sc_tend(i,k,j,im)+a_tendency(i,k,j)
        end do
      end do
    end do
    do j = j_start, j_end
      do k = k_start, k_end
        do i = i_start, i_end
          a_advect_tend(i,k,j) = a_advect_tend(i,k,j)+a_tendency(i,k,j)
          a_tendency(i,k,j) = 0.
        end do
      end do
    end do
    do j = jts, min(jte,jde-1)
      do k = kts, min(kte,kde-1)
        do i = its, min(ite,ide-1)
          a_tendency(i,k,j) = 0.
        end do
      end do
    end do
  end do
endif

end subroutine a_rk_update_scalar
