# configure.wrf
#
# This file was automatically generated by the configure script in the
# top level directory. You may make changes to the settings in this
# file but be aware they will be overwritten each time you run configure.
# Ordinarily, it is necessary to run configure once, when the code is
# first installed.
#
# To permanently change options, change the settings for your platform
# in the file arch/configure.defaults then rerun configure.
#
SHELL           =       /bin/sh
DEVTOP          =       `pwd`
LIBINCLUDE      =       .
.SUFFIXES: .F .i .o .f .c

#### Get core settings from environment (set in compile script)
#### Note to add a core, this has to be added to.

WRFVAR		=	-DWRFVAR

COREDEFS = -DEM_CORE=$(WRF_EM_CORE) \
           -DNMM_CORE=$(WRF_NMM_CORE) -DNMM_MAX_DIM=1250 \
	   -DCOAMPS_CORE=$(WRF_COAMPS_CORE) \
           -DEXP_CORE=$(WRF_EXP_CORE) \
	   $(WRFVAR)

#### Single location for defining total number of domains.  You need
#### at least 1 + 2*(number of total nests).  For example, 1 coarse
#### grid + three fine grids = 1 + 2(3) = 7, so MAX_DOMAINS=7.

MAX_DOMAINS	=	5

#### DM buffer length for the configuration flags.

CONFIG_BUF_LEN	=	8192

#### Default sed command and script for Fortran source files ####
SED_FTN = sed -f ../arch/standard.sed

#### Default ESMF dependence for embedded ESMF time manager ####
ESMF_MOD_DEPENDENCE = ../external/esmf_time_f90/ESMF_Mod.o

#### Architecture specific settings ####

# Settings for AIX DM-Parallel          (RSL_LITE, IBM-MPI, no nesting)
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       cc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r -DMPI2_SUPPORT
RWORDSIZE       =       8
PROMOTION	=	-qrealsize=$(RWORDSIZE) -qintsize=4
CFLAGS          =       -DNOUNDERSCORE  -I../external/RSL_LITE -DDM_PARALLEL \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 -qinitauto=00 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DRSL_LITE -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) \
                        -DLWORDSIZE=4 -DNETCDF -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV -DSTAND_ALONE
PERL            =       perl
REGISTRY        =       Registry
LIB             =       -L../external/io_netcdf -lwrfio_nf -L/home/blueice/wrfhelp/external/netcdf/netcdf-3.6.1/xlf_powerpc/lib -lnetcdf -L../external/RSL_LITE -lrsl_lite -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
# these LDFLAGS setting are only needed if OBJECT_MODE 32 (rather than 64) is used.
LDFLAGS         =	# -bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	
WRF_CHEM	=	0 
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	/home/blueice/wrfhelp/external/netcdf/netcdf-3.6.1/xlf_powerpc
CC_TOOLS        =       cc

externals : wrfio_nf wrfio_grib1 ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=/home/blueice/wrfhelp/external/netcdf/netcdf-3.6.1/xlf_powerpc RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	if [ $(RWORDSIZE) -eq 8 ] ; then \
	  /bin/rm -f foo_io_flags.h; \
	  sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
	  /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CFLAGS="$(CFLAGS)" CC="$(CC)" FC="$(FC)" FFLAGS="$(FCFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F
solve_em_ad.o : solve_em_ad.F
test_solve_em.o : test_solve_em.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
solve_em_ad.o                                              \
test_solve_em.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#
#	Macros, these should be generic for all machines

LN		=	ln -sf
MAKE	=	make -i -r
RM		= 	rm -f
MV  	=   mv

#	There is probably no reason to modify these rules

.F.i:
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $@
	mv $*.i $(DEVTOP)/pick/$*.f
	cp $*.F $(DEVTOP)/pick

.F.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $(PROMOTION) -I.. $*.f

.F.f:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $@
	$(RM) $*.b

.f.o:
	$(RM) $@
	$(FC) -c $(FCFLAGS) $(PROMOTION) $*.f

.c.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) $*.c


