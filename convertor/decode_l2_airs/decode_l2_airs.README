All development and testing has been performed on a machine running Linux; PGI 
Fortran compilers are available, as are the JPEG and ZLIB compression libraries.

UPDATED 2006-06-02: Necessary changes to compile and run on OS X have been 
added.

Installation of HDFEOS libraries
________________________________________________________________________________

 In order to install the HDF-EOS libraries, which are required by the AIRS 
 decoder, the following sequence of compilations was used.

 NOTE: The SZIP library seems to be completely unnecessary, and thus, the user
 need not install it or reference it in any compilations.

 0) Retrieve all necessary source code from the internet. This was 
    accomplished by:

       Downloading SZIP 2.0 (szip-2.0.tar.gz) from 
                         ftp://ftp.ncsa.uiuc.edu/HDF/lib-external/szip/2.0/src/

       Download JPEG library (jpegsrc.v6b.tar.gz) from
                         ftp://ftp.uu.net/graphics/jpeg/

       Download ZLIB library (zlib-1.2.3.tar.gz) from
                         http://www.zlib.net/

       Downloading HDF 4.2r1 (HDF4.2r1.tar.gz) from 
                         ftp://ftp.ncsa.uiuc.edu/HDF/HDF/HDF_Current/src/

       Downloading HDF-EOS v2.14v1.00 libraries (HDF-EOS2.14v1.00.tar.Z) from 
                         http://www.hdfeos.org/software/HDFEOS_2_14_v1/

 1) Compile szip libraries. These libraries are listed as being optional for the 
    HDF4 installation, but have been compiled anyway. The following sequence of 
    commands was sufficient to successfully install.

       > ./configure --prefix=`pwd`
       [ edit examples/Makefile so that "LDFLAGS=-lm" ]
       > make
       > make check
       > make install

 2) Compile JPEG library. This is only necessary if libjpeg.a does not 
    already exist on the system.
    These steps were used to compile on a Mac running OS X. The gcc 4.0
    compiler seems to have problems compiling C that links well with 
    Fortran, so gcc-3.3 is used. This may not be an issue for the JPEG
    library, but it seems to be for others.
       > setenv CC /usr/bin/gcc-3.3
       > ./configure
       > make
       > mkdir lib include
       > mv libjpeg.a lib
       > mv *.h include
       > ranlib lib/libjpeg.a

 3) Compile ZLIB library. As with the JPEG library, this is only necessary
    if libz.a is not already installed. The steps below were used on a 
    Mac running OS X.
       > ./configure
       > make
       > mkdir lib include
       > mv libz.a lib
       > mv *.h include

 4) Compile HDF4 libraries. The following sequence of commands was used.

       > setenv CC pgcc      [OS X -- use gcc-3.3]
       > setenv FC pgf90     [OX X -- use g95]
       > setenv F77 pgf90    [OX X -- use g95]
       > setenv F90 pgf90    [OX X -- use g95]
       > cd mfhdf/fortran/config     [next 5 steps are necessary on OS X]
       > cp ftest-linux.f ftest-apple.f      
       > cp jackets-linux.c jackets-apple.c
       > cp netcdf-linux.inc netcdf-apple.inc
       > cd ../../..
       > ./configure --with-zlib=[ path to lib/libz.a ] \
                     --with-jpeg=[ path to lib/libjpeg.a ] \
                     --with-szlib=[ path to szip installation in step 1 ] \
                     --prefix=`pwd`
       [ if using szip for some reason, add szlib lib directory to 
         LD_LIBRARY_PATH; alternatively, there is probably a way to tell the 
         Makefile to use a compiler option to link the static version of the 
         szip library, rather than the shared one ]
       [ add "-lm" to the LIBS variable in mfhdf/hdiff/Makefile ]
       > gmake    [OS X -- make works just fine]
       > gmake check 
         [ here, one of the tests failed, but doesn't seem to be critical ]
       > gmake install

 5) Compile HDFEOS libraries as follows.

       > [change CC and F77 in bin/INSTALL-HDFEOS in the "macintosh" section; Mac OS X only]
       > ./bin/INSTALL-HDFEOS
       [ the script will ask for the paths to the HDF4 library and include files
         installed above ]

 6) Compile the AIRS decoder. This software is quite simple, and is built by 
    typing "make" in the AIRS_decoder directory. However, it will be necessary
    to first edit the Makefile to set the proper library paths. Also, on a Mac,
    it is necessary to add "#define OSX" to the top of the file geth_newdate.c.


Running the decoder
________________________________________________________________________________

The decoder expects to be given the names of the HDF-EOS-formatted AIRS L2 
retrieval files to be processed on the command-line. Additionally, the decoder 
will look for the file "time_window.nl", which specifies a minimum time and a 
maximum time, outside of which profiles should be ignored; if no such file 
exists, all profiles will be considered by the decoder. For each of the 1350 
FOVs in an AIRS swath, levels with bad quality flags are discarded, and the 
remaining levels are written as a profile to a little_r-formatted file named 
soundings.little_r. Each swath contains temperature and moisture observations, 
as well as pressures and geopotential heights at the reported levels. The 
pressure, temperature, and moisture are used to compute a relative humidity; in 
the little_r formatted profiles that are written, the temperature, pressure, 
height, and RH fields are filled in. The time, in YYYYMMDDHHmmss format, is 
computed from the time of the observation and written to the output file.


Quality checking in the decoder
________________________________________________________________________________

As suggested in the document "AIRS/AMSU/HSB Version 4.0 Level 2 QA Quick Start",
the Qual_Temp_Profile_* flags are used in place of the RetQAFlag. When deciding
whether to keep a level of temperature data from an AIRS FOV, the pressure of
the level is compared with Press_bot_mid_bndry and Pres_mid_top_bndry. Depending
on where the pressure is in relation to these two boundaries, the quality value 
in Qual_Temp_Profile_Top, Press_bot_mid_bndry, or Qual_Temp_Profile_Mid is used 
as the quality flag for the level. Possible values for this quality flag are:
0 (best quality; useful for validation statistics); 1 (good quality; not for
validation); and 2 (poor quality). In the decoder, a level is used if its 
quality flag is 0 or 1. For moisture data the same quality flag is used, rather 
than Qual_H2O. This is done on account of the developmental nature of the 
Qual_H2O flag, and at the recommendation on p. 45 of "AIRS/AMSU/HSB Version 4.0 
Data Release User Guide". Apparently, this approach gives a dry bias (see p. 8 
of "Level 2 QA Quick Start"). Lastly, levels below the surface are discarded, 
regardless of the quality flag for that level.
