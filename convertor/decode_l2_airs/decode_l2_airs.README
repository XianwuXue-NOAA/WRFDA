
Installing the decoder
________________________________________________________________________________

The basic procedure for installing the AIRS decoder involves first building
and installing the HDFEOS libraries, which themselves depend on other libraries,
and then compiling the decoder itself. The following steps may be followed.

Beginning at the root directory:

0) If using the g95 compiler, set the following environment variables

   export G95_ENDIAN=BIG
   export G95_FPU_INVALID=${G95_FPU_INVALID:-T}
   export G95_FPU_ZERODIV=${G95_FPU_ZERODIV:-T}
   export G95_FPU_OVERFLOW=${G95_FPU_OVERFLOW:-F}
   export G95_FPU_UNDERFLOW=${G95_FPU_UNDERFLOW:-F}
   export G95_FPU_INEXACT=${G95_FPU_INEXACT:-F}
   export G95_FPU_EXCEPTIONS=${G95_FPU_EXCEPTIONS:-F}
   export G95_UNBUFFERED_ALL=${G95_UNBUFFERED_ALL:-T}
   export G95_MEM_INIT=${G95_MEM_INIT:-0x00}
   export G95_MEM_MAXALLOC=${G95_MEM_MAXALLOC:-F}

1) Set the NETCDF environment variable to the location where NETCDF is installed.

2) > ./configure_new wrfvar

3) > cd external/zlib/zlib-1.2.3

4) Edit the setup_gcc script to use the compilers appropriate for the target 
   system.

5) > ./setup_gcc

6) > cd ../../jpeg/jpeg-6b

7) Edit the setup_gcc script to use the compilers appropriate for the target 
   system.

8) > ./setup_gcc

9) > cd ../../HDF-EOS/HDF4.2r1

10) Edit the setup_g95 script to use the compilers appropriate for the target 
    system.

11) > ./setup_g95

12) Take note of the location where the HDF4 libraries are installed. This
    location, and the location where the include files reside in will be 
    needed when installing the HDFEOS libraries. The relative paths to the
    libraries and include files should be NewHDF/lib and NewHDF/include,
    respectively; however, the absolute path names should be noted.

    Alternatively, two environment variables may be set to avoid interactively
    providing the paths to the libraries and include files:

12a) Set the HDFLIB environment variable to `pwd`/NewHDF/lib

12b) Set the HDFINC environment variable to `pwd`/NewHDF/include

13) > cd ../hdfeos

14) Edit the setup_g95 script to use the compilers appropriate for the target 
    system.

15) > ./setup_g95

16) Link lib/<YOUR ARCHITECTURE>/* lib (e.g., cd lib; ln -s macintosh/* .)

17) > cd ../../../build

18) > touch depend.txt

19) > make setup 

20) > make -r decode_airs


Running the decoder
________________________________________________________________________________

The decoder expects to be given the names of the HDF-EOS-formatted AIRS L2 
retrieval files to be processed on the command-line. Additionally, the decoder 
will look for the file "time_window.nl", which specifies a minimum time and a 
maximum time, outside of which profiles should be ignored; if no such file 
exists, all profiles will be considered by the decoder. For each of the 1350 
FOVs in an AIRS swath, levels with bad quality flags are discarded, and the 
remaining levels are written as a profile to a little_r-formatted file named 
soundings.little_r. Each swath contains temperature and moisture observations, 
as well as pressures and geopotential heights at the reported levels. The 
pressure, temperature, and moisture are used to compute a relative humidity; in 
the little_r formatted profiles that are written, the temperature, pressure, 
height, and RH fields are filled in. The time, in YYYYMMDDHHmmss format, is 
computed from the time of the observation and written to the output file.


Quality checking in the decoder
________________________________________________________________________________

As suggested in the document "AIRS/AMSU/HSB Version 4.0 Level 2 QA Quick Start",
the Qual_Temp_Profile_* flags are used in place of the RetQAFlag. When deciding
whether to keep a level of temperature data from an AIRS FOV, the pressure of
the level is compared with Press_bot_mid_bndry and Pres_mid_top_bndry. Depending
on where the pressure is in relation to these two boundaries, the quality value 
in Qual_Temp_Profile_Top, Press_bot_mid_bndry, or Qual_Temp_Profile_Mid is used 
as the quality flag for the level. Possible values for this quality flag are:
0 (best quality; useful for validation statistics); 1 (good quality; not for
validation); and 2 (poor quality). In the decoder, a level is used if its 
quality flag is 0 or 1. For moisture data the same quality flag is used, rather 
than Qual_H2O. This is done on account of the developmental nature of the 
Qual_H2O flag, and at the recommendation on p. 45 of "AIRS/AMSU/HSB Version 4.0 
Data Release User Guide". Apparently, this approach gives a dry bias (see p. 8 
of "Level 2 QA Quick Start"). Lastly, levels below the surface are discarded, 
regardless of the quality flag for that level.
