SUBROUTINE DA_GET_VPoles(u,v,lon,        &
          ids, ide, jds, jde, kds, kde,  &
          ims, ime, jms, jme, kms, kme,  &
          its, ite, jts, jte, kts, kte   )

!------------------------------------------------------------------------------
!  PURPOSE: Treatment for Polar winds                            
!
!  HISTORY:   
!          Creation: 10/26/2004	                 Syed RH Rizvi
!
!  PARENT_MODULE: DA_Tools              
!------------------------------------------------------------------------------
   IMPLICIT NONE
   
   integer, intent(in)    :: ids, ide, jds, jde, kds, kde
   integer, intent(in)    :: ims, ime, jms, jme, kms, kme
   integer, intent(in)    :: its, ite, jts, jte, kts, kte
   real, intent(inout)    :: u(ims:ime,jms:jme,kms:kme)   ! u wind comp.
   real, intent(inout)    :: v(ims:ime,jms:jme,kms:kme)   ! v wind comp.
   real, intent(in)       :: lon(ims:ime,jms:jme)         ! Longitudes   
 
!---------------------------------------------------------------------------
   real                   :: conv,tmpvar                                         
   real                   :: tmpu,tmp_u,tmpv,tmp_v,tmpp,tmp_p,tmpps,tmp_ps
   integer                :: ierror, k
   real                   :: xlon(its:ite)    
!---------------------------------------------------------------------------
      conv = pi/180. 
!---------------------------------------------------------------------------
   tmpvar      = 1.0/real(ide-ids+1)
   xlon(its:ite) = conv*lon(its:ite,jts)
!---------------------------------------------------------------------------------
 do k = kts,kte
   tmp_u =0.0
   tmp_v =0.0
   tmpu = 0.
   tmpv = 0.

   if( jts == jds) then 
      tmp_u = tmpvar*sum(-u(its:ite,jts+1,k)*cos(xlon(its:ite))& 
                         +v(its:ite,jts+1,k)*sin(xlon(its:ite)))
      tmp_v = tmpvar*sum(-u(its:ite,jts+1,k)*sin(xlon(its:ite))& 
                         -v(its:ite,jts+1,k)*cos(xlon(its:ite)))
     
   end if

#ifdef DM_PARALLEL
   call MPI_ALLREDUCE(tmp_u,tmpu,1, MPI_REAL8, MPI_SUM, MPI_COMM_WORLD, IERROR )
   call MPI_ALLREDUCE(tmp_v,tmpv,1, MPI_REAL8, MPI_SUM, MPI_COMM_WORLD, IERROR )
#else
   tmpu = tmp_u                    
   tmpv = tmp_v                    
#endif
   if( jts == jds) then 
    
     u(its:ite,jts,k) = -tmpu*cos(xlon(its:ite)) -tmpv*sin(xlon(its:ite))
     v(its:ite,jts,k) =  tmpu*sin(xlon(its:ite)) -tmpv*cos(xlon(its:ite))
   end if
!
   tmp_u =0.0
   tmp_v =0.0
   tmpu = 0.
   tmpv = 0.

   if( jte == jde) then 
      tmp_u = tmpvar*sum(-u(its:ite,jte-1,k)*cos(xlon(its:ite))& 
                         -v(its:ite,jte-1,k)*sin(xlon(its:ite)))
      tmp_v = tmpvar*sum( u(its:ite,jte-1,k)*sin(xlon(its:ite))& 
                         -v(its:ite,jte-1,k)*cos(xlon(its:ite)))
   end if
#ifdef DM_PARALLEL
   call MPI_ALLREDUCE(tmp_u,tmpu,1, MPI_REAL8, MPI_SUM, MPI_COMM_WORLD, IERROR )
   call MPI_ALLREDUCE(tmp_v,tmpv,1, MPI_REAL8, MPI_SUM, MPI_COMM_WORLD, IERROR )
   tmpu =tmpu
   tmpv =tmpv
#else
   tmpu = tmp_u                    
   tmpv = tmp_v                    
#endif
   if( jte == jde) then 
     u(its:ite,jte,k) = -tmpu*cos(xlon(its:ite)) +tmpv*sin(xlon(its:ite))
     v(its:ite,jte,k) = -tmpu*sin(xlon(its:ite)) -tmpv*cos(xlon(its:ite))
   end if
 end do
END SUBROUTINE DA_GET_VPoles
