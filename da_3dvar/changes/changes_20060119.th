Change Log for update to WRF 3DVAR code
---------------------------------------

Author: Tom Henderson
Reviewer: Dale Barker
Date: 01/19/06


Reason for changes (explain before making changes)
--------------------------------------------------

Added ability to obtain bitwise-identical results when 3dvar is run 
on different process configurations (serial vs. 1-MPI, vs, 4-MPI, etc.).  
This feature is required for WRF model testing and will be used when we 
finish the re-integration of the WRFVAR and WRF repositories.  By default, 
this new ability is turned off.  Note that this new feature has only been 
tested for the wrf_2000012412 test suite.  Inexact sums not executed by this 
test suite have *not* been upgraded with bitwise-exact versions!  

New namelist variable TESTING_DM_BITWISE_EXACT in namelist /record10/ can be 
used to turn on this new ability at runtime.  When enabled, 
TESTING_DM_BITWISE_EXACT replaces inexact summation reductions of 
floating-point values (via wrf_dm_sum_real() and friends which all call 
MPI_REDUCE) with slower bitwise exact summations that preserve order of 
operands.  

(I also made changes to wrfvar_regtest to support testing of this new 
feature.  These changes are not described here.)  

Also moved 3dvar code base closer to WRF in several areas.  This includes:  
 1. Replaced direct MPI calls with calls to WRF framework routines 
   (wrf_dm_sum_real, wrf_dm_sum_integer, etc.) and eliminated most 
   "#ifdef DM_PARALLEL" cpp blocks.  
 2. Eliminated of D3VAR_IRY_KLUDGE.  
 3. Improved handling of compiler auto-promotion (use of getrealmpitype(), 
    etc.). 
 4. Fixed misleading patch bounds metadata (WEST-EAST_PATCH_START_UNSTAG, 
    etc.).  
 5. Fixed other miscellaneous bugs (diffwrf, etc.).  


Expected Differences
--------------------

Memory is unchanged when TESTING_DM_BITWISE_EXACT is .FALSE. (default).  
When TESTING_DM_BITWISE_EXACT is set to .TRUE. more memory will be used 
because bitwise exact summations are implemented as gather followed by 
serial summation.  

CPU is unchanged when TESTING_DM_BITWISE_EXACT is .FALSE. (default).  One 
exception to this is on AIX where I changed compiler optimization for the 
serial build to match compiler optimization in the parallel build.  See notes 
below for more details.  
When TESTING_DM_BITWISE_EXACT is set to .TRUE. run time will be longer 
(sometimes much longer) because serial summation does not scale.  

Accuracy is unchanged.  These changes have no effect on scientific results.  


Test results (run on which machines?)
------------------------------------------------------

On bluevista and bluesky (AIX), with TESTING_DM_BITWISE_EXACT turned off, 
all tests in wrf_2000012412, wrf_2002080300, afwa_wrf_2003070806, and 
kma_wrf_2002083100, failing or not, produce identical ASCII files as they did 
before my changes (except for wall-clock times which are expected to differ).  
Note that binary files differ for cases where I have changed compiler 
optimization, as expected.  They also differ by a handful of bytes in cases 
where compiler optimization has not changed due to changes in metadata, also 
as expected.  All tests that fail at top-of-repository before my changes still 
fail.

On bluevista, the TESTING_DM_BITWISE_EXACT feature works for the 
wrf_2000012412 test cases.  Serial vs. 1-MPI vs. 4-MPI match
bit-for-bit in wrf_3dvar_output files when TESTING_DM_BITWISE_EXACT is set to 
.TRUE. .

On ocotillo (Linux-PGI), with TESTING_DM_BITWISE_EXACT turned off, all tests 
in wrf_2000012412 pass and produce identical ASCII files as they did before my 
changes (except for wall-clock times which are expected to differ).  
Binary files have slight differences (0-14 bytes) as observed on bluevista 
(and as expected).


------------------------------------------------------------------------------
Files removed:
--------------

da_3dvar/src/DA_Tools/da_dot.inc


Files added:
------------

da_3dvar/changes/changes_20060119.th
da_3dvar/src/DA_Minimisation/da_dot_cv.inc
da_3dvar/src/DA_Sound/DA_Sonde_sfc/compute_jo_sonde_sfc_uvtq.inc
da_3dvar/src/DA_Sound/compute_jo_sound_uvtq.inc
da_3dvar/src/DA_Synop/compute_jo_synop_uvtq.inc
da_3dvar/src/par_util/cv_to_global.inc
da_3dvar/src/par_util/generic_boilerplate.m4
da_3dvar/src/par_util/generic_methods.inc
da_3dvar/src/par_util/generic_typedefs.inc
da_3dvar/src/par_util/specific_methods.inc
da_3dvar/src/par_util/y_facade_to_global.inc


Files modified:
---------------

Unless otherwise indicated, modifications were made to implement the new 
TESTING_BITWISE_EXACT feature.  For other changes, explanation appears inside 
parenthesis.  Numerals inside parenthesis refer to the enumerated list at the 
end of the "Reason for changes" section (above).  

Makefile  (1)
arch/configure.defaults_3dvar
arch/preamble_3dvar  (3)
arch/preamble_wrfvar  (3)
da_3dvar/src/DA_Constants/DA_Constants.F
da_3dvar/src/DA_Define_Structures/DA_Define_Structures.F
da_3dvar/src/DA_FFTs/DA_Solve_PoissonEqn_FCT.inc  (1)
da_3dvar/src/DA_FFTs/DA_Solve_PoissonEqn_FCT_Adj.inc  (1)
da_3dvar/src/DA_Gen_Be_Stats/DA_Gen_Be_Stats.F  (1)
da_3dvar/src/DA_Gpspw/DA_AO_Stats_Gpspw.inc  (1)
da_3dvar/src/DA_Gpsref/DA_AO_Stats_Gpsref.inc  (1)
da_3dvar/src/DA_Minimisation/DA_Minimisation.F
da_3dvar/src/DA_Minimisation/DA_Minimise_CG.inc
da_3dvar/src/DA_Minimisation/DA_Minimise_QN.inc
da_3dvar/src/DA_Minimisation/da_calculate_j.inc
da_3dvar/src/DA_Minimisation/da_dot.inc
da_3dvar/src/DA_Minimisation/da_get_var_diagnostics.inc
da_3dvar/src/DA_Minimisation/da_lmdir.inc
da_3dvar/src/DA_Minimisation/da_va15bd.inc
da_3dvar/src/DA_Minimisation/da_vd05ad.inc
da_3dvar/src/DA_Obs/DA_Read_Obs.inc
da_3dvar/src/DA_Physics/da_filter.inc  (1)
da_3dvar/src/DA_Physics/da_filter_adj.inc  (1)
da_3dvar/src/DA_Recursive_Filter/DA_Transform_Through_RF.inc  (5)
da_3dvar/src/DA_Recursive_Filter/DA_Transform_Through_RF_Adj.inc  (5)
da_3dvar/src/DA_SSMI/DA_AO_Stats_SSMI.inc  (1)
da_3dvar/src/DA_SSMI/DA_OI_Stats_SSMI.inc  (1)
da_3dvar/src/DA_Setup_Structures/da_setup_firstguess_wrf.inc  (1)
da_3dvar/src/DA_Setup_Structures/da_setup_obs_structures.inc
da_3dvar/src/DA_Setup_Structures/da_setup_obs_structures_ascii.inc
da_3dvar/src/DA_Setup_Structures/da_transfer_kmatoxb.inc
da_3dvar/src/DA_Setup_Structures/da_transfer_wrftltoxa.inc  (1)
da_3dvar/src/DA_Setup_Structures/da_transfer_wrftoxb.inc
da_3dvar/src/DA_Setup_Structures/da_transfer_xatowrf.inc  (1)
da_3dvar/src/DA_Setup_Structures/da_transfer_xatowrftl_adj.inc  (1)
da_3dvar/src/DA_Sound/DA_Calculate_Jo_and_GradY_Sound.inc
da_3dvar/src/DA_Sound/DA_Sonde_sfc/DA_Get_Jo_and_GradY_Sonde_sfc.inc
da_3dvar/src/DA_Sound/DA_Sound.F
da_3dvar/src/DA_Statistics/DA_Analysis_Stats.inc  (1)
da_3dvar/src/DA_Synop/DA_Calculate_Jo_and_GradY_Synop.inc
da_3dvar/src/DA_Synop/DA_Synop.F
da_3dvar/src/DA_Test/DA_Check_CvToVv_Adjoint.inc  (1)
da_3dvar/src/DA_Test/DA_Check_VToX_Adjoint.inc  (1)
da_3dvar/src/DA_Test/DA_Check_VpToX_Adjoint.inc  (1)
da_3dvar/src/DA_Test/DA_Check_VvToVp_Adjoint.inc  (1)
da_3dvar/src/DA_Test/DA_Check_XToY_Adjoint.inc  (1)
da_3dvar/src/DA_Test/DA_Test.F  (1)
da_3dvar/src/DA_Test/check_sfc_assi.inc  (1)
da_3dvar/src/DA_Tools/DA_Read_Namelist.inc
da_3dvar/src/DA_Tools/DA_ll_to_xy.inc
da_3dvar/src/DA_Tools/get_2d_sum.inc  (1)
da_3dvar/src/DA_Tools/get_3d_sum.inc  (1)
da_3dvar/src/DA_VToX_Transforms/DA_Get_ASPoles.inc  (1)
da_3dvar/src/DA_VToX_Transforms/DA_Get_AVPoles.inc  (1)
da_3dvar/src/DA_VToX_Transforms/DA_Get_SPoles.inc  (1)
da_3dvar/src/DA_VToX_Transforms/DA_Get_VPoles.inc  (1)
da_3dvar/src/DA_VToX_Transforms/DA_Transform_VToVv.inc
da_3dvar/src/DA_VToX_Transforms/DA_Transform_VToVv_Adj.inc
da_3dvar/src/DA_VToX_Transforms/DA_VToX_Transforms.F  (1)
da_3dvar/src/DA_VToX_Transforms/da_apply_be.inc
da_3dvar/src/DA_VToX_Transforms/da_apply_be_adj.inc
da_3dvar/src/Makefile
da_3dvar/src/par_util/cv_to_vv.inc
da_3dvar/src/par_util/par_util.F
da_3dvar/src/par_util/transpose.inc  (1)
da_3dvar/src/par_util/vv_to_cv.inc
external/RSL/module_dm.F  (1, 2, 3)
external/RSL_LITE/module_dm.F  (1, 3)
external/io_netcdf/diffwrf.F90  (5)
frame/module_dm_stubs.F  (1)
share/output_wrf.F  (2, 3)
tools/registry.c  (2)


Tag:

TESTING_DM_BITWISE_EXACT


NOTES:  

AIX compiler optimization
  Shortly before Wei Huang left, he reduced compiler optimization for the 
  distribute-memory parallel build on AIX in arch/configure.defaults_3dvar to 
  work around a compilation failure for one source file ("-O2" was reduced to 
  "-O0").  I changed the compiler options in the serial build to match so we 
  can get bit-for-bit agreement between serial and MPI configurations.  The 
  correct fix is to add a special build rule for the one file that caused the 
  AIX compiler to choke and then restore both serial and parallel 
  configurations to higher compiler optimization levels.  We can always build 
  with optimization turned off to demonstrate bit-for-bit between serial, 
  1-MPI, 4-MPI (etc.).  Wei Huang believes that the offending source file is 
  da_3dvar/src/DA_Setup_Structures/DA_Setup_Structures.F .  
  
TEST_COVERAGE
  Debug print statements containing the string "TEST_COVERAGE" remain in 
  several files.  I added these when testing the replacement of direct MPI 
  calls with calls to WRF framework routines (#1 above).  During testing, 
  I removed every one of these print statements that was actually executed.  
  So, the remaining statements indicate untested code.  

Halo updates
  In da_3dvar/src/DA_Setup_Structures/da_transfer_xatowrf.inc, the following 
  comment appears:  
  !TBH:  NOTE that xp%halo_id3 = HALO_PSICHI_UV_ADJ which is currently defined 
  !TBH:  in the Registry as "dyn_em 24:xa%u,xa%v,xa%psfc".  Clearly it is not 
  !TBH:  necessary to update halos in xa%psfc here!  Also, 24-point stencil is 
  !TBH:  too thick, 9-point should suffice.  Apparently, xp%halo_id3 is used 
  !TBH:  in many places!  This needs to be fixed.  
  The problem is not limited to this single file.  Inventory of halo updates 
  and optimization needs to be done.  

QN Minimization
  The Quasi-Newton minimization method depends on global summation reductions 
  across all observations (of each type).  This requires that serial ordering 
  of these observations be recorded during parallel runs so operands can be 
  assembled in serial order prior to bitwise-exact summations.  Dale is 
  planning to remove QN minimization.  Once this is done, the bits of code 
  that deal with serial ordering can be removed.  


TO DO List:  

  Immediate tasks:
    - Test to see which of the other test cases (other than
      wrf_2000012412) are bit-for-bit when bitwise-exact is turned on.
    - Test on >8 MPI tasks
    - Create a process for testing addition of other obs to bitwise-exact test 
      cases.  
    - Extend TESTING_BITWISE_EXACT to "global" (fg_format==3) case.  

  Merge TODO:
    - Modify wrfvar_regtest to call Dale's DA_Run_WRF-Var.csh script instead 
      of the current method.  
    - Add summary PASS/FAIL output to wrfvar regtest scripts for merge with 
      WRF regtest.csh.  
    - Copy 3dvar test data to a location agreed upon with Dave Gill and modify 
      wrfvar regtest scripts accordingly.  
    - Modify WRF regtest.csh to call wrfvar_regtest.  
    - Ensure that registry-generation tools are up-to-date.  
    - Merge wrf and wrfvar repositories and test both.  See 
      /users/hender/Tasks/WRFVAR/MergeEstimate for much more 
      details.  

  Other wrfvar TODO:
    - Why does wrf_2002080300/min_1_cv_3_mo_2_bufr dump core?
    - Get rid of remaining DM_PARALLEL cpp directives
      - the "easy" cases (i.e. most of them) are gone already
    - Finish refactoring y_facade_to_global
      - Shove "template" down into y_facade?  This would simplify upper
        interfaces a bit...  See to_global_sound() (etc.)...
      - OR rip this all out since QN minimization is going away!  
    - DA_Read_SSMI() (delete?)
    - DA_Read_Obs_Bufr() name???  (obs_format==1)
    - DA_Read_Radar()
    - Test with print_detail > 0
    - What to do about "global" case?  Not yet parallel...
      - Incredible that "fg_format==3" implies "global" ain't it?  Looks
        like there's a "global" namelist variable too!!!
    - Need to handle input formats other than ASCII.
    - Verify that asymmetric halo is correct.  Al used to have a symmetric
      halo of uniform width == 1.  There are i+1 and j+1 dependences in
      the code!!
      - hard-coded asymmetric "obs halo" appears in many places
    - be_local_copy is dead code


