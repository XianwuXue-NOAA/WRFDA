Feb 27, 2003, JM

This is a version of the WRF/NMM software inegration that has the
NMM code provided by Tom Black and worked on by Jon Wolfe (NCAR/SCD)
and then John Michalakes during visit to NCEP Jan 27-30 integrated
into the latest version of the WRF software, including other new
cores and new build mechanism for selecting cores at compile-time.

The ./compile script at the top level has been updated to all for easy
selection of cores at compile time.  In this version being sent back to
NCEP the NMM core is already the default and no additional action is
required.  If you wish to compile cores other than the NMM core,
please note the following:

   - Specify other core options by setting an environment variable
     for each core you wish compiled (example is csh or tcsh):

           setenv WRF_EM_CORE 1
           setenv WRF_EH_CORE 1

     If these are set in the environment then the default core in the
     compile script will be disregarded and only the cores specified
     in the environment will be compiled.

   - The Registry files for NMM and the other cores are not integrated
     yet. There are separate versions:

          Registry/Registry.NMM       <-- for NMM
          Registry/Registry.GRAPS     <-- for GRAPS  (CMA model)
          Registry/Registry.EM_EH     <-- Eulerian Height/Mass

     It is necessary to copy the correct version into:

          Registry/Registry

     before executing the ./compile script.

   - If NMM is compiled, it must be the only core compiled (simply
     type ./compile with no other cores specified in the environment
     or specify 

          setenv WRF_NMM_CORE 1

     by itself in the environment.  It is possible to compile the
     other cores only if NMM is not specified.  Future work will
     further integrate the NMM core into WRF so that it can 
     coexist with other cores in the same compiled executable.

-------------

* To compile.  Take note of the above instructions, then in 
               the main directory above dyn_nmm:

   configure
   compile nmm_real

The resulting executables are:

   test/nmm_real/convert_nmm.exe    (data converter)
   test/nmm_real/wrf.exe            (model with nmm)

Namelist file and input data are also in test/nmm_real dir.

To run:

    cd test/nmm_real
    convert_nmm.exe

After the files are converted, type:

    wrf.exe

to run the code.

-------------------
IMPORTANT FACTOIDS:
-------------------

The convert_nmm.exe job reads the nmm input files and produces the
wrfinput_d01 and wrfbdy_d01 files. (These are in the WRF I/O format).
You must rerun the convert job if you change the io_form variables.
The io_form variables should be 1 for binary; 2 for NetCDF.(?)

Use frames_per_outfile=1 to get one output file per output time.

For extraneous writes, call int_get_fresh_handle(retval) to get a
valid output unit number (integer retval); then just open and write.

To find a task's ID, call wrf_get_myproc(myproc).  To get the total
number of tasks, call wrf_get_nproc(nproc).  To get the number of
tasks in the I and J directions, call wrf_get_nprocx(nprocx) and
call wrf_get_nprocy(nprocy), respectively.

To compile without doing clean -a:
  cd external/RSL/RSL
  make clean
  rm *.a
  cd ../../..
  clean
  
--------------------------------------------------------------------------

Roadmap through code:

Nearly all of the nmm source files are in the dyn_nmm directory, except
for the convert_nmm.F file and the wrf.F file in the main directory.

The Registry file in Registry/Registry.NMM is set up for the NMM core, only.
It will be straightforward to add the other cores back later, once things
are working with the NMM code. (Just simplifies things).

There is a generic recipe for adding a dynamical core to the WRF framework
in the file Notes_Chandra.txt. These are approximately the steps I used during
my visit to take the NMM code and incorporate it into the WRF framework.

To look at WRF binary input, use

   ../../external/io_int/diffwrf wrfout_d01 T 1

which will list the entire T field for level 1 in fort.88.  


Looking at output:

The code will generate a wrfout* file when it runs.  To extract a field
from this file (or the input file wrfinput_d01) use the following
command (assuming you are in the test/nmm_real dir):

   ../../external/io_netcdf/diffwrf wrfout_d01 T 1

This command will output level 1 of the T field to a file fort.88.
You can look at other fields or other levels by changing the arguments.

To find out what fields are in the file, type:

   ../../external/io_netcdf/diffwrf wrfout_d01 show

There is a viewer, hmv, in my wx22jm/bin directory. To view
the fort.88 file, type

   hmv -3 fort.88


-------
Status of the code:

 Time steps through three steps and generates output, but the
output appears wrong. Rather than spend too much time tracking down
now, giving back to NCEP (Tom Black) for upgrade with respect to
most recent NMM; then will finish up and parallelize that version.

