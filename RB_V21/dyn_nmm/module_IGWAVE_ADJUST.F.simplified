!
!NCEP_MESO:MODEL_LAYER: INERTIAL GRAVITY WAVE ADJUSTMENT
!

#include "nmm_loop_basemacros.h"
#include "nmm_loop_macros.h"

!-----------------------------------------------------------------------
!
      MODULE MODULE_IGWAVE_ADJUST
!
!-----------------------------------------------------------------------
      USE MODULE_MODEL_CONSTANTS
!     USE MODULE_TIMERS  ! this one creates a name conflict at compile time
!-----------------------------------------------------------------------
!***
!***  SPECIFY THE NUMBER OF TIMES TO SMOOTH THE VERTICAL VELOCITY
!***  AND THE NUMBER OF ROWS FROM THE NORTHERN AND SOUTHERN EDGES
!***  OF THE GLOBAL DOMAIN BEYOND WHICH THE SMOOTHING DOES NOT GO
!***  FOR SUBROUTINE PDTE
!
      INTEGER :: KSMUD=0,LNSDT=7
!
!-----------------------------------------------------------------------
!
      CONTAINS
!
!***********************************************************************
      SUBROUTINE PFDHT(NTSD,LAST_TIME,PT,DETA1,DETA2,PDTOP,RES,FIS      &
     &                ,HYDRO,SIGMA,FIRST,DX,DY                          &
     &                ,HTM,HBM2,VTM,VBM2,VBM3                           &
     &                ,FDIV,FCP,WPDAR,DFL,CPGFU,CPGFV                   &
     &                ,PD,PDSL,T,Q,U,V,CWM,OMGALF,PINT,DWDT             &
     &                ,RTOP,DIV,FEW,FNS,FNE,FSE                         &
     &                ,IHE,IHW,IVE,IVW,INDX3_WRK                        &
     &                ,IDS,IDE,JDS,JDE,KDS,KDE                          &
     &                ,IMS,IME,JMS,JME,KMS,KME                          &
     &                ,ITS,ITE,JTS,JTE,KTS,KTE)
!***********************************************************************
!$$$  SUBPROGRAM DOCUMENTATION BLOCK
!                .      .    .
! SUBPROGRAM:    PFDHT       DIVERGENCE/HORIZONTAL OMEGA-ALPHA
!   PRGRMMR: JANJIC          ORG: W/NP22     DATE: 93-10-28
!
! ABSTRACT:
!     PFDHT CALCULATES THE PRESSURE GRADIENT FORCE, UPDATES THE
!     VELOCITY COMPONENTS DUE TO THE EFFECT OF THE PRESSURE GRADIENT
!     AND CORIOILS FORCES, COMPUTES THE DIVERGENCE INCLUDING THE
!     MODIFICATION PREVENTING GRAVITY WAVE GRID SEPARATION, AND
!     CALCULATES THE HORIZONTAL PART OF THE OMEGA-ALPHA TERM.
!     (THE PART PROPORTIONAL TO THE ADVECTION OF MASS ALONG
!      COORDINATE SURFACES).
!
! PROGRAM HISTORY LOG:
!   87-06-??  JANJIC     - ORIGINATOR
!   95-03-25  BLACK      - CONVERSION FROM 1-D TO 2-D IN HORIZONTAL
!   96-03-29  BLACK      - ADDED EXTERNAL EDGE
!   98-10-30  BLACK      - MODIFIED FOR DISTRIBUTED MEMORY
!   02-02-01  BLACK      - REWRITTEN FOR WRF CODING STANDARDS
!   04-02-17  JANJIC     - REMOVED UPDATE OF TEMPERATURE
!
! USAGE: CALL PFDHT FROM MAIN PROGRAM SOLVE_RUNSTREAM
!   INPUT ARGUMENT LIST:
!
!   OUTPUT ARGUMENT LIST:
!
!   OUTPUT FILES:
!     NONE
!
!   SUBPROGRAMS CALLED:
!
!     UNIQUE: NONE
!
!     LIBRARY: NONE
!
! ATTRIBUTES:
!   LANGUAGE: FORTRAN 90
!   MACHINE : IBM SP
!$$$  
!----------------------------------------------------------------------
!**********************************************************************
!----------------------------------------------------------------------
      IMPLICIT NONE
!----------------------------------------------------------------------
!----------------------------------------------------------------------
      LOGICAL,INTENT(IN) :: FIRST,HYDRO
      INTEGER,INTENT(IN) :: SIGMA
!
      INTEGER,INTENT(IN) :: IDS,IDE,JDS,JDE,KDS,KDE                     &
     &                     ,IMS,IME,JMS,JME,KMS,KME                     &
     &                     ,ITS,ITE,JTS,JTE,KTS,KTE
!
      INTEGER, DIMENSION(JMS:JME),INTENT(IN) :: IHE,IHW,IVE,IVW
!
!***  NMM_MAX_DIM is set in configure.wrf and must agree with
!***  the value of dimspec q in the Registry/Registry
!
      INTEGER,DIMENSION(-3:3,NMM_MAX_DIM,0:6),INTENT(IN) :: indx3_wrk
!
      INTEGER,INTENT(IN) :: NTSD
      LOGICAL,INTENT(IN) :: LAST_TIME
!
      REAL,INTENT(IN) :: CPGFV,DY,PDTOP,PT
!
      REAL,DIMENSION(KMS:KME-1),INTENT(IN) :: DETA1,DETA2
!
      REAL,DIMENSION(KMS:KME),INTENT(IN) :: DFL
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(IN) :: CPGFU,DX,FCP,FDIV   &
     &                                             ,PD,FIS,RES,WPDAR    &
     &                                             ,HBM2,VBM2,VBM3
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(IN) :: CWM,DWDT    &
     &                                                     ,Q,T,HTM,VTM
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(IN) :: PINT
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: DIV      &
     &                                                        ,OMGALF   &
     &                                                        ,RTOP,U,V
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(OUT) :: FEW,FNS    &
     &                                                      ,FNE,FSE
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(OUT) :: PDSL

!----------------------------------------------------------------------
!
!***  LOCAL VARIABLES
!
      INTEGER :: I,J,K

                             REAL                                       &
     & FILO  (its-5:ite+5,jts-5:jte+5),fim   (its-5:ite+5,jts-5:jte+5)  &
     &,RDPD  (its-5:ite+5,jts-5:jte+5)                                  &
     &,ADPDX (its-5:ite+5,jts-5:jte+5),RDPDX (its-5:ite+5,jts-5:jte+5)  &
     &,ADPDY (its-5:ite+5,jts-5:jte+5),RDPDY (its-5:ite+5,jts-5:jte+5)  &
     &,ADPDNE(its-5:ite+5,jts-5:jte+5),ADPDSE(its-5:ite+5,jts-5:jte+5)  &
     &,UDY   (its-5:ite+5,jts-5:jte+5),VDX   (its-5:ite+5,jts-5:jte+5)  &
     &,PEW   (its-5:ite+5,jts-5:jte+5),PNS   (its-5:ite+5,jts-5:jte+5)  &
     &,PCEW  (its-5:ite+5,jts-5:jte+5),PCNS  (its-5:ite+5,jts-5:jte+5)  &
     &,DPFEW (its-5:ite+5,jts-5:jte+5),DPFNS (its-5:ite+5,jts-5:jte+5)  &
     &,TNS   (its-5:ite+5,jts-5:jte+5)                                  &
     &,HM    (its-5:ite+5,jts-5:jte+5)
!
                             REAL                                       &
     & DPDE  (its-5:ite+5,jts-5:jte+5)                                  &
     &,APEL  (its-5:ite+5,jts-5:jte+5),PCXC  (its-5:ite+5,jts-5:jte+5)  &
     &,DFDZ  (its-5:ite+5,jts-5:jte+5)                                  &
     &,TEW   (its-5:ite+5,jts-5:jte+5)                                  &
     &,TNE   (its-5:ite+5,jts-5:jte+5),TSE   (its-5:ite+5,jts-5:jte+5)  &
     &,PNE   (its-5:ite+5,jts-5:jte+5),PSE   (its-5:ite+5,jts-5:jte+5)  &
     &,CNE   (its-5:ite+5,jts-5:jte+5),CSE   (its-5:ite+5,jts-5:jte+5)  &
     &,PPNE  (its-5:ite+5,jts-5:jte+5),PPSE  (its-5:ite+5,jts-5:jte+5)  &
     &,PCNE  (its-5:ite+5,jts-5:jte+5),PCSE  (its-5:ite+5,jts-5:jte+5)

      REAL apelp,rtopp,dfi,fiupp,dpnek,dpsek,dcnek,dcsek
      REAL dpfnek,dpfsek,vm,pvnek,pvsek

!----------------------------------------------------------------------
!**********************************************************************
!
!                                       
!                CSE                          CSE            -------  1
!                 *                            *  
!                 *                            *    
!       *******   *                  *******   *   
!      *       *  *                 *       *  *  
!   CNE         * *              CNE         * *       
!               TEW----------OMGALF----------TEW             -------  0
!   CSE         * *              CSE         * *         
!      *       *  *                 *       *  *       
!       *******   *                  *******   *     
!                 *                            *   
!                 *                            * 
!                CNE                          CNE            ------- -1
!                                        
!
!
! 
!**********************************************************************
! 
!                              CSE                           -------  2
!                               *
!                               *
!                               *
!                               *
!                      CNE*****TNS                           -------  1
!                      CSE     | *
!                              | *
!                              | *
!                              | *
!                              | CNE
!                            OMGALF                          -------  0
!                              | CSE
!                              | *
!                              | *
!                              | *
!                      CNE     | *
!                      CSE*****TNS                           ------- -1
!                               *
!                               *
!                               *
!                               *
!                              CNE                           ------- -2
! 
!**********************************************************************
!----------------------------------------------------------------------
!***  PREPARATORY CALCULATIONS
!----------------------------------------------------------------------
!      call hpm_start('PFDHT')
! zero out temporaries.

#ifdef DEC_ALPHA
FILO    =   0.  ;   FIM     =   0.  ;   RDPD    =   0.  ;
ADPDX   =   0.  ;   RDPDX   =   0.  ;   ADPDY   =   0.  ;
RDPDY   =   0.  ;   ADPDNE  =   0.  ;   ADPDSE  =   0.  ;
UDY     =   0.  ;   VDX     =   0.  ;   PEW     =   0.  ;
PNS     =   0.  ;   PCEW    =   0.  ;   PCNS    =   0.  ;
DPFEW   =   0.  ;   DPFNS   =   0.  ;   TNS     =   0.  ;
HM      =   0.  ;   DPDE    =   0.  ;   APEL    =   0.  ;
PCXC    =   0.  ;   DFDZ    =   0.  ;   TEW     =   0.  ;
TNE     =   0.  ;   TSE     =   0.  ;   PNE     =   0.  ;
PSE     =   0.  ;   CNE     =   0.  ;   CSE     =   0.  ;
PPNE    =   0.  ;   PPSE    =   0.  ;   PCNE    =   0.  ;
PCSE    =   0.  ;
#endif
!
      PDSL = 0.
      OMGALF = 0.
      DIV = 0.

      IF(SIGMA)THEN
!$omp parallel do
!zj 4 changed to 5
        DO 50 J=MYJS_P5,MYJE_P5
        DO 50 I=MYIS_P5,MYIE_P5
        FILO(I,J)=FIS(I,J)
        PDSL(I,J)=PD(I,J)
   50   CONTINUE
      ELSE
!$omp parallel do
        DO 100 J=MYJS_P5,MYJE_P5
        DO 100 I=MYIS_P5,MYIE_P5
        PDSL(I,J)=RES(I,J)*PD(I,J)
  100   CONTINUE
      ENDIF
!
!-------------------- MAIN VERTICAL INTEGRATION LOOP -------------------
!$omp parallel do
!$omp& private(adpdne,adpdse,adpdx,adpdy,
!$omp&         apel,cne,cse,dcnek,dcsek,dfdz,dpde,dpfew,dpfnek,
!$omp&         dpfns,dpfsek,dpnek,few,fne,fns,fse,hm,
!$omp&         pcew,pcne,pcns,pcse,pcxc,pew,pne,pns,ppne,ppse,
!$omp&         pse,pvnek,pvsek,rdpd,rdpdx,rdpdy,tew,tne,tns,tse,
!$omp&         udy,vdx,vm,
!$omp&         i,j,k,
!$omp&         apelp,rtopp,dfi,fiupp,dpnek,dpsek,dcnek,dcsek
!$omp&         dpfnek,dpfsek,vm,pvnek,pvsek)
!-----------------------------------------------------------------------
                             do 400 k=kts,kte
!-----------------------------------------------------------------------
      DO 205 J=MYJS_P4,MYJE_P4
      DO 205 I=MYIS_P4,MYIE_P4
!
      HM(I,J)=HTM(i,k,j)*HBM2(I,J)
!
      apelp=(pint(i,k,j)+pint(i,k+1,j))*0.5
      rtopp=(q(i,k,j)*0.608-cwm(i,k,j)+1.)*t(i,k,j)*r_d/apelp
      dfi=rtopp*(deta1(k)*pdtop+deta2(k)*pdsl(i,j))
!
      apel(i,j)=apelp
      rtop(i,k,j)=rtopp
      dfdz(i,j)=rtopp
!
      fiupp=filo(i,j)+dfi
!
      fim(i,j)=filo(i,j)+fiupp
!
      filo(i,j)=(fiupp-dfl(k))*htm(i,k,j)+dfl(k)
  205 CONTINUE
!
      DO 210 J=MYJS_P4,MYJE_P4
      DO 210 I=MYIS_P4,MYIE_P4
      dpde(i,j)=deta1(k)*pdtop+deta2(k)*pdsl(i,j)
  210 CONTINUE
!
      DO 215 J=MYJS,MYJE
      DO 215 I=MYIS,MYIE
      RDPD(I,J)=1./DPDE(I,J)
  215 CONTINUE
!
      DO 220 J=MYJS1_P3,MYJE1_P3
      DO 220 I=MYIS_P3,MYIE_P3
      ADPDX(I,J)=DPDE(I+IVW(J),J)+DPDE(I+IVE(J),J)
      ADPDY(I,J)=DPDE(I,J-1)+DPDE(I,J+1)
      RDPDX(I,J)=1./ADPDX(I,J)
      RDPDY(I,J)=1./ADPDY(I,J)
  220 CONTINUE
!
!--------------DIAGONAL CONTRIBUTIONS TO PRESSURE GRADIENT FORCE--------
!
      DO 240 J=MYJS_P3,MYJE1_P3
      DO 240 I=MYIS_P3,MYIE_P3
      ADPDNE(I,J)=DPDE(I+IHE(J),J+1)+DPDE(I,J)
      PNE(I,J)=(FIM (I+IHE(J),J+1)-FIM (I,J))                           &
     &        *(DWDT(I+IHE(J),K,J+1)+DWDT(i,k,j))
      PPNE(I,J)=PNE(I,J)*ADPDNE(I,J)
      CNE(I,J)=(DFDZ(I+IHE(J),J+1)+DFDZ(I,J))*2.                        &
              *(APEL(I+IHE(J),J+1)-APEL(I,J))
      PCNE(I,J)=CNE(I,J)*ADPDNE(I,J)
  240 CONTINUE
!
      DO 250 J=MYJS1_P3,MYJE_P3
      DO 250 I=MYIS_P3,MYIE_P3
      ADPDSE(I,J)=DPDE(I+IHE(J),J-1)+DPDE(I,J)
      PSE(I,J)=(FIM (I+IHE(J),J-1)-FIM (I,J))                           &
     &        *(DWDT(I+IHE(J),k,J-1)+DWDT(i,k,j))
      PPSE(I,J)=PSE(I,J)*ADPDSE(I,J)
      CSE(I,J)=(DFDZ(I+IHE(J),J-1)+DFDZ(I,J))*2.                        &
     &        *(APEL(I+IHE(J),J-1)-APEL(I,J))
      PCSE(I,J)=CSE(I,J)*ADPDSE(I,J)
  250 CONTINUE
!
!--------------CONTINUITY EQUATION MODIFICATION-------------------------
!
      DO 260 J=MYJS1_P1,MYJE1_P1
      DO 260 I=MYIS_P1,MYIE_P1
      PCXC(I,J)=VBM3(I,J)*VTM(i,k,j)*(PNE(I+IVW(J),J)                   &
     &         +CNE(I+IVW(J),J)+PSE(I+IVW(J),J)+CSE(I+IVW(J),J)         &
     &         -PNE(I,J-1)-CNE(I,J-1)-PSE(I,J+1)-CSE(I,J+1))
  260 CONTINUE
!-----------------------------------------------------------------------
      DO 270 J=MYJS2,MYJE2
      DO 270 I=MYIS1,MYIE1
      div(i,k,j)=(deta1(k)*pdtop/(101300.-pt)                           &
     &           +deta2(k)*(1.-pdtop/(101300.-pt)))                     &
     &         *wpdar(i,j)                                              &
     &         *(PCXC(I+IHE(J),J)-PCXC(I,J+1)                           &
     &          +PCXC(I+IHW(J),J)-PCXC(I,J-1))
  270 CONTINUE
!
!--------------LAT & LONG PRESSURE FORCE COMPONENTS---------------------
!
      DO 280 J=MYJS1_P2,MYJE1_P2
      DO 280 I=MYIS_P2,MYIE_P3
      DPNEK=PNE(I+IVW(J),J)+PNE(I,J-1)
      DPSEK=PSE(I+IVW(J),J)+PSE(I,J+1)
      PEW(I,J)=DPNEK+DPSEK
      PNS(I,J)=DPNEK-DPSEK
      DCNEK=CNE(I+IVW(J),J)+CNE(I,J-1)
      DCSEK=CSE(I+IVW(J),J)+CSE(I,J+1)
      PCEW(I,J)=(DCNEK+DCSEK)*ADPDX(I,J)
      PCNS(I,J)=(DCNEK-DCSEK)*ADPDY(I,J)
  280 CONTINUE
!
!--------------FIRST PASS SWITCH----------------------------------------
      IF(FIRST)GO TO 305
!
!--------------UPDATE U AND V PGF---------------------------------------
!
      DO 290 J=MYJS2_P2,MYJE2_P2
      DO 290 I=MYIS_P2,MYIE1_P2
      DPFNEK=((PPNE(I+IVW(J),J)+PPNE(I,J-1))                            &
     &       +(PCNE(I+IVW(J),J)+PCNE(I,J-1)))
      dpfnek=dpfnek+dpfnek
      DPFSEK=((PPSE(I+IVW(J),J)+PPSE(I,J+1))                            &
     &       +(PCSE(I+IVW(J),J)+PCSE(I,J+1)))
      dpfsek=dpfsek+dpfsek
      DPFEW(I,J)=DPFNEK+DPFSEK
      DPFNS(I,J)=DPFNEK-DPFSEK
  290 CONTINUE
!-----------------------------------------------------------------------
      DO 300 J=MYJS2_P3,MYJE2_P3
      DO 300 I=MYIS_P2,MYIE1_P2
        VM=VTM(i,k,j)*VBM2(I,J)
        U(i,k,j)=(((DPFEW(I,J)+PCEW(I,J))*RDPDX(I,J)                    &
     &             +PEW(I,J))*CPGFU(I,J))*VM+U(i,k,j)
        V(i,k,j)=(((DPFNS(I,J)+PCNS(I,J))*RDPDY(I,J)                    &
     &             +PNS(I,J))*CPGFV)*VM+V(i,k,j)
  300 CONTINUE
!
!--------------LAST PASS SWITCH-----------------------------------------
      IF(LAST_TIME)GO TO 400
!-----------------------------------------------------------------------
 305  CONTINUE
!
!--------------LAT & LON FLUXES & OMEGA-ALPHA COMPONENTS----------------
!
      DO 310 J=MYJS1_P2,MYJE1_P2
      DO 310 I=MYIS_P2,MYIE_P3
      UDY(I,J)=DY*U(i,k,j)
      few(i,k,j)=udy(i,j)*adpdx(i,j)
      TEW(I,J)=UDY(I,J)*PCEW(I,J)
      VDX(I,J)=DX(I,J)*V(i,k,j)
      fns(i,k,j)=vdx(i,j)*adpdy(i,j)
      TNS(I,J)=VDX(I,J)*PCNS(I,J)
  310 CONTINUE
!
!--------------DIAGONAL FLUXES AND DIAGONALLY AVERAGED WIND-------------
!
      DO 320 J=MYJS1_P1,MYJE2_P1
      DO 320 I=MYIS_P1,MYIE1_P1
      PVNEK=(UDY(I+IHE(J),J)+VDX(I+IHE(J),J))+(UDY(I,J+1)+VDX(I,J+1))
      fne(i,k,j)=pvnek*adpdne(i,j)
      TNE(I,J)=PVNEK*PCNE(I,J)*2.
  320 CONTINUE
!
      DO 330 J=MYJS2_P1,MYJE1_P1
      DO 330 I=MYIS_P1,MYIE1_P1
      PVSEK=(UDY(I+IHE(J),J)-VDX(I+IHE(J),J))+(UDY(I,J-1)-VDX(I,J-1))
      fse(i,k,j)=pvsek*adpdse(i,j)
      TSE(I,J)=PVSEK*PCSE(I,J)*2.
  330 CONTINUE
!
!--------------HORIZONTAL PART OF OMEGA-ALPHA & DIVERGENCE--------------
!
      DO 340 J=MYJS2,MYJE2
      DO 340 I=MYIS1,MYIE1

      OMGALF(i,k,j)=(TEW(I+IHE(J),J)+TEW(I+IHW(J),J)+TNS(I,J+1)         &
     &              +TNS(I,J-1)+TNE(I,J)+TNE(I+IHW(J),J-1)+TSE(I,J)     &
     &              +TSE(I+IHW(J),J+1))*RDPD(I,J)*FCP(I,J)*HM(I,J)

!jm removed        T(i,k,j)=OMGALF(i,k,j)+T(i,k,j)
      div(i,k,j)=(((few(i+ihe(j),k,j)+fns(i,k,j+1)                      &
     &             +fne(i,k,j)+fse(i,k,j))                              &
     &            -(few(i+ihw(j),k,j)+fns(i,k,j-1)                      &
     &             +fne(i+ihw(j),k,j-1)+fse(i+ihw(j),k,j+1)))*fdiv(i,j) &
     &           +div(i,k,j))*hm(i,j)

  340 CONTINUE
!-----------------------------------------------------------------------
  400                        CONTINUE
!------------------------------------------------------------------------
                             RETURN
!----------------------------------------------------------------------
!
      END SUBROUTINE PFDHT
!
!-----------------------------------------------------------------------
!***********************************************************************
!-----------------------------------------------------------------------
      SUBROUTINE PDTE(                                                  &
#ifdef DM_PARALLEL
     &                grid,                                             &
#endif
     &                NTSD,DT,PT,ETA2,RES,HYDRO                         &
     &               ,HTM,HBM2                                          &
     &               ,PD,PDSL,PDSLO                                     &
     &               ,PETDT,DIV,PSDT                                    &
     &               ,IHE,IHW,IVE,IVW,INDX3_WRK                         &                 
     &               ,IDS,IDE,JDS,JDE,KDS,KDE                           &
     &               ,IMS,IME,JMS,JME,KMS,KME                           &
     &               ,ITS,ITE,JTS,JTE,KTS,KTE)
!***********************************************************************
!$$$  SUBPROGRAM DOCUMENTATION BLOCK
!                .      .    .     
! SUBPROGRAM:    PDTE        SURFACE PRESSURE TENDENCY CALC
!   PRGRMMR: JANJIC          ORG: W/NP2      DATE: 96-07-??      
!     
! ABSTRACT:
!     PDTE VERTICALLY INTEGRATES THE MASS FLUX DIVERGENCE TO
!     OBTAIN THE SURFACE PRESSURE TENDENCY AND VERTICAL VELOCITY ON
!     THE LAYER INTERFACES.  THEN IT UPDATES THE HYDROSTATIC SURFACE
!     PRESSURE AND THE NONHYDROSTATIC PRESSURE.
!     
! PROGRAM HISTORY LOG:
!   87-06-??  JANJIC     - ORIGINATOR
!   95-03-25  BLACK      - CONVERSION FROM 1-D TO 2-D IN HORIZONTAL
!   96-05-??  JANJIC     - ADDED NONHYDROSTATIC EFFECTS & MERGED THE
!                          PREVIOUS SUBROUTINES PDTE & PDNEW
!   00-01-03  BLACK      - DISTRIBUTED MEMORY AND THREADS
!   01-02-23  BLACK      - CONVERTED TO WRF FORMAT
!   01-04-11  BLACK      - REWRITTEN FOR WRF CODING STANDARDS
!   04-02-17  JANJIC     - MOVED UPDATE OF T DUE TO OMEGA-ALPHA TERM
!                          AND UPDATE OF PINT TO NEW ROUTINE VTOA
!     
! USAGE: CALL PDTE FROM SUBROUTINE SOLVE_RUNSTREAM
!   INPUT ARGUMENT LIST:
!  
!   OUTPUT ARGUMENT LIST: 
!     
!   OUTPUT FILES:
!     NONE
!     
!   SUBPROGRAMS CALLED:
!  
!     UNIQUE: NONE
!  
!     LIBRARY: NONE
!  
! ATTRIBUTES:
!   LANGUAGE: FORTRAN 90
!   MACHINE : IBM SP
!$$$  
!***********************************************************************
#ifdef DM_PARALLEL
      USE module_domain
      USE module_dm
#endif
!-----------------------------------------------------------------------
      IMPLICIT NONE
!-----------------------------------------------------------------------
#ifdef DM_PARALLEL
      TYPE (DOMAIN) :: grid
#endif
!-----------------------------------------------------------------------
      LOGICAL,INTENT(IN) :: HYDRO
!
      INTEGER,INTENT(IN) :: IDS,IDE,JDS,JDE,KDS,KDE                     &
                           ,IMS,IME,JMS,JME,KMS,KME                     &
                           ,ITS,ITE,JTS,JTE,KTS,KTE
!
      INTEGER,DIMENSION(JMS:JME),INTENT(IN) :: IHE,IHW,IVE,IVW
!
!***  NMM_MAX_DIM is set in configure.wrf and must agree with
!***  the value of dimspec q in the Registry/Registry
!
      INTEGER,DIMENSION(-3:3,NMM_MAX_DIM,0:6),INTENT(IN) :: INDX3_WRK
!
      INTEGER,INTENT(IN) :: NTSD
!
      REAL,INTENT(IN) :: DT,PT
!
      REAL,DIMENSION(KMS:KME),INTENT(IN) :: ETA2
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(IN) :: RES,HBM2   
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(IN) :: HTM
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: DIV
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(INOUT) :: PD,PDSL
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: PETDT
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(OUT) :: PDSLO,PSDT
!
!-----------------------------------------------------------------------
!
!***  LOCAL VARIABLES
!
      INTEGER :: I,IHH,IHL,IX,J,JHH,JHL,JJ,JX,K,KNT,KS,NSMUD
      INTEGER :: J1_00,J1_M1,J2_00,J2_P1
      INTEGER :: MY_IS_GLB,MY_IE_GLB,MY_JS_GLB,MY_JE_GLB
#ifdef DM_PARALLEL
      INTEGER :: IPS,IPE,JPS,JPE,KPS,KPE
#endif
!
      REAL,DIMENSION(ITS-5:ITE+5,JTS-5:JTE+5) :: APDT,HBMS,PRET
!
      REAL,DIMENSION(ITS-5:ITE+5,KTS:KTE,-1:0) :: PNE
      REAL,DIMENSION(ITS-5:ITE+5,KTS:KTE, 0:1) :: PSE
!
      REAL :: PETDTL
!
!-----------------------------------------------------------------------
!**********************************************************************
!----------------------------------------------------------------------
!

      DO J=JMS,JME
      DO I=IMS,IME
        PDSLO(I,J)=0.
      ENDDO
      ENDDO
!
      MY_IS_GLB=ITS
      MY_IE_GLB=ITE
      MY_JS_GLB=JTS
      MY_JE_GLB=JTE

!
!----------------------------------------------------------------------
!***  COMPUTATION OF PRESSURE TENDENCY & PREPARATIONS
!----------------------------------------------------------------------
!
      DO J=MYJS_P2,MYJE_P2
        DO K=KTE-1,KTS,-1
        DO I=MYIS_P2,MYIE_P2
          DIV(I,K,J)=DIV(I,K+1,J)+DIV(I,K,J)
        ENDDO
        ENDDO
      ENDDO
!----------------------------------------------------------------------
      DO J=MYJS_P2,MYJE_P2
      DO I=MYIS_P2,MYIE_P2
        PSDT(I,J)=-DIV(I,KTS,J)
        APDT(I,J)=PSDT(I,J)
        PDSLO(I,J)=PDSL(I,J)
      ENDDO
      ENDDO
!----------------------------------------------------------------------
      DO J=JMS,JME
      DO I=IMS,IME
        PDSL(I,J)=0.
      ENDDO
      ENDDO
!
      DO J=MYJS_P2,MYJE_P2
      DO I=MYIS_P2,MYIE_P2
        PD(I,J)=PSDT(I,J)*DT+PD(I,J)
        PRET(I,J)=PSDT(I,J)*RES(I,J)
        PDSL(I,J)=PD(I,J)*RES(I,J)
      ENDDO
      ENDDO
!----------------------------------------------------------------------
!***  COMPUTATION OF PETDT
!----------------------------------------------------------------------
      DO J=MYJS_P2,MYJE_P2
        DO K=KTE-1,KTS,-1
        DO I=MYIS_P2,MYIE_P2
          PETDT(I,K,J)=-(PRET(I,J)*ETA2(K+1)+DIV(I,K+1,J))              &
     &                  *HTM(I,K,J)*HBM2(I,J)
        ENDDO
        ENDDO
      ENDDO
!----------------------------------------------------------------------
!***  SMOOTHING VERTICAL VELOCITY ALONG BOUNDARIES
!----------------------------------------------------------------------
      nonhydrostatic_smoothing: IF(.NOT.HYDRO.AND.KSMUD.GT.0)THEN
!
        NSMUD=KSMUD
!
        DO J=MYJS,MYJE
        DO I=MYIS,MYIE
          HBMS(I,J)=HBM2(I,J)
        ENDDO
        ENDDO
!
        JHL=LNSDT
        JHH=JDE-JHL+1
!
        DO J=JHL,JHH
          IF(J.GE.MY_JS_GLB.AND.J.LE.MY_JE_GLB)THEN
            IHL=JHL/2+1
            IHH=IDE-IHL+MOD(J,2)
!
            DO I=IHL,IHH
              IF(I.GE.MY_IS_GLB.AND.I.LE.MY_IE_GLB)THEN
                IX=I    ! -MY_IS_GLB+1
                JX=J    ! -MY_JS_GLB+1
                HBMS(IX,JX)=0.
              ENDIF
            ENDDO
!
          ENDIF
        ENDDO
!
!----------------------------------------------------------------------
!***
!***  SMOOTH THE VERTICAL VELOCITY
!***
!----------------------------------------------------------------------
!
        DO KS=1,NSMUD
!
!----------------------------------------------------------------------
!
!***  FILL SOUTHERNMOST SLABS OF THE PNE AND PSE WORKING ARRAYS
!
          JJ=MYJS2-1
          DO K=KTS,KTE-1
          DO I=MYIS_P1,MYIE1_P1
            PNE(I,K,-1)=(PETDT(I+IHE(JJ),K,JJ+1)-PETDT(I,K,JJ))         &
     &                  *HTM(I,K,JJ)*HTM(I+IHE(JJ),K,JJ+1)
          ENDDO
          ENDDO
!
          DO K=KTS,KTE-1
          DO I=MYIS_P1,MYIE1_P1
            PSE(I,K,0)=(PETDT(I+IHE(JJ+1),K,JJ)-PETDT(I,K,JJ+1))        &
     &                 *HTM(I+IHE(JJ+1),K,JJ)*HTM(I,K,JJ+1)
          ENDDO
          ENDDO
!
          KNT=0
!
!----------------------------------------------------------------------
!
!***  PROCEED NORTHWARD WITH THE SMOOTHING.
!***  PNE AT H(I,J) LIES BETWEEN (I,J) AND THE H POINT TO THE NE.
!***  PSE AT H(I,J) LIES BETWEEN (I,J) AND THE H POINT TO THE SE.
!
          DO J=MYJS2,MYJE2
!
            KNT=KNT+1
            J1_00=-MOD(KNT+1,2)
            J1_M1=-MOD(KNT,2)
            J2_P1=MOD(KNT,2)
            J2_00=MOD(KNT+1,2)
!
            DO K=KTS,KTE-1
            DO I=MYIS_P1,MYIE1_P1
              PNE(I,K,J1_00)=(PETDT(I+IHE(J),K,J+1)-PETDT(I,K,J))       &
     &                       *HTM(I,K+1,J)*HTM(I+IHE(J),K+1,J+1)
            ENDDO
            ENDDO
!
            DO K=KTS,KTE-1
            DO I=MYIS_P1,MYIE1_P1
              PSE(I,K,J2_P1)=(PETDT(I+IHE(J+1),K,J)-PETDT(I,K,J+1))     &
     &                       *HTM(I+IHE(J+1),K+1,J)*HTM(I,K+1,J+1)
            ENDDO
            ENDDO
!
            DO K=KTS,KTE-1
            DO I=MYIS1,MYIE1
              PETDTL=(PNE(I,K,J1_00)-PNE(I+IHW(J),K,J1_M1)              &
     &               +PSE(I,K,J2_00)-PSE(I+IHW(J),K,J2_P1))*HBM2(I,J)
              PETDT(I,K,J)=PETDTL*HBMS(I,J)*0.125+PETDT(I,K,J) 
            ENDDO
            ENDDO
!
          ENDDO
!
#ifdef DM_PARALLEL
          IPS=ITS;IPE=ITE;JPS=JTS;JPE=JTE;KPS=KTS;KPE=KTE
# include <HALO_NMM_E.inc>
#endif
!----------------------------------------------------------------------
!
        ENDDO  ! End of smoothing loop
!
!----------------------------------------------------------------------
      ENDIF nonhydrostatic_smoothing
!----------------------------------------------------------------------
      END SUBROUTINE PDTE
!----------------------------------------------------------------------
!***********************************************************************
!-----------------------------------------------------------------------
      SUBROUTINE VTOA(                                                  &
#ifdef DM_PARALLEL
     &                grid,                                             &
#endif
     &                NTSD,DT,PT,ETA2                                   &
     &               ,HTM,HBM2,EF4T                                     &
     &               ,T,DWDT,RTOP,OMGALF                                &
     &               ,PINT,DIV,PSDT,RES                                 &
     &               ,IHE,IHW,IVE,IVW,INDX3_WRK                         &                 
     &               ,IDS,IDE,JDS,JDE,KDS,KDE                           &
     &               ,IMS,IME,JMS,JME,KMS,KME                           &
     &               ,ITS,ITE,JTS,JTE,KTS,KTE)
!***********************************************************************
!$$$  SUBPROGRAM DOCUMENTATION BLOCK
!                .      .    .     
! SUBPROGRAM:    VTOA        OMEGA-ALPHA
!   PRGRMMR: JANJIC          ORG: W/NP2      DATE: 04-02-17      
!     
! ABSTRACT:
!     VTOA UPDATES THE NONHYDROSTATIC PRESSURE AND ADDS THE
!     CONTRIBUTION OF THE OMEGA-ALPHA TERM OF THE THERMODYNAMIC
!     EQUATION.  ALSO, THE OMEGA-ALPHA TERM IS COMPUTED FOR DIAGNOSTICS.
!     
! PROGRAM HISTORY LOG:
!   04-02-17  JANJIC     - SEPARATED FROM ORIGINAL PDTEDT ROUTINE
!     

!   INPUT ARGUMENT LIST:
!  
!   OUTPUT ARGUMENT LIST: 
!     
!   OUTPUT FILES:
!     NONE
!     
!   SUBPROGRAMS CALLED:
!  
!     UNIQUE: NONE
!  
!     LIBRARY: NONE
!  
! ATTRIBUTES:
!   LANGUAGE: FORTRAN 90
!   MACHINE : IBM SP
!$$$  
!***********************************************************************
#ifdef DM_PARALLEL
      USE module_domain
      USE module_dm
#endif
!-----------------------------------------------------------------------
      IMPLICIT NONE
!-----------------------------------------------------------------------
#ifdef DM_PARALLEL
      TYPE (DOMAIN) :: grid
#endif
!-----------------------------------------------------------------------
!
      INTEGER,INTENT(IN) :: IDS,IDE,JDS,JDE,KDS,KDE                     &
                           ,IMS,IME,JMS,JME,KMS,KME                     &
                           ,ITS,ITE,JTS,JTE,KTS,KTE
!
      INTEGER,DIMENSION(JMS:JME),INTENT(IN) :: IHE,IHW,IVE,IVW
!
!***  NMM_MAX_DIM is set in configure.wrf and must agree with
!***  the value of dimspec q in the Registry/Registry
!
      INTEGER,DIMENSION(-3:3,NMM_MAX_DIM,0:6),INTENT(IN) :: INDX3_WRK
!
      INTEGER,INTENT(IN) :: NTSD
!
      REAL,INTENT(IN) :: DT,EF4T,PT
!
      REAL,DIMENSION(KMS:KME),INTENT(IN) :: ETA2
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(IN) :: HBM2,PSDT,RES
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(IN) :: DIV,DWDT    &
     &                                                     ,HTM,RTOP
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: OMGALF   & 
     &                                                        ,T
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: PINT
!
!-----------------------------------------------------------------------
!
!***  LOCAL VARIABLES
!
      INTEGER :: I,IHH,IHL,IX,J,JHH,JHL,JJ,JX,K,KNT,KS,NSMUD
      INTEGER :: J1_00,J1_M1,J2_00,J2_P1
!
      REAL,DIMENSION(ITS-5:ITE+5,JTS-5:JTE+5) :: PRET,TPM
!
      REAL :: DWDTP,RHS,TPMP
!
!-----------------------------------------------------------------------
!**********************************************************************
!----------------------------------------------------------------------
!
!----------------------------------------------------------------------
!***  PREPARATIONS
!----------------------------------------------------------------------
      DO J=MYJS_P2,MYJE_P2
      DO I=MYIS_P2,MYIE_P2
        PINT(I,KTE+1,J)=PT
        TPM(I,J)=PT+PINT(I,KTE,J)
        PRET(I,J)=PSDT(I,J)*RES(I,J)
      ENDDO
      ENDDO
!----------------------------------------------------------------------
!***  KINETIC ENERGY GENERATION TERMS IN T EQUATION
!----------------------------------------------------------------------
      DO J=MYJS,MYJE
      DO I=MYIS,MYIE
        DWDTP=DWDT(I,KTE,J)
        TPMP=PINT(I,KTE,J)+PINT(I,KTE-1,J)
!
        RHS=-DIV(I,KTE,J)*RTOP(I,KTE,J)*HTM(I,KTE,J)*DWDTP*EF4T
        OMGALF(I,KTE,J)=OMGALF(I,KTE,J)+RHS
        T(I,KTE,J)=OMGALF(I,KTE,J)*HBM2(I,J)+T(I,KTE,J)
        PINT(I,KTE,J)=PRET(I,J)*(ETA2(KTE+1)+ETA2(KTE))*DWDTP*DT        &
     &             +TPM(I,J)-PINT(I,KTE+1,J)
!
        TPM(I,J)=TPMP
      ENDDO
      ENDDO
!----------------------------------------------------------------------
      DO J=MYJS,MYJE
        DO K=KTE-1,KTS+1,-1
        DO I=MYIS,MYIE
          DWDTP=DWDT(I,K,J)
          TPMP=PINT(I,K,J)+PINT(I,K-1,J)
!
          RHS=-(DIV(I,K+1,J)+DIV(I,K,J))*RTOP(I,K,J)*HTM(I,K,J)*DWDTP   &
     &         *EF4T
          OMGALF(I,K,J)=OMGALF(I,K,J)+RHS
          T(I,K,J)=OMGALF(I,K,J)*HBM2(I,J)+T(I,K,J)
          PINT(I,K,J)=PRET(I,J)*(ETA2(K+1)+ETA2(K))*DWDTP*DT            &
     &               +TPM(I,J)-PINT(I,K+1,J)
!
          TPM(I,J)=TPMP
        ENDDO
        ENDDO
      ENDDO
!----------------------------------------------------------------------
      DO J=MYJS,MYJE
      DO I=MYIS,MYIE
!
        DWDTP=DWDT(I,KTS,J)
!
        RHS=-(DIV(I,KTS+1,J)+DIV(I,KTS,J))*RTOP(I,KTS,J)*HTM(I,KTS,J)   &
     &       *DWDTP*EF4T
        OMGALF(I,KTS,J)=OMGALF(I,KTS,J)+RHS
        T(I,KTS,J)=OMGALF(I,KTS,J)*HBM2(I,J)+T(I,KTS,J)
        PINT(I,KTS,J)=PRET(I,J)*(ETA2(KTS+1)+ETA2(KTS))*DWDTP*DT        &
     &                 +TPM(I,J)-PINT(I,KTS+1,J)
      ENDDO
      ENDDO
!----------------------------------------------------------------------
      END SUBROUTINE VTOA
!----------------------------------------------------------------------
!**********************************************************************
      SUBROUTINE DDAMP(NTSD,DT,DETA1,DETA2,PDSL,PDTOP,DIV,HBM2,VTM      &
     &                ,T,U,V,DDMPU,DDMPV                                &
     &                ,IHE,IHW,IVE,IVW,INDX3_WRK                        &              
     &                ,IDS,IDE,JDS,JDE,KDS,KDE                          &
     &                ,IMS,IME,JMS,JME,KMS,KME                          &
     &                ,ITS,ITE,JTS,JTE,KTS,KTE)
!**********************************************************************
!$$$  SUBPROGRAM DOCUMENTATION BLOCK
!                .      .    .     
! SUBPROGRAM:    DDAMP       DIVERGENCE DAMPING
!   PRGRMMR: JANJIC          ORG: W/NP22     DATE: 94-03-08       
!     
! ABSTRACT:
!     DDAMP MODIFIES THE WIND COMPONENTS SO AS TO REDUCE THE
!     HORIZONTAL DIVERGENCE.
!     
! PROGRAM HISTORY LOG:
!   87-08-??  JANJIC     - ORIGINATOR
!   95-03-25  BLACK      - CONVERSION FROM 1-D TO 2-D IN HORIZONTAL
!   95-03-28  BLACK      - ADDED EXTERNAL EDGE
!   98-10-30  BLACK      - MODIFIED FOR DISTRIBUTED MEMORY
!   01-03-12  BLACK      - CONVERTED TO WRF STRUCTURE
!     
! USAGE: CALL DDAMP FROM SUBROUTINE SOLVE_RUNSTREAM
!
!   INPUT ARGUMENT LIST:
!  
!   OUTPUT ARGUMENT LIST: 
!     
!   OUTPUT FILES:
!     NONE
!     
!   SUBPROGRAMS CALLED:
!  
!     UNIQUE: NONE
!  
!     LIBRARY: NONE
!  
! ATTRIBUTES:
!   LANGUAGE: FORTRAN 90
!   MACHINE : IBM SP
!$$$  
!**********************************************************************
!----------------------------------------------------------------------
      IMPLICIT NONE
!----------------------------------------------------------------------
!
      INTEGER,INTENT(IN) :: IDS,IDE,JDS,JDE,KDS,KDE                     &
     &                     ,IMS,IME,JMS,JME,KMS,KME                     &
     &                     ,ITS,ITE,JTS,JTE,KTS,KTE
!
      INTEGER,DIMENSION(JMS:JME),INTENT(IN) :: IHE,IHW,IVE,IVW
!
!***  NMM_MAX_DIM is set in configure.wrf and must agree with
!***  the value of dimspec q in the Registry/Registry
!
      INTEGER,DIMENSION(-3:3,NMM_MAX_DIM,0:6),INTENT(IN) :: INDX3_WRK
!
      INTEGER,INTENT(IN) :: NTSD
!
      REAL,INTENT(IN) :: DT,PDTOP
!
      REAL,DIMENSION(KMS:KME-1),INTENT(IN) :: DETA1,DETA2
!
      REAL,DIMENSION(IMS:IME,JMS:JME),INTENT(IN) :: DDMPU,DDMPV         &
     &                                             ,HBM2,PDSL
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(IN) :: VTM
!
      REAL,DIMENSION(IMS:IME,KMS:KME,JMS:JME),INTENT(INOUT) :: DIV,T    &
     &                                                        ,U,V
!----------------------------------------------------------------------
!
!***  LOCAL VARIABLES
!
      INTEGER :: I,IER,J,J4_00,J4_M1,J4_P1,JJ,JKNT,JSTART,K,STAT
!
      REAL :: RDPDX,RDPDY
!
!***  TYPE 4 WORKING ARRAY   ! See PFDHT
!
      REAL,DIMENSION(ITS-5:ITE+5,KTS:KTE,-1:1) :: CKE,DPDE
!
!----------------------------------------------------------------------
!**********************************************************************
!----------------------------------------------------------------------
!
!----------------------------------------------------------------------
!
!***  MARCH NORTHWARD THROUGH THE SOUTHERNMOST SLABS TO BEGIN
!***  FILLING THE WORKING ARRAY NEEDED FOR AVERAGING AND
!***  DIFFERENCING IN J
!
!----------------------------------------------------------------------
      JSTART=MYJS2
!
      DO J=-1,0
        JJ=JSTART+J
!
        DO K=KTS,KTE
        DO I=MYIS_P2,MYIE_P2
          DPDE(I,K,J)=DETA1(K)*PDTOP+DETA2(K)*PDSL(I,JJ)
          DIV(I,K,JJ)=DIV(I,K,JJ)*HBM2(I,JJ)
        ENDDO
        ENDDO
!
      ENDDO
!
      JKNT=0
!----------------------------------------------------------------------
!
      main_integration : DO J=MYJS2,MYJE2
!
!----------------------------------------------------------------------
!***
!***  SET THE 3RD INDEX OF THE WORKING ARRAYS (SEE SUBROUTINE INIT
!***                                           AND PFDHT DIAGRAMS)
!***
!***  J[TYPE]_NN WHERE "TYPE" IS THE WORKING ARRAY TYPE SEEN IN THE
!***  LOCAL DECLARATION ABOVE (DEPENDENT UPON THE J EXTENT) AND
!***  NN IS THE NUMBER OF ROWS NORTH OF THE CENTRAL ROW WHOSE J IS
!***  THE CURRENT VALUE OF THE main_integration LOOP.
!***  (P2 denotes +2, etc.)
!***
      JKNT=JKNT+1
!
      J4_P1=INDX3_WRK(1,JKNT,4)
      J4_00=INDX3_WRK(0,JKNT,4)
      J4_M1=INDX3_WRK(-1,JKNT,4)
!
!----------------------------------------------------------------------
      DO K=KTS,KTE
      DO I=MYIS_P2,MYIE_P2   ! updated to go out 2, July 2004 ; JM
        DPDE(I,K,J4_P1)=DETA1(K)*PDTOP+DETA2(K)*PDSL(I,J+1)
        DIV(I,K,J+1)=DIV(I,K,J+1)*HBM2(I,J+1)
      ENDDO
      ENDDO
!
      DO K=KTS,KTE
      DO I=MYIS1_P1,MYIE1_P1
        RDPDX=VTM(I,K,J)/(DPDE(I+IVW(J),K,J4_00)                        &
     &                   +DPDE(I+IVE(J),K,J4_00))
        U(I,K,J)=U(I,K,J)+(DIV(I+IVE(J),K,J)-DIV(I+IVW(J),K,J))         &
     &                    *RDPDX*DDMPU(I,J)
!
        RDPDY=VTM(I,K,J)/(DPDE(I,K,J4_M1)+DPDE(I,K,J4_P1))
        V(I,K,J)=V(I,K,J)+(DIV(I,K,J+1)-DIV(I,K,J-1))                   &
     &                    *RDPDY*DDMPV(I,J)

      ENDDO
      ENDDO


!
!----------------------------------------------------------------------
!
      ENDDO main_integration
!
!----------------------------------------------------------------------
      END SUBROUTINE DDAMP
!----------------------------------------------------------------------
      END MODULE MODULE_IGWAVE_ADJUST
