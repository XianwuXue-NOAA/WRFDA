#
FPPFLAGS        = $(FPPFLAGS1) $(FPPFLAGS2) $(COREDEFS) \
                     $(ENVCOMPDEFS) $(DM_FPPFLAGS)
CPPFLAGS        = -C -P $(TRADFLAG) $(INCS) $(DM_CPPFLAGS)
REGFLAGS        = $(FPPFLAGS1) $(FPPFLAGS2) $(DM_FPPFLAGS)
 
CCFLAGS        = $(CCFLAGS1) $(CCFLAGS2) $(CCOPTIM)
LDFLAGS         = $(FCBASE) $(FCOPTIM) $(FCENDIAN) -L$(NETCDF_LIB_PATH) $(LDFLAGS2)

FCFLAGS         = $(FCBASE) $(FCTYPE) $(FCFREE) $(FCENDIAN) $(INCS) $(FCDEBUG) $(FCOPTIM)
FCFLAGS_SIMPLE  = $(FCBASE) $(FCTYPE) $(FCFREE) $(FCENDIAN) $(INCS)
FIXEDFLAGS        = $(FCOPTIM) $(FCBASE) $(FCTYPE)
FIXEDFLAGS_ENDIAN = $(FCTYPE) $(FCBASE)

WRFVAR_LIBS  = libwrfio_nf.a libesmf_time.a $(IO_GRIB_SHARE)/libio_grib_share.a \
                 $(IO_GRIB1)/libio_grib1.a \
                 libwrfvar.a $(MPI_LIBS)

WRF_LIBS     = libwrflib.a libwrfio_nf.a libesmf_time.a \
                  $(IO_GRIB_SHARE)/libio_grib_share.a \
                  $(IO_GRIB1)/libio_grib1.a $(MPI_LIBS)

WRFPLUS_LIBS = libwrflib.a libwrfplus.a libwrfio_nf.a libesmf_time.a \
               $(IO_GRIB1)/libio_grib1.a $(IO_GRIB_SHARE)/libio_grib_share.a \
                  $(MPI_LIBS)

WRFVAR_LIB  = -L. -L$(LAPACK_PATH) -lwrfvar $(NETCDF_LIB)  \
               $(GRIB1_LIB) $(GRIB_SHARE_LIB) $(LOCAL_LIB) $(ESMF_TIME_LIB) \
               -llapack $(BLAS_LIB) $(BUFR_LIB) $(FFTPACK5_LIB) \
               $(RTTOV_LIB) $(CRTM_LIB) $(MPI_LIB)

WRF_LIB     = -L. -lwrflib \
              $(GRIB1_LIB) $(GRIB_SHARE_LIB) $(LOCAL_LIB) $(NETCDF_LIB) \
                 $(MPI_LIB)

WRFPLUS_LIB = -L. $(NETCDF_LIB) -lwrflib -lwrfplus \
              $(GRIB1_LIB) $(GRIB_SHARE_LIB) $(LOCAL_LIB) $(NETCDF_LIB) \
                 $(MPI_LIB)

GEN_BE_LIB =  $(NETCDF_LIB) -L. $(LAPACK_LIB) $(BLAS_LIB) $(FFTPACK5_LIB) \
                 $(LOCAL_LIB)
                  

# compile these simply (no debug or optimisation) to speed compile

module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
nest_init_utils.o : nest_init_utils.F
module_domain.o : module_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
couple_or_uncouple_em.o : couple_or_uncouple_em.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o mediation_interp_domain.o                   \
mediation_force_domain.o mediation_feedback_domain.o           \
module_initialize_real.o module_dm.o start_domain.o \
nest_init_utils.o couple_or_uncouple_em.o solve_interface.o :
	@ $(RM) $@
	@ $(SED_FTN) $*.F > $*.b 
	@ $(CPP) $(CPPFLAGS) $(FPPFLAGS) $*.b  > $*.f
	@ $(RM) $*.b
	  $(FC) -c $(FCFLAGS_SIMPLE) $*.f

# Remove implicit rules to ensure our multi-stage process works

.f.o :

.f90.o : 
	@ $(RM) $@
	@ $(SED_FTN) $*.f90 > $*.b
	@ $(CPP) $(CPPFLAGS) $(FPPFLAGS) $*.b  > $*.f
	@ $(RM) $*.b
	  $(FC) -c $(FCFLAGS) $*.f

.F90.o : 
	@ $(RM) $@
	@ $(SED_FTN) $*.F90 > $*.b
	@ $(CPP) $(CPPFLAGS) $(FPPFLAGS) $*.b  > $*.f
	@ $(RM) $*.b
	  $(FC) -c $(FCFLAGS) $*.f

.F.o : 
	@ $(RM) $@
	@ $(SED_FTN) $*.F > $*.b
	@ $(CPP) $(CPPFLAGS) $(FPPFLAGS) $*.b  > $*.f
	@ $(RM) $*.b
	  $(FC) -c $(FCFLAGS) $*.f

.c.o: 
	@ $(RM) $@
	  $(CC) -c $(CCFLAGS) $*.c

