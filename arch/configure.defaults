###########################################################
#ARCH	SGI 32 bit machine IRIX

FC		=	f90
LD		=	f90
CC              =       cc
RWORDSIZE       =       4
FCBASEOPTS      =       -freeform -I. -w
FCFLAGS		=	$(FCBASEOPTS)
CFLAGS		=
EXTRAMODULES    =       
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
ARCHFLAGS       =       -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DLIMIT_ARGS
LDFLAGS		=
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =	../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH FC="f90 -freeform -I." RANLIB="$(RANLIB)" CPP="$(CPP)"; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS) -w" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH	SGI 32 bit machine, sycamore IRIX

FC		=	f90
CC              =       cc
FCBASEOPTS      =       -freeform -I. -w
FCFLAGS		=	-freeform -I. -w
CFLAGS		=
EXTRAMODULES    =       
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../frame -I../share -I../phys -I../chem  \
                       	-I../external/esmf_time_f90 -I../inc
ARCHFLAGS       =       -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   -DINTIO -DLIMIT_ARGS
LDFLAGS		=
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =	../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH FC="$(FC) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH       SGI 64 bit machine IRIX64     (single-threaded, no nesting)

FC              =       f90
LD              =       f90
CC              =       cc
CFLAGS          =       -64
FCOPTIM         =       -O3
FCDEBUG         =       # -g
RWORDSIZE       =       4
FCBASEOPTS      =       -freeform -I. -64 -cpp -OPT:Olimit=5269 $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =
ARCHFLAGS       =       -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   -DINTIO -DYYY -DLIMIT_ARGS
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
			-L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -64 -OPT:Olimit=5269
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH FC="$(FC) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS) -w" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	SGI O2K IRIX

FC              =       f90 -n32 -mips4 -w
LD              =       f90 -n32 -mips4 -w
CC              =       cc
CFLAGS          =       -n32 -mips4
FCBASEOPTS      =       -freeform -I. -w
FCFLAGS         =       -freeform -I. -O3 -OPT:roundoff=3:IEEE_arithmetic=3 -OPT:fold_arith_limit=2001
ARCHFLAGS       =       -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DINTIO -DTRIEDNTRUE   -DLIMIT_ARGS
EXTRAMODULES    =       
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../frame -I../share \
                        -I../phys -I../chem -I../inc -I../external/esmf_time_f90
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
AR              =       ar ru
M4              =       m4 -B10000
LDFLAGS         =
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -C -P $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS)" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH       SGI 64 bit machine IRIX64     (OpenMP, no nesting)

OMP             =       -mp
OMPCPP          =       -D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
CFLAGS          =       -64
FCOPTIM         =       -O3
FCDEBUG         =       # -g
RWORDSIZE       =       4
FCBASEOPTS      =       -freeform -I. -64 -cpp -OPT:Olimit=5269 $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =
ARCHFLAGS       =       -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   -DYYY -DINTIO -DLIMIT_ARGS
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH $(OMP) \
			-L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -64 -OPT:Olimit=5269
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS)" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS) -w" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH	SGI O2K DM IRIX64     DM-Parallel        (RSL, SGI-MPI, allows nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#

DMPARALLEL      =       1
MAX_PROC        =       1024
OMP             =       #-mp
OMPCPP          =       #-D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
CFLAGS          =       -w -64 -mips4 -DWRF_RSL_IO -DMAXDOM_MAKE=$(MAX_DOMAINS) \
                        -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL -DDM_PARALLEL
FCDEBUG         =       # -g
FCOPTIM         =       -O3 -OPT:roundoff=3:IEEE_arithmetic=3
FCBASEOPTS	=	-freeform -I. -64 -mips4 -w $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DINTIO -DYYY -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 \
                        -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   -DLIMIT_ARGS
EXTRAMODULES    =       
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../frame -I../external/esmf_time_f90 \
                        -I../share -I../phys -I../chem -I../inc
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl -lmpi \
                        -L../external/io_grib1 -lio_grib1 \
                        ../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS		=       -64 $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the SGI Fortran compiler complains about long source lines.      ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS)" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )


wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) $(FCFLAGS) -w" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) \
               LEARN_BCAST=-DLEARN_BCAST o2k )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_configure.o : module_configure.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	Sun  SunOS      (single-threaded, no nesting)
#
FC              =       f95
LD              =       f95
CC              =       cc
CFLAGS          =
FCOPTIM		=	-O2 # -O4 -xlibmopt
FCDEBUG		=	#-g
FCBASEOPTS	=	-fnonstd -free -xpp=cpp $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
			-M../external/io_netcdf -M../external/io_int -M../external/esmf_time_f90 \
			-M../frame -M../share -M../phys -M../inc \
			-M../dyn_em 
EXTRAMODULES    =       
ARCHFLAGS       =       -DINTIO -DYYY -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
			-L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(FCOPTIM)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
#CPP            =       /opt/SUNWspro/bin/fpp
CPP             =       /usr/ccs/lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the Sun Fortran compiler complains about long source lines,      ####
#### usually due to cpp translating __FILE__ to a full pathname.              ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASEOPTS) " ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

solve_interface.o : solve_interface.F
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $*.f
	$(FC) -c $(FCBASEOPTS) -I. $(MODULE_DIRS) $*.f

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
wrf_bdyin.o : wrf_bdyin.F
wrf_bdyout.o : wrf_bdyout.F
wrf_histin.o : wrf_histin.F
wrf_histout.o : wrf_histout.F
wrf_inputin.o : wrf_inputin.F
wrf_inputout.o : wrf_inputout.F
wrf_restartin.o : wrf_restartin.F
wrf_restartout.o : wrf_restartout.F
module_configure.o : module_configure.F

module_configure.o \
wrf_bdyin.o wrf_bdyout.o  \
wrf_histin.o wrf_histout.o  \
wrf_inputin.o wrf_inputout.o  \
wrf_restartin.o wrf_restartout.o  \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o mediation_interp_domain.o \
mediation_force_domain.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	Sun  SunOS      (single-threaded, nesting using RSL and no MPI)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DM_PARALLEL     =       1
OMP             =       
OMPCPP          =       
FC              =       f95
LD              =       f95
CC              =       cc
ARCHFLAGS       =       -DNETCDF -DYYY -DINTIO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
                        -DLIMIT_ARGS -DFLOATSAFE \
                        -DSTUBMPI
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -O2 # -O4 -xlibmopt
FCDEBUG         =       # -g
FCBASEOPTS      =       -fnonstd -free -xpp=cpp $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
                        -M../external/io_netcdf -M../external/io_int -M../external/esmf_time_f90 \
                        -M../frame -M../share -M../phys -M../inc \
                        -M../dyn_em
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/ccs/lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the Sun Fortran compiler complains about long source lines,      ####
#### usually due to cpp translating __FILE__ to a full pathname.              ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a gen_comms.c wrfio_int module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	  cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASEOPTS)" ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	  make CC="$(CC)" CFLAGS='-w -DSUN -DSTUBS -O' FC="$(FC)" FFLAGS='-w -O' \
               MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
wrf_bdyin.o : wrf_bdyin.F
wrf_bdyout.o : wrf_bdyout.F
wrf_histin.o : wrf_histin.F
wrf_histout.o : wrf_histout.F
wrf_inputin.o : wrf_inputin.F
wrf_inputout.o : wrf_inputout.F
wrf_restartin.o : wrf_restartin.F
wrf_restartout.o : wrf_restartout.F
module_configure.o : module_configure.F

module_configure.o \
wrf_bdyin.o wrf_bdyout.o  \
wrf_histin.o wrf_histout.o  \
wrf_inputin.o wrf_inputout.o  \
wrf_restartin.o wrf_restartout.o  \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f

###########################################################
#ARCH	Sun  SunOS SM   (OpenMP, no nesting)
#
OMP		=	-mp=openmp -explicitpar -stackvar
OMPCPP          =       -D_OPENMP
FC              =       f95
LD              =       f95
CC              =       cc
CFLAGS          =
FCOPTIM		=	-O3 -xlibmopt
FCDEBUG		=	#-g
FCBASEOPTS	=	-fnonstd -free -xpp=cpp $(FCDEBUG) $(OMP) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
			-M../external/io_netcdf -M../external/io_int -M../external/esmf_time_f90 \
			-M../frame -M../share -M../phys -M../inc \
			-M../dyn_em 
EXTRAMODULES    =       
ARCHFLAGS       =       -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
			-L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
#CPP            =       /opt/SUNWspro/bin/fpp
CPP             =       /usr/ccs/lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the Sun Fortran compiler complains about long source lines,      ####
#### usually due to cpp translating __FILE__ to a full pathname.              ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASEOPTS) " ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASEOPTS)" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

solve_interface.o : solve_interface.F
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $*.f
	$(FC) -c $(FCBASEOPTS) -I. $(MODULE_DIRS) $*.f

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	Sun  SunOS SM   (OpenMP, nesting using RSL and no MPI)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DM_PARALLEL     =       1
OMP		=	-mp=openmp -explicitpar -stackvar
OMPCPP          =       -D_OPENMP
FC              =       f95
LD              =       f95
CC              =       cc
ARCHFLAGS       =       -DNETCDF -DYYY -DINTIO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
                        -DLIMIT_ARGS -DFLOATSAFE \
                        -DSTUBMPI
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -O3 -xlibmopt
FCDEBUG         =       # -g
FCBASEOPTS      =       -fnonstd -free -xpp=cpp $(FCDEBUG) -w
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
                        -M../external/io_netcdf -M../external/io_int -M../external/esmf_time_f90 \
                        -M../frame -M../share -M../phys -M../inc \
                        -M../dyn_em
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/ccs/lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the Sun Fortran compiler complains about long source lines,      ####
#### usually due to cpp translating __FILE__ to a full pathname.              ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a gen_comms.c wrfio_int module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	  cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASEOPTS)" ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -cpp -free" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" FC="$(FC) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	  make CC="$(CC)" CFLAGS='-w -DSUN -DSTUBS -O' FC="$(FC)" FFLAGS='-w -O' \
               MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f

###########################################################
#ARCH   AIX             (single-threaded, no nesting)
#
FC              =       xlf90_r
LD              =       xlf90_r
CC              =       xlc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -qspill=20000 $(FCDEBUG) -qmaxmem=32767 -w #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -lmass -lmassv \
                        -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 

LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

solve_interface.o : solve_interface.F
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $*.f
	$(FC) -c -qfree=f90 -qspillsize=32767 -I. $(MODULE_DIRS) $*.f

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
module_configure.o : module_configure.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o \
mediation_interp_domain.o \
module_configure.o                                             \
solve_interface.o                                              \
convert_nmm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

# to prevent having to call our service representative
mediation_feedback_domain.o \
mediation_force_domain.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH   AIX SM          (OpenMP, no nesting)
#
OMP             =       -qsmp=noauto
OMPCPP          =       -D_OPENMP
FC              =       xlf90_r
LD              =       xlf90_r
CC              =       xlc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -lmass -lmassv -lxlsmp \
                        -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 $(OMP) -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

module_sm.o 	: module_sm.F
module_tiles.o	: module_tiles.F
solve_em.o	: solve_em.F
solve_exp.o	: solve_exp.F
convert_nmm.o   : convert_nmm.F

module_sm.o module_tiles.o solve_em.o solve_exp.o convert_nmm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $(OMPCPP) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(OMP) $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL_LITE, IBM-MPI, no nesting)
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -O3 -DNOUNDERSCORE  -I../external/RSL_LITE -DDM_PARALLEL \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DRSL_LITE -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL_LITE -lrsl_lite -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CFLAGS="$(CFLAGS)" CC="$(CC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL, IBM-MPI, supports nesting)
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL, IBM-MPI, supports nesting )(PARALLEL HDF5)
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto 
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=-1 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf  -I../external/io_phdf5 -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG CONFIGURE_PHDF5_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH CONFIGURE_PHDF5_LIB_PATH -L../external/RSL/RSL -lrsl -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF CONFIGURE_WRFIO_PHDF5 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_phdf5 : 
	( cd ../external/io_phdf5 ; make PHDF5PATH=CONFIGURE_PHDF5_PATH FC="$(FC) $(FCDEBUG) -qarch=auto -qfree=F90 -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL_LITE, IBM-MPI, no nesting )(PARALLEL HDF5)
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE  -I../external/RSL_LITE -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto 
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=-1 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf  -I../external/io_phdf5 -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DRSL_LITE -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG CONFIGURE_PHDF5_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH CONFIGURE_PHDF5_LIB_PATH -L../external/RSL_LITE -lrsl_lite -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF CONFIGURE_WRFIO_PHDF5 ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_phdf5 : 
	( cd ../external/io_phdf5 ; make PHDF5PATH=CONFIGURE_PHDF5_PATH FC="$(FC) $(FCDEBUG) -qarch=auto -qfree=F90 -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC="$(CC)" CFLAGS="$(CFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel/SM-Parallel       (RSL, IBM-MPI, OpenMP, supports nesting)
#
DMPARALLEL      =       1
OMP             =       -qsmp=noauto
OMPCPP          =       -D_OPENMP
SFC		=	xlf90_r
SCC             =       xlc_r
FC		=	mpxlf90_r
LD		=	mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl -lxlsmp -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 $(OMP) -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc
MAX_PROC        =       1024

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

solve_interface.o : solve_interface.F
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $*.f
	$(FC) -c -qfree=f90 -qspillsize=32767 -I. $(MODULE_DIRS) $*.f

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
module_configure.o : module_configure.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
convert_nmm.o \
module_configure.o                                             \
solve_interface.o                                              \
mediation_interp_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

# to prevent having to call our service representative
mediation_feedback_domain.o \
mediation_force_domain.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL, IBM-MPI, supports nesting, MOVING NESTS, EXPERIMENTAL )
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV -DMOVE_NESTS
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel          (RSL, IBM-MPI, MCEL)   May 2003, EXPERIMENTAL
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpCC_r
CC              =       mpcc_r
RWORDSIZE       =       4
MCELHOME        =       /home/bluesky/bettenc/disttest
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO -DMCELIO -DLIMIT_ARGS \
                        -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        -L../external/RSL/RSL -lrsl -lmass -lmassv -lxlsmp \
                        -L../external/io_mcel -lwrfio_mcel  \
-L$(MCELHOME)/MCELSystem/MCEL -lMCEL  \
-L$(MCELHOME)/lib -lomniORB4  \
-lomnithread -lomniDynamic4  -lnetcdf_c++ -lnetcdf  -lxlf90 -lxlopt  \
                        -lxlf -lxlomp_ser -lm -lc -lpthread \
                        -L../external/io_int -lwrfio_int  \
                        ../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int wrfio_mcel gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( cat ../tools/gen_comms_warning ../external/RSL/gen_comms.c > ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( cat module_dm_warning ../external/RSL/module_dm.F > module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

wrfio_mcel : 
	( cd ../external/io_mcel ; \
          make CC="$(CC)" FC="$(SFC) $(FCDEBUG) -I../io_netcdf -I../../frame -I../../share \
               -I$(MCELHOME)/MCELSystem/MCEL -qfree=f90" all )


../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel ESMF     (RSL, IBM-MPI, ESMF coupling, supports nesting) EXPERIMENTAL
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
# begin ESMF paths
ESMF_DIR        =       /home/bluesky/hender/esmf
ESMF_BOPT       =       O
ESMF_ARCH       =       AIX
ESMF_COMPILER   =       default
# TBH:  Link ESMF_PREC with OBJECT_MODE later...  
ESMF_PREC       =       32
# ESMF_PREC       =       64
ESMF_SITE       =       default
ESMF_PATH_TAIL  =       $(ESMF_BOPT)/$(ESMF_ARCH).$(ESMF_COMPILER).$(ESMF_PREC).$(ESMF_SITE)
ESMF_MODULES    =       $(ESMF_DIR)/mod/mod$(ESMF_PATH_TAIL)
ESMF_LIB        =       $(ESMF_DIR)/lib/lib$(ESMF_PATH_TAIL)
ESMF_LIB_FLAGS  =       -L$(ESMF_LIB) -lesmf -brtl -lC
# end ESMF paths
# path to WRF wrapper for ESMF
ESMF_WRAPPER_DIR =      ../external/esmf_wrapper
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I$(ESMF_WRAPPER_DIR) \
                        -I../frame -I../share -I../phys -I../chem -I../inc -I$(ESMF_MODULES)
# Override default ESMF dependence since embedded ESMF time manager is not used.
ESMF_MOD_DEPENDENCE =   $(ESMF_WRAPPER_DIR)/ESMF_Mod_Wrapper.o
EXTRAMODULES    =       ../share/module_wrf_setservices.o

# TBH:  NOTE:  Get rid of "-DWRF_ESMF_MOD" below once wrf_esmf_mod is no longer needed
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV -DWRF_ESMF_MOD=WRF_ESMF_Mod
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o \
			-L$(ESMF_WRAPPER_DIR) -lesmfwrapper $(ESMF_LIB_FLAGS)
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmfwrapper

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmfwrapper : 
	( cd $(ESMF_WRAPPER_DIR) ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS) -I$(ESMF_MODULES)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF) " )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH	AIX DM-Parallel ESMF     (RSL, IBM-MPI, ESMF coupling and LogErr, supports nesting) EXPERIMENTAL
#
DMPARALLEL      =       1
SFC             =       xlf90_r
SCC             =       xlc_r
FC              =       mpxlf90_r
LD              =       mpxlf90_r
CC              =       mpcc_r
RWORDSIZE       =       4
CFLAGS          =       -DNOUNDERSCORE -DWRF_RSL_IO  -I../external/RSL/RSL -DDM_PARALLEL  \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM         =       -O2 -qarch=auto
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qspill=20000 $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
# begin ESMF paths
ESMF_DIR        =       /home/bluesky/hender/esmf
ESMF_BOPT       =       O
ESMF_ARCH       =       AIX
ESMF_COMPILER   =       default
# TBH:  Link ESMF_PREC with OBJECT_MODE later...  
ESMF_PREC       =       32
# ESMF_PREC       =       64
ESMF_SITE       =       default
ESMF_PATH_TAIL  =       $(ESMF_BOPT)/$(ESMF_ARCH).$(ESMF_COMPILER).$(ESMF_PREC).$(ESMF_SITE)
ESMF_MODULES    =       $(ESMF_DIR)/mod/mod$(ESMF_PATH_TAIL)
ESMF_LIB        =       $(ESMF_DIR)/lib/lib$(ESMF_PATH_TAIL)
ESMF_LIB_FLAGS  =       -L$(ESMF_LIB) -lesmf -brtl -lC
# end ESMF paths
# path to WRF wrapper for ESMF
ESMF_WRAPPER_DIR =      ../external/esmf_wrapper
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I$(ESMF_WRAPPER_DIR) \
                        -I../frame -I../share -I../phys -I../chem -I../inc -I$(ESMF_MODULES)
# Override default ESMF dependence since embedded ESMF time manager is not used.
ESMF_MOD_DEPENDENCE =   $(ESMF_WRAPPER_DIR)/ESMF_Mod_Wrapper.o
EXTRAMODULES    =       ../share/module_wrf_setservices.o

# TBH:  NOTE:  Get rid of "-DWRF_ESMF_MOD" below once wrf_esmf_mod is no longer needed
ARCHFLAGS       =       -DWRF_RSL_IO -DRSL -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   -DYYY -DINTIO \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV -DWRF_ESMF_MOD=WRF_ESMF_Mod \
			-DWRF_ESMF_LOGERR
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl -lmass -lmassv \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o \
			-L$(ESMF_WRAPPER_DIR) -lesmfwrapper $(ESMF_LIB_FLAGS)
LDFLAGS         =	-bmaxstack:256000000 -bmaxdata:2048000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmfwrapper

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmfwrapper : 
	( cd $(ESMF_WRAPPER_DIR) ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS) -I$(ESMF_MODULES)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF) " )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sp2 )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
solve_interface.o : solve_interface.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_force_domain.o \
mediation_interp_domain.o \
mediation_feedback_domain.o \
solve_interface.o                                              \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f

###########################################################
#ARCH       Compaq OSF1 alpha          (single-threaded, no nesting)
#
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE -DYYY
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS)
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time  \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) $(OMP) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha          (single-threaded, nesting using RSL without MPI )
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DM_PARALLEL     =       1
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DNETCDF -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
                        -DLIMIT_ARGS -DFLOATSAFE \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DSTUBMPI
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time  \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) $(OMP) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a gen_comms.c wrfio_int module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	  cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	  make CC="$(CC)" CFLAGS='-DSTUBS -DSWAPBYTES -O' FC="$(FC)" FFLAGS='-O -convert big_endian' \
               MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha SM       (OpenMP, no nesting)
#
OMP             =       -omp
OMPCPP          =       -D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS)
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) $(OMP) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha SM-Parallel       (OpenMP, nesting using RSL without MPI )
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DM_PARALLEL     =       1
OMP             =       -omp
OMPCPP          =       -D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DNETCDF -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
                        -DLIMIT_ARGS -DFLOATSAFE \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DSTUBMPI
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) $(OMP) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a gen_comms.c wrfio_int module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	  cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	  make CC="$(CC)" CFLAGS='-DSTUBS -DSWAPBYTES -O' FC="$(FC)" FFLAGS='-O -convert big_endian' \
               MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH     Compaq OSF1 alpha DM-Parallel       (RSL_LITE, MPICH, no nesting)
#
DMPARALLEL      =       1
OMP             =
OMPCPP          =
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DNETCDF -DYYY -DINTIO \
                        -DDM_PARALLEL -DRSL_LITE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL_LITE
FCOPTIM         =       -fast -O4
FCDEBUG         =       #-g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL_LITE -lrsl_lite  \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE -C -P $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL_LITE/librsl_lite.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha DM-Parallel       (RSL, MPICH, allows nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL      =       1
OMP             =
OMPCPP          =
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time  \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha DM-Parallel/SM-Parallel    (RSL, MPICH, OpenMP, allows nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL      =       1
OMP             =       -omp
OMPCPP          =       -D_OPENMP
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha DM-Parallel/SM-Parallel    (RSL, DECMPI, OpenMP, allows nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL      =       1
OMP             =       -omp
OMPCPP          =       -D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl -lmpi \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC=cc FC=f90 MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha DM-Parallel       (RSL, MPICH, allows nesting, MOVING NESTS EXPERIMENTAL)
#
DMPARALLEL      =       1
OMP             =
OMPCPP          =
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DMOVE_NESTS
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time  \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f

###########################################################
#ARCH       Compaq OSF1 alpha DM-Parallel       (RSL, MPICH, MCEL EXPERIMENTAL)
#
DMPARALLEL      =       1
OMP             =
OMPCPP          =
FC              =       mpif90
LD              =       mpif90 -f90=cxx
CC              =       mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL -DRSL -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DMCELIO
PROMOTION       =       -r$(RWORDSIZE) -i4
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry

LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
                        ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                        -L../external/io_grib1 -lio_grib1 \
-L../external/io_mcel -lwrfio_mcel  \
-L/users/bettenc/MCELSystem/MCEL -lMCEL \
-L/users/bettenc/lib -lOB -lJTC -lrt -lpthread \
-lfor -lm -lnetcdf_c++ -lnetcdf -lpthread -lc -L/users/michalak/mpich/lib -lfmpich -lmpichfsup \
/usr/lib/cmplrs/fortrtl/libUfor.a -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -pthread -ieee -ptr /users/bettenc/ptr -L/users/bettenc/MCELSystem/MCEL -lMCEL -L/users/bettenc/lib -lOB -lJTC -lrt -lpthread -lfor -lm -lnetcdf_c++ -lnetcdf -lpthread -lc
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a wrfio_mcel gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
        if [ $(RWORDSIZE) -eq 8 ] ; then \
          /bin/rm -f foo_io_flags.h; \
          sed -e 's/104/105/' wrf_io_flags.h > foo_io_flags.h ;\
          /bin/mv foo_io_flags.h wrf_io_flags.h ; fi ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

wrfio_mcel :
	( cd ../external/io_mcel ; \
          make CC="$(CC)" FC="f90 $(FCDEBUG) -I../io_netcdf -I../../frame -I../../share \
          -I/users/bettenc/MCELSystem/MCEL -convert big_endian -automatic -cpp -free" all )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
mediation_integrate.o : mediation_integrate.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $(PROMOTION) -O0 $*.f


###########################################################
#ARCH       Compaq OSF1 alpha DM/SM    (BUILD FOR AUTODOC ONLY -- DO NOT USE TO COMPILE CODE)
#
DMPARALLEL      =       1
OMP             =
OMPCPP          =
FC              =       echo # mpif90
LD              =       echo # mpif90
CC              =       echo # mpicc
RWORDSIZE       =       4
ARCHFLAGS       =       -DAUTODOC_BUILD CONFIGURE_NETCDF_FLAG -DYYY -DINTIO -DWRF_RSL_IO \
                        -DDM_PARALLEL="'<b>DM_PARALLEL</b>'" -DRSL="'<b>RSL</b>'" \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DFLOATSAFE \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DMOVE_NESTS
CFLAGS          =       $(ARCHFLAGS) -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /usr/bin/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC        =       1024
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -convert big_endian -automatic -cpp -free -w " )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f

###########################################################
#ARCH       Alpha Linux alpha DM  (single-threaded, no nesting)
#
FC              =       fort
LD              =       fort
CC              =       cc
RWORDSIZE       =       4
CFLAGS          =       -DF2CSTYLE 
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASENOINL     =       -convert big_endian -O1 -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. \
                        -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DYYY -DINTIO -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE  
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o  -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -traditional  $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; \
	  cat  module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASENOINL) $(MODULE_DIRS) $*.f

###########################################################
#ARCH       Alpha Linux alpha SM  (DOES NOT WORK ON JET! No nesting)
#
FC              =       fort
LD              =       fort
CC              =       cc
RWORDSIZE       =       4
CFLAGS          =       -DF2CSTYLE 
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASENOINL     =       -convert big_endian -O1 -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. \
                        -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DYYY -DINTIO -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE  
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o  -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -traditional -C -P `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          /bin/cp module_dm_warning module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASENOINL) $(MODULE_DIRS) $*.f

###########################################################
#ARCH       Alpha Linux alpha DM-Parallel  (RSL, MPICH, support nesting)
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
RWORDSIZE       =       4
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO -DF2CSTYLE \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) \
                        -I../external/RSL/RSL
FCOPTIM         =       -fast -O4
FCDEBUG         =       # -g
FCBASENOINL     =       -convert big_endian -O1 -automatic -cpp -free -I. -arch host $(FCDEBUG)
FCBASEOPTS      =       -w -convert big_endian -automatic -cpp -free -I. \
                        -arch host $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DYYY -DINTIO -DWRF_RSL_IO -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE  
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o \
			-L../external/io_int -lwrfio_int -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -automatic -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DDEC_ALPHA -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -traditional -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ;                   \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCBASENOINL) -w" \
          TRADFLAG="-traditional" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" FC=fort \
          MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) \
          UNDERSCORE=-DF2CSTYLE LEARN_BCAST=-DLEARN_BCAST alpha )

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASENOINL) $(MODULE_DIRS) $*.f

###########################################################
#ARCH       VPP UNIX_System_V F300 5000
#
FC              =       frt
LD              =       frt
CC              =       vcc
RWORDSIZE       =       4
CFLAGS          =
FCFLAGS         =       -Free -X9 -Am
FCFLAGS         =       -Free -X9 -Sw -Wv,-Of,-te,-ilfunc,-noalias,-m3,-P255 -Oe,-P -Kfast -Am
FCBASEOPTS      =       $(FCFLAGS)
EXTRAMODULES    =       
ARCHFLAGS       = CONFIGURE_NETCDF_FLAG -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4  -DTRIEDNTRUE   \
			-DLIMIT_ARGS
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             = 	../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
                        -L../external/io_grib1 -lio_grib1
LDFLAGS         =      -Wl,-P -J
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
LDFLAGS         =      -J
CPP             =       /lib/cpp -C -P
POUND_DEF	=	-DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF  module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="frt" FFLAGS='-Free -X9 -ICONFIGURE_NETCDF_PATH/include' ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

###########################################################
#ARCH	Cray
#
FC		=	f90
CC              =       cc
RWORDSIZE       =       8
CFLAGS          =
FCFLAGS		=	-f free -N 255 -I.
FCBASEOPTS	=	$(FCFLAGS)
EXTRAMODULES    =       
ARCHFLAGS       =       -DCRAY CONFIGURE_NETCDF_FLAG -DIWORDSIZE=8 -DDWORDSIZE=8 -DRWORDSIZE=8 -DLWORDSIZE=8 -DTRIEDNTRUE   \
			-DLIMIT_ARGS
LDFLAGS		=
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/opt/ctl/bin/cpp
POUND_DEF	=	-DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
#LIB             =       CONFIGURE_NETCDF_LIB_PATH 
LIB             = 	../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time  \
                        -L../external/io_grib1 -lio_grib1
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF  esmf_time
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS)" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

solve_interface.o : solve_interface.F
	$(RM) $@
	$(CPP) -I../inc $(CPPFLAGS) $*.F > $*.f
	$(FC) -c -O 0 $(FCFLAGS) $*.f

###########################################################
#ARCH    PC Linux i486 i586 i686, PGI compiler  (Single-threaded, no nesting)
#
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
RWORDSIZE       =       4
SFC             =       $(FC)
CFLAGS          =
FCOPTIM		=	-fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCFLAGS) -byteswapio
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	$(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time wrfio_grib1

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
          FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    PC Linux i486 i586 i686, PGI compiler  (single threaded, supports nesting using RSL without MPI)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SFC             =       pgf90
RWORDSIZE       =       4
FCOPTIM		=	-fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DSTUBMPI
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio $(FCFLAGS)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS='-DSTUBS' FC="$(FC)" FFLAGS='-byteswapio' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH   PC Linux i486 i586 i686, PGI compiler  SM-Parallel (OpenMP, no nesting)
#
OMP             =       -mp
OMPCPP          =       -D_OPENMP
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SFC             =       $(FC)
CFLAGS          =
FCOPTIM		=	-fast
RWORDSIZE       =       4
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(FCFLAGS) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	$(OMPCPP) -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time wrfio_grib1

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
          FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH    PC Linux i486 i586 i686, PGI compiler  SM-Parallel (OpenMP, supports nesting using RSL without MPI)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
OMP             =       -mp
OMPCPP          =       -D_OPENMP
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SFC             =       pgf90
RWORDSIZE       =       4
FCOPTIM		=	-fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DSTUBMPI
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCFLAGS) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  $(OMPCPP) -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS='-DSTUBS' FC="$(FC)" FFLAGS='-byteswapio' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f



###########################################################
#ARCH    PC Linux i486 i586 i686, PGI compiler  DM-Parallel (RSL, MPICH, support nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=pgf90
LD              =       mpif90 -f90=pgf90
CC              =       mpicc -cc=gcc
SFC             =       pgf90
RWORDSIZE       =       4
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
FCOPTIM		=	-fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio $(FCFLAGS)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" FC="$(FC) -byteswapio" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH     PC Linux i486 i586 i686, PGI compiler  DM-Parallel (RSL_LITE, MPICH, No nesting)
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=pgf90
LD              =       mpif90 -f90=pgf90
CC              =       mpicc -cc=gcc
SFC             =       pgf90
RWORDSIZE       =       4
CFLAGS          =       -DDM_PARALLEL \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL_LITE
#FCOPTIM		=	-fastsse 
FCOPTIM		=	-fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree -tp p6 $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree -tp p6 $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio $(FCFLAGS)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC="$(CC)" FC="$(FC) -byteswapio" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    Intel Itanium2 ia64 madison Linux DM-Parallel (e.g. mpp2 at PNNL), efc71 compiler (RSL, MPICH, nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL = 1
MAX_PROC = 2000
FC = mpif90
LD = mpif90
CC = mpicc
SFC = efc
RWORDSIZE       =       4
CFLAGS = -DDM_PARALLEL -DWRF_RSL_IO -w \
         -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL -size_lp64 \
         -I/usr/lib/mpi/mpi_intel/include
FCOPTIM = -O2 -ftz
FCDEBUG = #-g
FCBASEOPTS = $(FCDEBUG) -w -FR -I$(INCLUDE) -w -cm 
FCNOOPTS = -O0 $(FCDEBUG) -FR -I$(INCLUDE) -w -cm 
FCFLAGS = $(FCOPTIM) $(FCBASEOPTS) $(OMP) -size_lp64 
ARCHFLAGS = -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
            -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
            -DTRIEDNTRUE -DLIMIT_ARGS 
INCLUDE_MODULES = ../main -I../external/io_int -I../external/esmf_time_f90 \
                  -I../external -I../frame -I../share -I../phys -I../chem -I../inc \
                  -I/usr/lib/mpi/mpi_intel/include
EXTRAMODULES = 
PERL = perl
REGISTRY = Registry
LIB = -L../external/io_netcdf -lwrfio_nf $(OMP) -LCONFIGURE_NETCDF_PATH/lib -lnetcdf \
                        -L../external/io_grib1 -lio_grib1 \
      -L../external/RSL/RSL -lrsl ../frame/module_internal_header_util.o ../frame/pack_utils.o \
      -L../external/esmf_time_f90 -lesmf_time -lmpifarg -lmpi -lelan -lintrins -lPEPCF90 \
      -limf -lguide -lunwind -lpthread -L/opt/mlib/lib/linux -lveclib8
LDFLAGS = $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =  /lib/cpp -traditional -C -P
POUND_DEF	=  -DNO_RRTM_PHYSICS -DF90_STANDALONE \
                   -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS = -I$(LIBINCLUDE) $(ARCHFLAGS) $(COREDEFS) $(OMPCPP)  \
           -I../external/RSL/RSL -C -EP `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR = ar ru
M4 = m4
RANLIB = ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       ecc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a \
            wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC='mpicc -w -I. '\
	  FC='mpif90 -cm -w ' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCNOOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH      Intel Itanium2 ia64 Linux (eg. Jacaranda), ifort compiler (RSL, no-MPI, allows nesting)
#
#          On Jacaranda, setenv NETCDF /jacaranda/users/michalak/netcdf-3.5.1
#          Built this netcdf by first setenv FC efc and CPPFLAGS '-DNDEBUG -DpgiFortran'
#          before typing configure and make and make install   20040506. JM
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL = 1
MAX_PROC = 1
# for multithreading, uncomment the following
#OMP =    -openmp
#OMPCPP = -DOPEN_MP
FC = ifort
LD = ifort
CC = cc
SFC = ifort
RWORDSIZE       =       4
CFLAGS = -DDM_PARALLEL -DWRF_RSL_IO -cm -w \
         -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL -size_lp64
FCOPTIM = -O2 -ftz
FCDEBUG = #-g
FCBASEOPTS = $(FCDEBUG) -w -FR -I$(INCLUDE) -cm -convert big_endian -mp
FCNOOPTS = -O0 $(FCDEBUG) -FR -I$(INCLUDE) -w -cm 
FCFLAGS = $(FCOPTIM) $(FCBASEOPTS) $(OMP) -size_lp64 
ARCHFLAGS = -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
            -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
            -DTRIEDNTRUE -DLIMIT_ARGS -DSTUBMPI -DIFORT_KLUDGE
INCLUDE_MODULES = ../main -I../external/io_int -I../external/esmf_time_f90 \
                  -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES = 
PERL = perl
REGISTRY = Registry
LIB = -L../external/io_netcdf -lwrfio_nf $(OMP) -LCONFIGURE_NETCDF_PATH/lib -lnetcdf \
                        -L../external/io_grib1 -lio_grib1 \
      -L../external/RSL/RSL -lrsl ../frame/module_internal_header_util.o ../frame/pack_utils.o \
      -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS = $(OMP) -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =  /lib/cpp -traditional -C -P
POUND_DEF	=  -DNO_RRTM_PHYSICS -DF90_STANDALONE \
                   -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS = -I$(LIBINCLUDE) $(ARCHFLAGS) $(COREDEFS) $(OMPCPP)  \
           -I../external/RSL/RSL -C `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR = ar ru
M4 = m4
RANLIB = ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a \
            wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS="-DSTUBS -O" \
	  FC="$(FC)" FCFLAGS="$(FCFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
mediation_interp_domain.o : mediation_interp_domain.F 
mediation_force_domain.o : mediation_force_domain.F 
mediation_feedback_domain.o : mediation_feedback_domain.F 
mediation_integrate.o : mediation_integrate.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
mediation_interp_domain.o  \
mediation_force_domain.o  \
mediation_feedback_domain.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCNOOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH    PC Linux x86_64 (IA64 and Opteron), PGI compiler 5.2 or higher  (Single-threaded, no nesting)
#        Note that for 5.1.x comment out -Mpia=fast
#
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SFC             =       $(FC)
RWORDSIZE       =       4
CFLAGS          =
FCOPTIM		=	-fastsse #-Mipa=fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time wrfio_grib1

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

io_flags:
	( cd ../external/io_netcdf ; make flags_only ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_nf :  io_flags
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
          FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int :  io_flags
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    PC Linux x86_64 (IA64 and Opteron), PGI 5.2 or higher, DM-Parallel  (RSL, MPICH, support nesting)
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#        Note that for 5.1.x comment out -Mpia=fast
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
SFC             =       pgf90
RWORDSIZE       =       4
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
FCOPTIM         =       -fastsse #-Mipa=fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

io_flags:
	( cd ../external/io_netcdf ; make flags_only ; \
	  /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	  /bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 )

wrfio_nf :  io_flags
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' )

wrfio_int :  io_flags
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" FC='mpif90 -byteswapio' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH    PC Linux x86_64 (IA64 and Opteron), PGI 5.2 or higher DM-Parallel   (RSL_LITE, MPICH, No nesting, No periodic LBCs)
#        Note that for 5.1.x comment out -Mpia=fast
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
SFC             =       pgf90
RWORDSIZE       =       4
CFLAGS          =       -DDM_PARALLEL \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL_LITE
FCOPTIM         =       -fastsse #-Mipa=fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_grib1 -lio_grib1 \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

io_flags:
	( cd ../external/io_netcdf ; make flags_only ; \
	  /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	  /bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 )

wrfio_nf :  io_flags
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : io_flags
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC="$(CC)" FC='mpif90 -byteswapio' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f


###########################################################
#ARCH    Intel Itanium2 ia64 madison Linux  (e.g. mpp2 at PNNL) , efc71 compiler DM-Parallel (RSL_LITE, MPICH, no nesting )
# Notes for running on PNNL cluster:
# 
# 1. source /home/oehmen/.mycshrc
# 2. source /home/mscf/intel7.1/compiler70/ia64/bin/efcvars.csh
# 
#
DMPARALLEL = 1
MAX_PROC   = 2000
FC         = mpif90
LD         = mpif90
CC         = mpicc
SFC        = efc
RWORDSIZE       =       4
CFLAGS     = -DDM_PARALLEL -w -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) \
             -I../external/RSL_LITE -size_lp64 -I/usr/lib/mpi/mpi_intel/include
FCOPTIM = -O2 -ftz
FCDEBUG = #-g
FCBASEOPTS = $(FCDEBUG) -w -FR -I$(INCLUDE) -cm 
FCNOOPTS = -O0 $(FCDEBUG) -FR -I$(INCLUDE) -w -cm 
FCFLAGS = $(FCOPTIM) $(FCBASEOPTS) $(OMP) -size_lp64 
ARCHFLAGS = -DDM_PARALLEL \
            -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
            -DTRIEDNTRUE -DLIMIT_ARGS 
INCLUDE_MODULES = ../main -I../external/io_int -I../external/esmf_time_f90 \
                  -I../external -I../frame -I../share -I../phys -I../inc   \
                  -I/usr/lib/mpi/mpi_intel/include
EXTRAMODULES = 
PERL = perl
REGISTRY = Registry
LIB = -L../external/io_netcdf -lwrfio_nf $(OMP) -LCONFIGURE_NETCDF_PATH/lib -lnetcdf -L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_grib1 -lio_grib1 \
      ../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time \
      -lmpifarg -lmpi -lelan -lintrins -lPEPCF90 -limf -lguide -lunwind -lpthread -L/opt/mlib/lib/linux -lveclib8
LDFLAGS = $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP        = /lib/cpp -traditional -C -P -traditional
POUND_DEF  = -DNO_RRTM_PHYSICS -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) \
             -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS   = -I$(LIBINCLUDE) $(ARCHFLAGS) $(COREDEFS) $(OMPCPP) -I$(INCLUDE) \
             -I../external/RSL_LITE -C -EP `cat ../inc/dm_comm_cpp_flags` $(POUND_DEF)
AR = ar ru
M4 = m4
RANLIB = ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       ecc

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a \
            wrfio_int gen_comms.c module_dm.F esmf_time wrfio_grib1

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC='mpicc -w -I.' \
	  FC='mpif90 -cm -w ' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCNOOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH titan.ncsa.uiuc.edu specific Intel Itanium2 ia64 mckinley Linux, efc compiler DM-Parallel (RSL, VMI, allows nesting) 
#
# Consider 'setenv F_UFMTENDIAN big' in your run scripts for big-endian output
# Note hard-coded paths to Mark Straka's accounts and ecc6 libs
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL = 1
#OMP = -openmp
#OMPCPP = -D_OPENMP
INCLUDE = ../external/io_netcdf/
MAX_PROC = 256
FC = efc -I.. -I/usr/local/vmi/mpich/include
LD = efc
CC = ecc -I. -I/usr/local/vmi/mpich/include
SFC = efc
RWORDSIZE       =       4
CFLAGS = -DDM_PARALLEL -DWRF_RSL_IO \
-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL -size_lp64
FCOPTIM = -O3 -ftz
FCDEBUG = #-g
FCBASEOPTS = $(FCDEBUG) -w -FR -I$(INCLUDE) -I. -cm
FCFLAGS = $(FCOPTIM) $(FCBASEOPTS) $(OMP) -size_lp64
ARCHFLAGS = -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
-DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
-DTRIEDNTRUE  
INCLUDE_MODULES = ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
-I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES =
PERL = perl
REGISTRY = Registry
LIB = -Vaxlib -L../external/io_netcdf -lwrfio_nf $(OMP) -L/u/ncsa/straka/AUGUST.test/WRFV1/netcdfintel7/lib -lnetcdf -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
-L../external/io_int -lwrfio_int \
../frame/module_internal_header_util.o ../frame/pack_utils.o -L/usr/local/vmi/mpich/lib/ecc6 -lmpich -lfmpich -lvmi -ldl -lpthread -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS = $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP = /lib/cpp -C -P -traditional
POUND_DEF = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS = -traditional -I$(LIBINCLUDE) -C -P $(COREDEFS) $(ARCHFLAGS) $(OMPCPP) -I$(INCLUDE) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF) $(COREDEFS)
AR = ar ru
M4 = m4
RANLIB = ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       ecc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time io_grib1

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) -Vaxlib -I../.. $(FCFLAGS) -w" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="efc -Vaxlib -I/usr/local/vmi/mpich/include $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

#../external/RSL/RSL/librsl.a :
#	( cd ../external/RSL/RSL ; \
#          make MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) \
#               LEARN_BCAST=-DLEARN_BCAST o2k )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC='ecc -Vaxlib -I. -cm -w -I/usr/local/vmi/mpich/include '\
	  FC='efc -cm -w -Vaxlib -I../../.. ' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH titan.ncsa.uiuc.edu specific Intel Itanium2 ia64 mckinley Linux, efc compiler DM-Parallel (RSL_LITE, VMI, no nesting)
#
# Consider 'setenv F_UFMTENDIAN big' in your run scripts for big-endian output
# Note hard-coded paths to Mark Straka's accounts and ecc6 libs
#
DMPARALLEL = 1
INCLUDE = ../external/io_netcdf/
MAX_PROC = 256
FC = efc -I.. -I/usr/local/vmi/mpich/include
LD = efc
CC = ecc -I. -I/usr/local/vmi/mpich/include
SFC = efc
RWORDSIZE       =       4
CFLAGS = -DDM_PARALLEL -I../external/RSL_LITE \
-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -size_lp64
FCOPTIM = -O3 -ftz
FCDEBUG = #-g
FCBASEOPTS = $(FCDEBUG) -w -FR -I$(INCLUDE) -I. -cm
FCFLAGS = $(FCOPTIM) $(FCBASEOPTS) $(OMP) -size_lp64
ARCHFLAGS = -DRSL_LITE -DDM_PARALLEL \
-DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
-DTRIEDNTRUE  
INCLUDE_MODULES = ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
-I../external -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES =
PERL = perl
REGISTRY = Registry
LIB = -Vaxlib -L../external/io_netcdf -lwrfio_nf $(OMP) -L/u/ncsa/straka/AUGUST.test/WRFV1/netcdfintel7/lib -lnetcdf -L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_grib1 -lio_grib1 \
-L../external/io_int -lwrfio_int \
../frame/module_internal_header_util.o ../frame/pack_utils.o -L/usr/local/vmi/mpich/lib/ecc6 -lmpich -lfmpich -lvmi -ldl -lpthread -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS = $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP = /lib/cpp -C -P -traditional
POUND_DEF = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS = -traditional -I$(LIBINCLUDE) -C -P $(COREDEFS) $(ARCHFLAGS) $(OMPCPP) -I$(INCLUDE) -I../external/RSL_LITE -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF) $(COREDEFS)
AR = ar ru
M4 = m4
RANLIB = ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       ecc

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) -Vaxlib -I../.. $(FCFLAGS) -w" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="efc -Vaxlib -I/usr/local/vmi/mpich/include $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC='ecc -Vaxlib -I. -cm -w -I/usr/local/vmi/mpich/include \
	' FC='efc -cm -w -Vaxlib -I../../.. ' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH Intel xeon i686 ia32 Xeon Linux, ifort compiler (single-threaded, no nesting)
#
OMP             =
OMPCPP          =
FC		=	ifort
CC              =       icc
SFC		=	$(FC)
RWORDSIZE       =       4
FCBASEOPTS      =       -w -FR -cm -I. -Vaxlib -convert big_endian -mp
FCOPTIM		=	-O2
FCFLAGS		=	$(FCOPTIM) $(FCBASEOPTS) $(OMP)
CFLAGS		=       -w
EXTRAMODULES    =       
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DLIMIT_ARGS -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE -DIFORT_KLUDGE
LD		=	$(FC)
LDFLAGS		=	$(FCFLAGS) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp -traditional
POUND_DEF	=	$(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE \
                        -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =	CONFIGURE_NETCDF_LIB_PATH ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                        -L../external/esmf_time_f90 -lesmf_time 
AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -FR -I. -w" ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCFLAGS) -w")

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
wrf_bdyin.o : wrf_bdyin.F
wrf_bdyout.o : wrf_bdyout.F
wrf_histin.o : wrf_histin.F
wrf_histout.o : wrf_histout.F
wrf_inputin.o : wrf_inputin.F
wrf_inputout.o : wrf_inputout.F
wrf_restartin.o : wrf_restartin.F
wrf_restartout.o : wrf_restartout.F
module_configure.o : module_configure.F

module_configure.o \
wrf_bdyin.o wrf_bdyout.o  \
wrf_histin.o wrf_histout.o  \
wrf_inputin.o wrf_inputout.o  \
wrf_restartin.o wrf_restartout.o  \
solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    Intel xeon i686 ia32 Xeon Linux, ifort compiler  (single threaded, supports nesting using RSL without MPI)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
OMP             =
OMPCPP          =
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       ifort
LD              =       ifort
CC              =       icc
SFC             =       ifort
RWORDSIZE       =       4
FCOPTIM		=	-O3 -xW
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -mp
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DSTUBMPI -DIFORT_KLUDGE
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP) -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS $(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DYYY
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCFLAGS) -w")

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" CFLAGS="-DSTUBS $(CFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH   Intel xeon i686 ia32 Xeon Linux, ifort compiler (OpenMP)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
#
OMP             =       -openmp -fpp -auto
OMPCPP          =       -D_OPENMP
FC              =       ifort
LD              =       ifort
CC              =       gcc
SFC             =       $(FC)
RWORDSIZE       =       4
CFLAGS          =
FCOPTIM		=	-O3 -xW
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -mp
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DIFORT_KLUDGE
INCLUDE_MODULES =       -I ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time
LDFLAGS         =	$(FCFLAGS) $(FCFLAGS) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	$(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DYYY
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
          FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCFLAGS) -w")

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    Intel xeon i686 ia32 Xeon Linux, ifort compiler SM-Parallel (OpenMP, supports nesting using RSL without MPI)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
OMP             =       -openmp -fpp -auto
OMPCPP          =       -D_OPENMP
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       ifort
LD              =       ifort
CC              =       icc
SFC             =       ifort
RWORDSIZE       =       4
FCOPTIM		=	-O3 -xW
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -mp
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DSTUBMPI -DIFORT_KLUDGE
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time $(OMP)
LDFLAGS         =       $(FCOPTIM) -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS $(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DYYY
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCFLAGS) -w")

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC)" CFLAGS="-DSTUBS $(CFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH    Intel xeon i686 ia32 Xeon Linux, ifort compiler  DM-Parallel (RSL, MPICH, supports nesting)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=ifort
LD              =       mpif90 -f90=ifort
CC              =       mpicc -cc=icc
SFC             =       ifort
RWORDSIZE       =       4
FCOPTIM		=	-O3 -xW
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -mp
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       -DDEREF_KLUDGE -DIO_DEREF_KLUDGE -DYYY -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DTRIEDNTRUE -DMPI  \
			-DLIMIT_ARGS -DIFORT_KLUDGE 
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO $(ARCHFLAGS) \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) -convert big_endian
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  $(COREDEFS) -DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DYYY
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC)" TRADFLAG="-traditional" \
	  FFLAGS='$(FCFLAGS) -ICONFIGURE_NETCDF_PATH/include -w' ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) -I. $(FCDEBUG) $(FCFLAGS) -w")

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS="$(CFLAGS)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f

###########################################################

#ARCH NEC SUPER-UX SX-6 (serial)

#***** some sx f90 compiler options***********
# -V : version # of f90 command to stderr
#-EP : activate cpp preprocessor to perform conditional compiling: output as i.[filename]
#-Ep: activate cpp preprocessor to perfomr conditional compiling
   #****However, cpp also activated by using .F or .F90 suffixes...
# -Wf: specifies option string of the f90/sx detailed options
#-g: debug info generated in object file for dbx symbolic debugging
# -ew : all numbers size=8bytes
#-eW: 4 bytes
# -float0: default and only -float(number) option for sx6
# -USX: unname the prev. defined reserved symbol SX of the preprocessor
   # -U overrides -D, so '-USX  -D$(RUNTIMESYSTEM)'  might be redundant
# -p: object file in execution format corresp. to 'prof' command be generated
# -f4: input source program is described in F90 standard free format
# -w: only syntax diagnostic messages at the fatal level are output
# -C: specifies compile mode
#   ssafe: only safe optimization in scalar mode (minimize side effects of 
#          opt. no loop unrolling, etc
# -init : init stack and heap areas
# -L fmtlist summary stdout: formatted list, transformation lists, summary list are output to stdout

RUNTIME_SYSTEM	=	sx
MPP_TARGET	=	$(RUNTIME_SYSTEM)
FC		=	f90
CC		=	cc
LD		=	$(FC)
RWORDSIZE       =       8
ARCHFLAGS	=	-DNETCDF -DINTIO -DWRF_RSL_IO -DIWORDSIZE=8 -DDWORDSIZE=8 -DRWORDSIZE=8 -DLWORDSIZE=8 -DTRIEDNTRUE -DONLY_WRFMODEL_IO -DLIMIT_ARGS -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
		##for DM compilation	-DDM_PARALLEL -DRSL 

CFLAGS		=	$(ARCHFLAGS)
#CFLAGS		=	$(ARCHFLAGS) -DMPI -Dvpp -I../external/RSL/RSL

FCFLAGS		=	-w -Ep -C ssafe \
			-sx6 -USX -ew -D$(RUNTIME_SYSTEM) -I$(LIBINCLUDE) -I../inc -f4 
		#	-Wf"-init stack=zero heap=zero" 
		#         -Wf"-L transform fmtlist summary stdout" -g
FCBASEOPTS	=	$(FCFLAGS) -w

INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  \
                        -I../external/esmf_time_f90 -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES    =       
PERL            =       perl
REGISTRY        =       Registry
LIB             =       -L../external/io_netcdf -lwrfio_nf -L/usr/local/netcdf/current/lib -lnetcdf -L../external/io_int -lwrfio_int \
                     #   -L../external/RSL/RSL -lrsl \
			-L../external/esmf_time_f90 -lesmf_time \
			../frame/module_internal_header_util.o ../frame/pack_utils.o

#-lmpi for 4byte storage, -lmpiw for 8 byte storage 
#LDOPTIONS	=	-lmpiw -ew 
CPP		=	/lib/cpp 
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF) $(ARCHFLAGS)
#CPPFLAGS = -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL  `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) -DSYSTEM_CALL_OK -DMPI -Dvpp

MAX_PROC = 8
MAKE = make -i -r
AWK = awk
SED = sed
CAT = cat
CUT = cut
EXPAND = expand
AR = ar ru
M4 = m4 -B10000
RANLIB = ar ru     
NETCDFPATH = /usr/local/netcdf/current
CC_TOOLS        =       $(CC)
ARCH_OBJS = milliclock.o
ASSUME_HOMOGENEOUS_ENVIRONMENT = 1
FLIC_MACROS = LMvpp.m4
VECTOR = 1


externals : wrfio_nf wrfio_int  esmf_time  module_dm.F
	( /sbin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F:
	( /sbin/cp module_dm_warning module_dm.F ; \
	  cat module_dm_stubs.F  >> module_dm.F )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=/usr/local/netcdf/current FC="$(FC) $(FCFLAGS)"  ; \
 	  /sbin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; )


wrfio_int :
	( cd ../external/io_int ; \
	  make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS)" all )

esmf_time :
	( cd ../external/esmf_time_f90 ;\
 	make FC="$(FC) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) $(CPPFLAGS) -I../../inc " )

#sx : uses makefile.sx in the directory
#../external/RSL/RSL/librsl.a :
#	(cd ../external/RSL/RSL ; \
#	make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST sx )
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F
   
solve_interface.o                                              \
module_configure.o                                             \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH   SGI Altix, Intel Itanium2 ia64 Linux, ifort compiler DM-Parallel (RSL, SGI MPI, Black-Belt opts, allows nesting)
#
#  'setenv F_UFMTENDIAN big' in run scripts not necessary
#  since -convert big_endian is in FCBASEOPTS
#  Change MPI_HOME if SGI's MPI is not in the default directories
#
#  Process pinning should be used -- set the environment
#  variable MPI_DSM_DISTRIBUTE on a dedicated system, when
#  running through the cpuset command, or when using a batch
#  scheduler that has dynamic cpuset support enabled.  In
#  other cases, if specific processors are known to be free,
#  the environment variable MPI_DSM_CPULIST may be used
#  (details in 'man mpi').
#
# Contributed settings from Gerardo Cisneros, SGI
#
# Note: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#
#
DMPARALLEL        = 1
INCLUDE           = ../external/io_netcdf/
MAX_DOMAINS       = 7
MAX_PROC          = 1024
MPI_HOME          = /usr
FC                = ifort -I..
LD                = ifort
CC                = icc -I.
CC_TOOLS          = cc
SFC               = ifort
RWORDSIZE         = 4
CFLAGS            = -w -O3 -ip -tpp2 -c -ftz -no-gcc -DDM_PARALLEL -DWRF_RSL_IO \
                    -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
FCOPTIM           = -O3
FCDEBUG           = # -g
FCBASEOPTS        = -w -ip -tpp2 -ftz -FR -convert big_endian -mp $(FCDEBUG) \
                     -fno-alias -fno-fnalias -align all \
                     -mP3OPT_ecg_mm_fp_ld_latency=20 \
                     -mP3OPT_ecg_non_ieee_sqrt=T -mP3OPT_ecg_non_ieee_div=T  \
                     -mP3OPT_ecg_non_ieee_rcpsqrt=T -mP3OPT_ecg_non_ieee_rcp=T -I$(INCLUDE) -I. 
FCFLAGS           = $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS         = -DYYY -DINTIO -DWRF_RSL_IO -DRSL  -DDM_PARALLEL -DIWORDSIZE=4 \
                    -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                    -DTRIEDNTRUE -DLIMIT_ARGS -DIFORT_KLUDGE
# -DONLY_WRFMODEL_IO
INCLUDE_MODULES   = -I../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                    -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES      =
PERL              = perl
REGISTRY          = Registry
LIB               = -L../external/io_netcdf -lwrfio_nf $(OMP) \
                    -L../external/io_grib1 -lio_grib1 \
                    CONFIGURE_NETCDF_LIB_PATH \
                    -L../external/RSL/RSL -lrsl \
                    -L../external/io_int -lwrfio_int \
                    ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                    -L$(MPI_HOME)/lib -lmpi -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS           = -O3 -ip $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP               = /lib/cpp -C -P -traditional
POUND_DEF         = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS          = -I$(LIBINCLUDE) -C -P -traditional $(COREDEFS) $(ARCHFLAGS) $(OMPCPP) \
                    -I$(INCLUDE) -I../external/RSL/RSL `cat ../inc/dm_comm_cpp_flags` \
                    $(POUND_DEF) $(ENVCOMPDEFS) $(COREDEFS)
AR                = ar ru
M4                = m4
RANLIB            = ranlib
NETCDFPATH	  = CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" \
          FC="$(FC) -I../.. $(FCFLAGS)" \
          TRADFLAG="-traditional" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make IDIR="-I$(MPI_HOME)/include" \
	 MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) \
	 LEARN_BCAST=-DLEARN_BCAST altix )

# compile these without high optimization to speed compile
module_configure.o : module_configure.F
mediation_integrate.o : mediation_integrate.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
wrf_auxinput1out.o : wrf_auxinput1out.F
wrf_histout.o : wrf_histout.F
wrf_restartout.o : wrf_restartout.F
wrf_inputin.o : wrf_inputin.F
wrf_auxinput1in.o : wrf_auxinput1in.F
wrf_histin.o : wrf_histin.F
wrf_restartin.o : wrf_restartin.F
module_initialize_real.o: module_initialize_real.F
solve_interface.o : solve_interface.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_force_domain.o : mediation_force_domain.F

module_configure.o \
mediation_integrate.o mediation_interp_domain.o mediation_feedback_domain.o \
wrf_auxinput1out.o wrf_histout.o wrf_restartout.o wrf_inputin.o \
wrf_auxinput1in.o wrf_histin.o wrf_restartin.o module_initialize_real.o \
module_domain.o module_dm.o module_io_wrf.o start_domain.o solve_interface.o \
mediation_force_domain.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) -O0 $(MODULE_DIRS) $*.f

###########################################################
#ARCH   SGI Altix, Intel Itanium2 ia64 Linux, ifort compiler DM-Parallel (RSL_LITE, VMI, SGI MPI, no nesting, Black-Belt opts)
#
#  'setenv F_UFMTENDIAN big' in run scripts not necessary
#  since -convert big_endian is in FCBASEOPTS
#  Change MPI_HOME if SGI's MPI is not in the default directories
#
#  Process pinning should be used -- set the environment
#  variable MPI_DSM_DISTRIBUTE on a dedicated system, when
#  running through the cpuset command, or when using a batch
#  scheduler that has dynamic cpuset support enabled.  In
#  other cases, if specific processors are known to be free,
#  the environment variable MPI_DSM_CPULIST may be used
#  (details in 'man mpi').
#
# Contributed settings from Gerardo Cisneros, SGI
#
DMPARALLEL        = 1
INCLUDE           = ../external/io_netcdf/
MAX_PROC          = 1024
MPI_HOME          = /usr
FC                = ifort -I..
LD                = ifort
CC                = icc -I.
CC_TOOLS          = cc
SFC               = ifort
RWORDSIZE         = 4
CFLAGS            = -w -O3 -ip -tpp2 -c -ftz -DDM_PARALLEL -I../external/RSL_LITE \
                    -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
FCOPTIM           = -O3
FCDEBUG           = # -g
FCBASEOPTS        = -w -ip -tpp2 -ftz -FR -convert big_endian $(FCDEBUG) \
                     -fno-alias -fno-fnalias -align all \
                     -mP3OPT_ecg_mm_fp_ld_latency=20 \
                     -mP3OPT_ecg_non_ieee_sqrt=T -mP3OPT_ecg_non_ieee_div=T  \
                     -mP3OPT_ecg_non_ieee_rcpsqrt=T -mP3OPT_ecg_non_ieee_rcp=T -I$(INCLUDE) -I. 
FCFLAGS           = $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS         = -DYYY -DINTIO -DRSL_LITE -DDM_PARALLEL \
                    -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
                    -DTRIEDNTRUE -DONLY_WRFMODEL_IO
INCLUDE_MODULES   = -I../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                    -I../external -I../frame -I../share -I../phys -I../chem -I../inc
EXTRAMODULES      =
PERL              = perl
REGISTRY          = Registry
LIB               = -L../external/io_netcdf -lwrfio_nf $(OMP) \
                    CONFIGURE_NETCDF_LIB_PATH \
                    -L../external/RSL_LITE -lrsl_lite \
                    -L../external/io_grib1 -lio_grib1 \
                    -L../external/io_int -lwrfio_int \
                    ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                    -L$(MPI_HOME)/lib -lmpi -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS           = -O3 -ip $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP               = /lib/cpp -C -P -traditional
POUND_DEF         = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS          = -I$(LIBINCLUDE) -C -P -traditional $(COREDEFS) $(ARCHFLAGS) $(OMPCPP) \
                    -I$(INCLUDE) -I../external/RSL_LITE -C -P `cat ../inc/dm_comm_cpp_flags` \
                    $(POUND_DEF) $(ENVCOMPDEFS) $(COREDEFS)
AR                = ar ru
M4                = m4
RANLIB            = ranlib
NETCDFPATH	  = CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
          cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) -I../.. $(FCFLAGS)" \
          TRADFLAG="-traditional" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC='icc -I. -w -O3 -I$(MPI_HOME)/include '\
	 FC='ifort -w -O3 -I../../.. ' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) )

# compile these without high optimization to speed compile
mediation_integrate.o : mediation_integrate.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
wrf_auxinput1out.o : wrf_auxinput1out.F
wrf_histout.o : wrf_histout.F
wrf_restartout.o : wrf_restartout.F
wrf_inputin.o : wrf_inputin.F
wrf_auxinput1in.o : wrf_auxinput1in.F
wrf_histin.o : wrf_histin.F
wrf_restartin.o : wrf_restartin.F
module_initialize_real.o: module_initialize_real.F
solve_interface.o : solve_interface.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
start_domain.o : start_domain.F
mediation_force_domain.o : mediation_force_domain.F
module_configure.o : module_configure.F

mediation_integrate.o mediation_interp_domain.o mediation_feedback_domain.o \
module_configure.o                                              \
wrf_auxinput1out.o wrf_histout.o wrf_restartout.o wrf_inputin.o \
wrf_auxinput1in.o wrf_histin.o wrf_restartin.o module_initialize_real.o \
module_domain.o module_io_wrf.o start_domain.o solve_interface.o \
mediation_force_domain.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) -O0 $(MODULE_DIRS) $*.f


###########################################################
#ARCH   SGI Altix, Intel Itanium2 ia64 Linux, ifort compiler (OpenMP, no nesting, Black-Belt opts)
#
#  'setenv F_UFMTENDIAN big' in run scripts not necessary
#  since -convert big_endian is in FCBASEOPTS
#  Change MPI_HOME if SGI's MPI is not in the default directories
#
# Contributed settings from Gerardo Cisneros, SGI
#
OMP               = -openmp
OMPCPP            = -D_OPENMP
INCLUDE           = ../external/io_netcdf/
FC                = ifort -I..
LD                = ifort
CC                = icc -I.
CC_TOOLS          = cc
SFC               = ifort
RWORDSIZE         = 4
CFLAGS            = -w -O3 -ip -tpp2 -c -ftz 
FCOPTIM           = -O3
FCDEBUG           = # -g
FCBASEOPTS        = -w -ip -tpp2 -ftz -FR -convert big_endian $(FCDEBUG) \
                     -fno-alias -fno-fnalias -align all \
                     -mP3OPT_ecg_mm_fp_ld_latency=20 \
                     -mP3OPT_ecg_non_ieee_sqrt=T -mP3OPT_ecg_non_ieee_div=T  \
                     -mP3OPT_ecg_non_ieee_rcpsqrt=T -mP3OPT_ecg_non_ieee_rcp=T -I$(INCLUDE) -I. 
FCFLAGS           = $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS         = -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
                    -DTRIEDNTRUE -DONLY_WRFMODEL_IO
INCLUDE_MODULES   = -I../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                    -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES      =
PERL              = perl
REGISTRY          = Registry
LIB               = -L../external/io_netcdf -lwrfio_nf $(OMP) \
                    CONFIGURE_NETCDF_LIB_PATH \
                    -L../external/io_int -lwrfio_int \
                    -L../external/io_grib1 -lio_grib1 \
                    ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                    -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS           = -O3 -ip $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP               = /lib/cpp -C -P -traditional
POUND_DEF         = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS          = -I$(LIBINCLUDE) -C -P -traditional $(COREDEFS) $(ARCHFLAGS) $(OMPCPP) \
                    -I$(INCLUDE) -C -P `cat ../inc/dm_comm_cpp_flags` \
                    $(POUND_DEF) $(ENVCOMPDEFS) $(COREDEFS)
AR                = ar ru
M4                = m4
RANLIB            = ranlib
NETCDFPATH	  = CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; \
          cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) -I../.. $(FCFLAGS)" \
          TRADFLAG="-traditional" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )
#	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
#	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
#	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
mediation_integrate.o : mediation_integrate.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
wrf_auxinput1out.o : wrf_auxinput1out.F
wrf_histout.o : wrf_histout.F
wrf_restartout.o : wrf_restartout.F
wrf_inputin.o : wrf_inputin.F
wrf_auxinput1in.o : wrf_auxinput1in.F
wrf_histin.o : wrf_histin.F
wrf_restartin.o : wrf_restartin.F
module_initialize_real.o: module_initialize_real.F
solve_interface.o : solve_interface.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
start_domain.o : start_domain.F
mediation_force_domain.o : mediation_force_domain.F
module_configure.o : module_configure.F

mediation_integrate.o mediation_interp_domain.o mediation_feedback_domain.o \
module_configure.o                                              \
wrf_auxinput1out.o wrf_histout.o wrf_restartout.o wrf_inputin.o \
wrf_auxinput1in.o wrf_histin.o wrf_restartin.o module_initialize_real.o \
module_domain.o module_io_wrf.o start_domain.o solve_interface.o \
mediation_force_domain.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) -O0 $(MODULE_DIRS) $*.f


###########################################################
#ARCH   SGI Altix, Intel Itanium2 ia64 Linux, ifort compiler (Single-processor, no nesting, Black-Belt opts)
#
#  'setenv F_UFMTENDIAN big' in run scripts not necessary
#  since -convert big_endian is in FCBASEOPTS
#  Change MPI_HOME if SGI's MPI is not in the default directories
#
# Contributed settings from Gerardo Cisneros, SGI
#
INCLUDE           = ../external/io_netcdf/
FC                = ifort -I..
LD                = ifort
CC                = icc -I.
CC_TOOLS          = cc
SFC               = ifort
RWORDSIZE         = 4
CFLAGS            = -w -O3 -ip -tpp2 -c -ftz 
FCOPTIM           = -O3
FCDEBUG           = # -g
FCBASEOPTS        = -w -ip -tpp2 -ftz -FR -convert big_endian $(FCDEBUG) \
                     -fno-alias -fno-fnalias -align all \
                     -mP3OPT_ecg_mm_fp_ld_latency=20 \
                     -mP3OPT_ecg_non_ieee_sqrt=T -mP3OPT_ecg_non_ieee_div=T  \
                     -mP3OPT_ecg_non_ieee_rcpsqrt=T -mP3OPT_ecg_non_ieee_rcp=T -I$(INCLUDE) -I. 
FCFLAGS           = $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS         = -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DNETCDF \
                    -DTRIEDNTRUE -DONLY_WRFMODEL_IO
INCLUDE_MODULES   = -I../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                    -I../external -I../frame -I../share -I../phys -I../inc
EXTRAMODULES      =
PERL              = perl
REGISTRY          = Registry
LIB               = -L../external/io_netcdf -lwrfio_nf \
                    CONFIGURE_NETCDF_LIB_PATH \
                    -L../external/io_int -lwrfio_int \
                    -L../external/io_grib1 -lio_grib1 \
                    ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                    -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS           = -O3 -ip 
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP               = /lib/cpp -C -P -traditional
POUND_DEF         = -DNO_RRTM_PHYSICS  -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS          = -I$(LIBINCLUDE) -C -P -traditional $(COREDEFS) $(ARCHFLAGS) \
                    -I$(INCLUDE) -C -P `cat ../inc/dm_comm_cpp_flags` \
                    $(POUND_DEF) $(ENVCOMPDEFS) $(COREDEFS)
AR                = ar ru
M4                = m4
RANLIB            = ranlib
NETCDFPATH	  = CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; \
          cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) -I../.. $(FCFLAGS)" \
          TRADFLAG="-traditional" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )
#	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
#	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
#	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" TRADFLAG="-traditional" \
          FC="ifort -I$(MPI_HOME)/include $(FCDEBUG) $(FCFLAGS)" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
mediation_integrate.o : mediation_integrate.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
wrf_auxinput1out.o : wrf_auxinput1out.F
wrf_histout.o : wrf_histout.F
wrf_restartout.o : wrf_restartout.F
wrf_inputin.o : wrf_inputin.F
wrf_auxinput1in.o : wrf_auxinput1in.F
wrf_histin.o : wrf_histin.F
wrf_restartin.o : wrf_restartin.F
module_initialize_real.o: module_initialize_real.F
solve_interface.o : solve_interface.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
start_domain.o : start_domain.F
mediation_force_domain.o : mediation_force_domain.F
module_configure.o : module_configure.F

mediation_integrate.o mediation_interp_domain.o mediation_feedback_domain.o \
module_configure.o                                              \
wrf_auxinput1out.o wrf_histout.o wrf_restartout.o wrf_inputin.o \
wrf_auxinput1in.o wrf_histin.o wrf_restartin.o module_initialize_real.o \
module_domain.o module_io_wrf.o start_domain.o solve_interface.o \
mediation_force_domain.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) -O0 $(MODULE_DIRS) $*.f


###########################################################
#ARCH   UNICOS/mp  machine crayx1 (RSL_LITE, MPI, MSP mode)

#
#  Cray X1 (RSL_LITE, MPI, MSP mode)
#  For CSD mode set numtiles=4 in &domains section
#  in namelist.input for best MSP efficiency.
#
DMPARALLEL      =       1
FC              =       ftn
LD              =       ftn
CC              =       cc

#### Override default sed command and script for Fortran source files ####
#### This sed script converts !$OMP directives to !csd$ directives ####
SED_FTN = sed -f ../arch/cray_csd.sed

## Use these for X1 cross compiler to build Registry
##X1_CROSS_COMP = "gcc"
##X1_CROSS_CFLG = ""
## Use these for X1 native (trigger) compiler
X1_CROSS_COMP = "cc"
X1_CROSS_CFLG = "-hcommand"
CC_TOOLS        = 	$(X1_CROSS_COMP) $(X1_CROSS_CFLG)

FCBASEOPTS      =       -f free -N 255 -I. -Oscalar1 -Ovector0 -Ostream0 -x omp
FCFLAGS         =       -f free -N 255  -I. -Ofp3 -O3 -x omp -Ogen_private_callee
FCFLAGS2        =       -f free -N 255  -I. -Ofp2 -O1 -x omp -Ogen_private_callee
# MSP (non-CSD mode)
#FCFLAGS2        =       -f free -N 255  -I. -Ofp3 -x omp,csd -Ostream1 -Ovector3 
CFLAGS          =       -I../external/RSL_LITE -DMAXDOM_MAKE=$(MAX_DOMAINS) \
                        -DMAXPROC_MAKE=$(MAX_PROC) -DDM_PARALLEL -UCRAY -Dcrayx1 -h gen_private_callee

INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
			-p../external/io_netcdf -p../external/io_int -p../frame \
                        -p../frame -I ../frame -p../share -p../phys -p../inc \
                        -p../dyn_em -p../dyn_eh -p../dyn_exp -p ../external/esmf_time_f90
EXTRAMODULES    =       
RWORDSIZE         = 4
ARCHFLAGS       =       -DRSL_LITE -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE  -DINTIO \
			-DLIMIT_ARGS -DONLY_WRFMODEL_IO -Dcrayx1

PERL            =       perl
REGISTRY        =       Registry

LIB             =       -L../external/io_netcdf -lwrfio_nf CONFIGURE_NETCDF_LIB_PATH \
			-L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o \
			-L../external/esmf_time_f90 -lesmf_time -lmalloc

LDFLAGS         =       -Ogen_private_callee -p../external/io_netcdf -p../external/io_int -p../frame \
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
                        -p../frame -I ../frame -p../share -p../phys -p../inc \
                        -p../dyn_em -p../dyn_eh -p../dyn_exp 

CPP		=	cpp -C -P 
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) # -DNO_NAMELIST_PRINT
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)

AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP) -Dcrayx1" FC="$(FC) -f free -N 255 " ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP) -Dcrayx1" FC="$(FC) -f free -N 255" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) -f free -N 255" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CFLAGS="$(CFLAGS)" CC="$(CC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
convert_nmm.o : convert_nmm.F

module_io_mm5.o module_si_io.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_interp_domain.o \
mediation_force_domain.o \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS)  $*.f

# compile at intermediate opt
# for MSP (non-CSD) mode
#module_bc.o: module_bc.F
#module_bc.o:
# for MSP (CSD) mode
module_sf_slab.o: module_sf_slab.F
module_sf_slab.o:
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS2) $(MODULE_DIRS)  $*.f


###########################################################
#ARCH   UNICOS/mp  machine crayx1 (RSL_LITE, MPI, OpenMP)

#
#  Cray X1 (RSL_LITE, MPI, OpenMP)
#
DMPARALLEL      =       1
FC              =       ftn
LD              =       ftn
CC              =       cc

## Use these for X1 cross compiler to build Registry
##X1_CROSS_COMP = "gcc"
##X1_CROSS_CFLG = ""
## Use these for X1 native (trigger) compiler
X1_CROSS_COMP = "cc"
X1_CROSS_CFLG = "-hcommand"
CC_TOOLS        = 	$(X1_CROSS_COMP) $(X1_CROSS_CFLG)

FCBASEOPTS      =       -f free -N 255 -I. -Oscalar1 -Ovector0 -Ostream0 -x csd -Ossp
FCFLAGS         =       -f free -N 255  -I. -Ofp3 -O3 -x csd -Ossp
FCFLAGS2        =       -f free -N 255  -I. -Oipa1 -Ofp2 -x csd -O3 -Ossp
CFLAGS          =       -I../external/RSL_LITE -DMAXDOM_MAKE=$(MAX_DOMAINS) \
                        -DMAXPROC_MAKE=$(MAX_PROC) -DDM_PARALLEL -UCRAY -Dcrayx1 -h ssp

INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc \
			-p../external/io_netcdf -p../external/io_int -p../frame \
                        -p../frame -I ../frame -p../share -p../phys -p../inc \
                        -p../dyn_em -p../dyn_eh -p../dyn_exp -p ../external/esmf_time_f90
EXTRAMODULES    =       
RWORDSIZE       = 4
ARCHFLAGS       =       -D_OPENMP -DRSL_LITE -DDM_PARALLEL -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE  -DINTIO \
			-DLIMIT_ARGS -DONLY_WRFMODEL_IO -Dcrayx1

PERL            =       perl
REGISTRY        =       Registry

LIB             =       -L../external/io_netcdf -lwrfio_nf CONFIGURE_NETCDF_LIB_PATH \
			-L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_int -lwrfio_int  \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o \
			-L../external/esmf_time_f90 -lesmf_time -lmalloc

LDFLAGS         =       -Ossp -p../external/io_netcdf -p../external/io_int -p../frame \
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
                        -p../frame -I ../frame -p../share -p../phys -p../inc \
                        -p../dyn_em -p../dyn_eh -p../dyn_exp 

CPP		=	cpp -C -P 
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) # -DNO_NAMELIST_PRINT
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE `cat ../inc/dm_comm_cpp_flags` $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)

AR              =       ar ru
M4              =       m4 -B10000
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH

externals : CONFIGURE_WRFIO_NF ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP) -Dcrayx1" FC="$(FC) -f free -N 255 -Ossp" ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP) -Dcrayx1" FC="$(FC) -f free -N 255 -Ossp" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) -f free -N 255 -Ossp" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CFLAGS="$(CFLAGS)" CC="$(CC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
convert_nmm.o : convert_nmm.F

module_io_mm5.o module_si_io.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o start_domain.o \
mediation_interp_domain.o \
mediation_force_domain.o \
convert_nmm.o    :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS)  $*.f

# compile at intermediate opt
module_pbl_driver.o: module_pbl_driver.F
solve_em.o: solve_em.F

solve_em.o \
module_pbl_driver.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS2) $(MODULE_DIRS)  $*.f

###########################################################
#ARCH	HP-UX	PA8600	32bit   (single-threaded, no nesting)
#
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DINTIO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 
CFLAGS          =       $(ARCHFLAGS) +DS2.0a -DNOUNDERSCORE
FCOPTIM         =       +O3 +DA2.0N +DS2.0a +Odataprefetch +Olibcalls +DO11.0EP9806 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DS2.0a +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS) " ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	HP-UX	PA8600	32bit   (single-threaded, nesting using RSL without MPI)
#
DMPARALLEL	=	1
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DWRF_RSL_IO -DRSL -DINTIO -DTRIEDNTRUE -DLIMIT_ARGS \
                        -DDM_PARALLEL -DFLOATSAFE -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -DSTUBMPI
CFLAGS          =       $(ARCHFLAGS) +DS2.0a -DNOUNDERSCORE -I../external/RSL/RSL
FCOPTIM         =       +O3 +DA2.0N +DS2.0a +Odataprefetch +Olibcalls +DO11.0EP9806 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DS2.0a +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL/ -lrsl -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
MAX_PROC	=	1
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF ../external/RSL/RSL/librsl.a gen_comms.c wrfio_int module_dm.F esmf_time 

gen_comms.c : ../external/RSL/gen_comms.c
		( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
		  cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS) " ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	  make CC="$(CC)" CFLAGS=" -DSTUBS +O3 " FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	HP-UX	Itanium2	(single-threaded, no nesting)
#
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DINTIO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 
CFLAGS          =       $(ARCHFLAGS) +DSitanium2 -DNOUNDERSCORE
FCOPTIM         =       +O3 +Odataprefetch +Olibcalls +DO11.23 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DSitanium2 +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS) " ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	HP-UX	Itanium2	(single-threaded, nesting using RSL without MPI)
#
OMP             =       
OMPCPP          =       
FC              =       f90
LD              =       f90
CC              =       cc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DWRF_RSL_IO -DRSL -DINTIO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 -DSTUBMPI
CFLAGS          =       $(ARCHFLAGS) +DSitanium2 -DNOUNDERSCORE -I../external/RSL/RSL
FCOPTIM         =       +O3 +DSitanium2 +Odataprefetch +Olibcalls +DO11.23 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DSitanium2 +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS) " ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	HP-UX	PA8600		32bit   (openmp, no nesting)
#
OMP             =      	+Oopenmp 
OMPCPP          =       -D_OPENMP
FC              =       f90
LD              =       f90
CC              =       cc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DINTIO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 
CFLAGS          =       $(ARCHFLAGS) +DS2.0a -DNOUNDERSCORE
FCOPTIM         =       +O3 +DA2.0N +DS2.0a +Odataprefetch +Olibcalls +DO11.0EP9806 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DS2.0a $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCFLAGS) " ; \
          /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="f90 $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o                                              \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH	HP-UX	PA8600	 DM-Parallel	(RSL, MPICH, nesting)
#
DMPARALLEL	=	1
MAX_PROC	=	1024
OMP             =       
OMPCPP          =       
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DINTIO -DWRF_RSL_IO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4  -DDM_PARALLEL -DRSL \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
CFLAGS          =       $(ARCHFLAGS) +DS2.0a -DNOUNDERSCORE -I../external/RSL/RSL
FCOPTIM         =       +O3 +DA2.0N +DS2.0a +Odataprefetch +Olibcalls +DO11.0EP9806 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DS2.0a +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) " ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
	make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST hp )


# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f
###########################################################
#ARCH	HP-UX	Itanium2    DM-Parallel	(RSL, MPICH, nesting)
#
DMPARALLEL	=	1
MAX_PROC	=	1024
OMP             =       
OMPCPP          =       
FC              =       mpif90
LD              =       mpif90
CC              =       mpicc
ARCHFLAGS       =       CONFIGURE_NETCDF_FLAG -DINTIO -DWRF_RSL_IO -DTRIEDNTRUE -DLIMIT_ARGS -DFLOATSAFE \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4  -DDM_PARALLEL -DRSL \
			-DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC)
CFLAGS          =       $(ARCHFLAGS) +DSitanium2 -DNOUNDERSCORE -I../external/RSL/RSL
FCOPTIM         =       +O3 +Odataprefetch +Olibcalls +DO11.23 +noppu \
			+save +fastallocatable +Ofltacc +extend_source +source=free +FPD
FCDEBUG         =       # -g
FCBASEOPTS      =       +U77 +source=free -I. +DSitanium2 +noppu +Onoopenmp $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/io_int -lwrfio_int -L../external/RSL/RSL -lrsl \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP)
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /lib/cpp -C -P
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B8192
RANLIB          =       echo
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int ../external/RSL/RSL/librsl.a gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
	cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; \
	cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) " ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc ; \
	/bin/cp wrf_io_flags.h wrf_status_codes.h ../io_phdf5 ; \
	/bin/cp wrf_io_flags.h ../io_quilt )

wrfio_int : 
	( cd ../external/io_int ; \
	make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) $(FCFLAGS) -I../../inc " all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	make FC="$(FC) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
	make CC="$(CC)" FC="$(FC)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST hp )


# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
mediation_integrate.o : mediation_integrate.F
start_domain.o : start_domain.F
module_configure.o : module_configure.F

solve_interface.o \
module_configure.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o \
module_initialize_real.o module_dm.o mediation_integrate.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b > $*.f
	$(RM) $*.b
	$(FC) -c $(FCFLAGS) $(MODULE_DIRS) $*.f

###########################################################
#ARCH Darwin		(single-threaded, no nesting)
#     
#     Using -qfloat=nomaf option can result in identical results with
#           non-optimized and optimized results (suggested by Fovell of UCLA)
#           One may turn on by uncommenting it in FCOPTIM line
#
FC              =       xlf90_r
LD              =       xlf90_r
#CC              =       xlc_r
CC              =       cc
CFLAGS          =       -DNOUNDERSCORE
FCOPTIM         =       -O3 -qarch=auto #-qfloat=nomaf
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -qsave $(FCDEBUG) -qmaxmem=32767 -w 
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
RWORDSIZE       = 4
ARCHFLAGS       =       -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT
#			-DLIMIT_ARGS -DNO_NAMELIST_PRINT -DNATIVE_MASSV
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
#LIB             =       CONFIGURE_NETCDF_LIB_PATH -lmass -lmassv 
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 

LDFLAGS         =	 -Wl,-stack_size,10000000,-stack_addr,0xc0000000
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
#CPP             =       /opt/ibmcmp/xlf/8.1/exe/cpp -C -P
CPP             =       /usr/bin/cpp  -C -P -xassembler-with-cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF) 
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

solve_interface.o : solve_interface.F
	$(RM) $@
	mv $*.F $*.F90
	$(CPP) -I../inc $(CPPFLAGS) $*.F90 > $*.f
	$(FC) -c -qfree=f90 -qspillsize=32767 -I. $(MODULE_DIRS) $*.f
	mv $*.F90 $*.F

# compile these without high optimization to speed compile
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_interp_domain.o : mediation_interp_domain.F
mediation_force_domain.o : mediation_force_domain.F
mediation_feedback_domain.o : mediation_feedback_domain.F
convert_nmm.o : convert_nmm.F
module_configure.o : module_configure.F

module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o \
mediation_interp_domain.o \
module_configure.o                                             \
convert_nmm.o :
	$(RM) $@
	mv $*.F $*.F90
	$(SED_FTN) $*.F90 > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c $(FCBASEOPTS) $(MODULE_DIRS) $*.f
	mv $*.F90 $*.F

# to prevent having to call our service representative
mediation_feedback_domain.o \
mediation_force_domain.o start_domain.o :
	$(RM) $@
	mv $*.F $*.F90
	$(SED_FTN) $*.F90 > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt $*.f
	mv $*.F90 $*.F

###########################################################
#ARCH Darwin		(OpenMP, no nesting)
#     
#     Using -qfloat=nomaf option can result in identical results with
#           non-optimized and optimized results (suggested by Fovell of UCLA)
#           One may turn on by uncommenting it in FCOPTIM line
#
OMP             =       -qsmp=noauto
OMPCPP          =       -D_OPENMP
FC              =       xlf90_r
LD              =       xlf90_r
CC              =       cc
CFLAGS          =       -DNOUNDERSCORE
FCOPTIM         =       -O2 -qarch=auto -qunroll=yes #-qfloat=nomaf
FCDEBUG         =       # -qnoopt -qfullpath
FCBASEOPTS      =       -w -qsave $(FCDEBUG) -qmaxmem=32767 #-qflttrap=zerodivide:invalid:enable -qsigtrap
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
INCLUDE_MODULES =       -I../external/io_netcdf -I../external/io_int  -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc
EXTRAMODULES    =       
RWORDSIZE       = 4
ARCHFLAGS       =       -DYYY -DINTIO -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=4 -DLWORDSIZE=4 \
                        CONFIGURE_NETCDF_FLAG -DTRIEDNTRUE   \
			-DLIMIT_ARGS -DNO_NAMELIST_PRINT
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -lxlsmp \
                        -L../external/io_int -lwrfio_int \
                        -L../external/io_grib1 -lio_grib1 \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(OMP) -Wl,-stack_size,10000000,-stack_addr,0xc0000000 
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =        /usr/bin/cpp -C -P -xassembler-with-cpp
POUND_DEF	=	-DNONSTANDARD_SYSTEM -DF90_STANDALONE -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(OMPCPP) $(COREDEFS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 10000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : CONFIGURE_WRFIO_NF wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" ; /bin/cp wrf_io_flags.h wrf_status_codes.h ../../inc )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" all )

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(FCDEBUG) -qarch=auto -qzerosize" )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )


module_configure.o : module_configure.F
module_domain.o   : module_domain.F
module_sm.o 	: module_sm.F
module_tiles.o	: module_tiles.F
solve_em.o	: solve_em.F
solve_exp.o	: solve_exp.F
convert_nmm.o   : convert_nmm.F

module_configure.o module_sm.o module_tiles.o solve_em.o solve_exp.o convert_nmm.o :
	$(RM) $@
	mv $*.F $*.F90
	$(SED_FTN) $*.F90 > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $(OMPCPP) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(OMP) $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt -qnohot $*.f
	mv $*.F90 $*.F

module_domain.o :
	$(RM) $@
	mv $*.F $*.F90
	$(SED_FTN) $*.F90 > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $(OMPCPP) $*.b  > $*.f
	$(RM) $*.b
	$(FC) -c -g $(FCBASEOPTS) $(MODULE_DIRS) -qnoopt -qnohot $*.f
	mv $*.F90 $*.F

##################################################################
#ARCH  NULL
