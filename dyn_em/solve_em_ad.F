!                           DISCLAIMER
!
!   This file was generated by TAF version 1.7.18
!
!   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
!   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
!   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
!   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
!   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
!   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
!   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
!   OF THE POSSIBILITY OF SUCH DAMAGES.
!
!                           Haftungsbeschraenkung
!   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
!   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
!   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
!   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
!   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
!   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
!   Mitteilung darueber an FastOpt.
!
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!WRF:MEDIATION_LAYER:SOLVER

SUBROUTINE solve_em_ad ( grid , config_flags , &
!
#include "em_dummy_args.inc"
!
                 )

! Driver layer modules
   USE module_domain
   USE module_configure
   USE module_driver_constants
   USE module_machine
   USE module_tiles
   USE module_dm
! Mediation layer modules
! Model layer modules
   USE module_model_constants
   USE module_small_step_em
   USE module_em
   USE module_big_step_utilities_em
   USE module_bc
   USE module_bc_em
   USE module_solvedebug_em
   USE module_physics_addtendc
   USE module_diffusion_em
! Registry generated module
   USE module_state_description
   USE module_radiation_driver
   USE module_surface_driver
   USE module_cumulus_driver
   USE module_microphysics_driver
   USE module_pbl_driver
#ifdef WRF_CHEM
   USE module_input_chem_data
#endif

   USE a_module_small_step_em
   USE a_module_em
   USE a_module_big_step_utilities_em
   USE a_module_bc
   USE a_module_bc_em
   USE a_module_diffusion_em

   IMPLICIT NONE

   !  Input data.

   TYPE(domain) , TARGET          :: grid

   !  Definitions of dummy arguments to solve
#include <em_dummy_decl.inc>

   !  WRF state bcs
   TYPE (grid_config_rec_type) , INTENT(IN)          :: config_flags

   ! WRF state data

!#include "../phys/physics_drive.int"

   ! Local data

   INTEGER                         :: k_start , k_end, its, ite, jts, jte
   INTEGER                         :: ids , ide , jds , jde , kds , kde , &
                                      ims , ime , jms , jme , kms , kme , &
                                      ips , ipe , jps , jpe , kps , kpe
   INTEGER                         :: ij , iteration
   INTEGER                         :: im , num_3d_m , ic , num_3d_c
   INTEGER                         :: loop
   INTEGER                         :: ijds, ijde
   INTEGER                         :: itmpstep
   INTEGER                         :: sz

! storage for tendencies and decoupled state (generated from Registry)
#include <em_i1_decl.inc>

#ifdef VAR4DPOSS
integer , dimension(grid%sm31:grid%em31,grid%sm33:grid%em31) :: xxxxx , yyyyy , zzzzz , xx1 , xx2 , xx3

   INTEGER :: rc 
   INTEGER :: number_of_small_timesteps, rk_step
   INTEGER :: klevel,ijm,ijp,i,j,k,size1,size2    ! for prints/plots only
   INTEGER :: idum1, idum2, dynamics_option

   INTEGER :: rk_order, iwmax, jwmax, kwmax
   REAL :: dt_rk, dts_rk, dtm, wmax
   LOGICAL :: leapfrog
   INTEGER :: l,kte,kk

real a_z_at_wh(1+grid%em31-grid%sm31,1+grid%em32-grid%sm32,1+grid%em33-grid%sm33)
real ah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ali(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alphah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real dnwh(grid%sm32:grid%em32)
real dt_rkh
real dts_rkh
real gammah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer iteration1
real moist_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real mu_1h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_1i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2j(grid%sm31:grid%em31,grid%sm33:grid%em33)
integer number_of_small_timestepsh
real ph(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer rk_step1
real ru_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ww_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real wwh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real a_pi_phyh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)                  :: a_bn2h

real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqc_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqr_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqi_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqs_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqg_bth

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)        :: a_moist_tend

#ifdef DEREF_KLUDGE
   INTEGER     :: sm31 , em31 , sm32 , em32 , sm33 , em33
   INTEGER     :: sm31x, em31x, sm32x, em32x, sm33x, em33x
   INTEGER     :: sm31y, em31y, sm32y, em32y, sm33y, em33y
#endif

#include <bench_solve_em_def.h>

#include "deref_kludge.h"

#define COPY_IN
#include <em_scalar_derefs.inc>
#ifdef DM_PARALLEL
#    define REGISTER_I1
#      include <em_data_calls.inc>
#endif

!<DESCRIPTION>
!<pre>
! solve_em is the main driver for advancing a grid a single timestep.
! It is a mediation-layer routine -> DM and SM calls are made where 
! needed for parallel processing.  
!
! solve_em can integrate the equations using 3 time-integration methods
!      
!    - 3rd order Runge-Kutta time integration (recommended)
!      
!    - 2nd order Runge-Kutta time integration
!      
!    - Leapfrog time integration
!      (note: the leapfrog scheme is not correctly implemented
!      for most of the physics)
!
! The main sections of solve_em are
!     
! (1) Runge-Kutta (RK) loop
!     
! (2) Non-timesplit physics (i.e., tendencies computed for updating
!     model state variables during the first RK sub-step (loop)
!     
! (3) Small (acoustic, sound) timestep loop - within the RK sub-steps
!     
! (4) Scalar advance for moist and chem scalar variables (and TKE)
!     within the RK sub-steps.
!     
! (5) time-split physics (after the RK step), currently this includes
!     only microphyics
!
! A more detailed description of these sections follows.
!</pre>
!</DESCRIPTION>

#include <bench_solve_em_init.h>

#ifdef VAR4DPOSS
   write(unit=*, fmt='(2a,2x,a,i6)') 'file:', __FILE__, 'line:', __LINE__
   return

!----------------------------------------------
! SAVE REQUIRED INPUT VARIABLES
!----------------------------------------------
xkmhdi(:,:,:) = xkmhd(:,:,:)
ww_mh(:,:,:) = ww_m(:,:,:)
w_2j(:,:,:) = w_2(:,:,:)
w_1i(:,:,:) = w_1(:,:,:)
v_2i(:,:,:) = v_2(:,:,:)
v_1i(:,:,:) = v_1(:,:,:)
u_2i(:,:,:) = u_2(:,:,:)
u_1i(:,:,:) = u_1(:,:,:)
t_tendfi(:,:,:) = t_tendf(:,:,:)
t_2j(:,:,:) = t_2(:,:,:)
t_1i(:,:,:) = t_1(:,:,:)
rw_tendfi(:,:,:) = rw_tendf(:,:,:)
rv_tendfi(:,:,:) = rv_tendf(:,:,:)
rv_mh(:,:,:) = rv_m(:,:,:)
ru_tendfi(:,:,:) = ru_tendf(:,:,:)
ru_mh(:,:,:) = ru_m(:,:,:)
pm1i(:,:,:) = pm1(:,:,:)
ph_tendfi(:,:,:) = ph_tendf(:,:,:)
ph_2j(:,:,:) = ph_2(:,:,:)
ph_1i(:,:,:) = ph_1(:,:,:)
pj(:,:,:) = p(:,:,:)
number_of_small_timestepsh = number_of_small_timesteps
mu_2j(:,:) = mu_2(:,:)
mu_1i(:,:) = mu_1(:,:)
moist_tendi(:,:,:,:) = moist_tend(:,:,:,:)
moist_2i(:,:,:,:) = moist_2(:,:,:,:)
moist_1i(:,:,:,:) = moist_1(:,:,:,:)
gammah(:,:,:) = gamma(:,:,:)
dts_rkh = dts_rk
dt_rkh = dt_rk
alphah(:,:,:) = alpha(:,:,:)
alj(:,:,:) = al(:,:,:)
ah(:,:,:) = a(:,:,:)

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_a(:,:,:) = 0.
a_advect_tend(:,:,:) = 0.
a_alpha(:,:,:) = 0.
a_bn2h(:,:,:) = 0.
a_c2a(:,:,:) = 0.
a_cqu(:,:,:) = 0.
a_cqv(:,:,:) = 0.
a_cqw(:,:,:) = 0.
a_gamma(:,:,:) = 0.
a_moist_tend(:,:,:,:) = 0.
a_mu_save(:,:) = 0.
a_mu_tend(:,:) = 0.
a_muave(:,:) = 0.
a_mut(:,:) = 0.
a_muts(:,:) = 0.
a_muu(:,:) = 0.
a_muus(:,:) = 0.
a_muv(:,:) = 0.
a_muvs(:,:) = 0.
a_p8w(:,:,:) = 0.
a_p_phy(:,:,:) = 0.
a_ph_save(:,:,:) = 0.
a_ph_tend(:,:,:) = 0.
a_ph_tendf(:,:,:) = 0.
a_pi_phyh(:,:,:) = 0.
a_pm1(:,:,:) = 0.
a_rqc_bth(:,:,:,:) = 0.
a_rqg_bth(:,:,:,:) = 0.
a_rqi_bth(:,:,:,:) = 0.
a_rqr_bth(:,:,:,:) = 0.
a_rqs_bth(:,:,:,:) = 0.
a_ru_m(:,:,:) = 0.
a_ru_tend(:,:,:) = 0.
a_ru_tendf(:,:,:) = 0.
a_rv_m(:,:,:) = 0.
a_rv_tend(:,:,:) = 0.
a_rv_tendf(:,:,:) = 0.
a_rw_tend(:,:,:) = 0.
a_rw_tendf(:,:,:) = 0.
a_t8w(:,:,:) = 0.
a_t_2save(:,:,:) = 0.
a_t_phy(:,:,:) = 0.
a_t_save(:,:,:) = 0.
a_t_tend(:,:,:) = 0.
a_t_tendf(:,:,:) = 0.
a_th_phy(:,:,:) = 0.
a_u_save(:,:,:) = 0.
a_v_save(:,:,:) = 0.
a_w_save(:,:,:) = 0.
a_ww1(:,:,:) = 0.
a_ww_m(:,:,:) = 0.
a_z_at_wh(:,:,:) = 0.

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
cfn = grid%cfn
! recompute : cfn
cfn1 = grid%cfn1
! recompute : cfn1
epsts = grid%epsts
! recompute : epsts
step_number = grid%step_number
! recompute : step_number
rdx = grid%rdx
! recompute : rdx
rdy = grid%rdy
! recompute : rdy
cf1 = grid%cf1
! recompute : cf1
cf2 = grid%cf2
! recompute : cf2
cf3 = grid%cf3
! recompute : cf3
dtbc = grid%dtbc
! recompute : dtbc
dx = grid%dx
! recompute : dx
dy = grid%dy
! recompute : dy
dt = grid%dt
! recompute : dt
rk_ord = grid%rk_ord
! recompute : rk_ord
diff_opt = grid%diff_opt
! recompute : diff_opt
damp_opt = grid%damp_opt
! recompute : damp_opt
zdamp = grid%zdamp
! recompute : zdamp
dampcoef = grid%dampcoef
! recompute : dampcoef
khdif = grid%khdif
! recompute : khdif
kvdif = grid%kvdif
! recompute : kvdif
smdiv = grid%smdiv
! recompute : smdiv
emdiv = grid%emdiv
! recompute : emdiv
epssm = grid%epssm
! recompute : epssm
non_hydrostatic = grid%non_hydrostatic
! recompute : non_hydrostatic
time_step_sound = grid%time_step_sound
! recompute : time_step_sound
kh_tke_upper_bound = grid%kh_tke_upper_bound
! recompute : kh_tke_upper_bound
spec_bdy_width = grid%spec_bdy_width
! recompute : spec_bdy_width
spec_zone = grid%spec_zone
! recompute : spec_zone
relax_zone = grid%relax_zone
! recompute : relax_zone
call get_ijk_from_grid( grid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe )
!  recompute : ide,ids,ime,ims,ipe,ips,jde,jds,jme,jms,jpe,jps,kde,kds,k
! me,kms,kpe,kps
k_start = kps
! recompute : k_start
k_end = kpe
! recompute : k_end
ijds = min(ids,jds)
! recompute : ijds
ijde = max(ide,jde)
! recompute : ijde
num_3d_m = num_moist
! recompute : num_3d_m
call set_tiles( grid,ids,ide,jds,jde,ips,ipe,jps,jpe )
! recompute : grid
rk_order = config_flags%rk_ord
! recompute : rk_order
leapfrog =  .false. 
! recompute : leapfrog
dts = dt/float(time_step_sound)
! recompute : dts
if (rk_ord .eq. 1) then
  leapfrog =  .true. 
endif
! recompute : leapfrog
runge_kutta_looq: do rk_step = 1, rk_order
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
  rk_step_is_ong: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    do ij = 1, grid%num_tiles
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
      do ij = 1, grid%num_tiles
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    endif
  endif rk_step_is_ong
  do ij = 1, grid%num_tiles
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
  do ij = 1, grid%num_tiles
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
  do ij = 1, grid%num_tiles
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
  small_stepu: do iteration = 1, number_of_small_timesteps
    do ij = 1, grid%num_tiles
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
    do ij = 1, grid%num_tiles
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  end do small_stepu
  do ij = 1, grid%num_tiles
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
  end do
  moist_scalar_advancg: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loor: do im = param_first_scalar, num_3d_m
      moist_tile_loop_6: do ij = 1, grid%num_tiles
        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      end do moist_tile_loop_6
      moist_tile_loop_5: do ij = 1, grid%num_tiles
        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do moist_tile_loop_5
    end do moist_variable_loor
  endif moist_scalar_advancg
  do ij = 1, grid%num_tiles
    call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if ( .not. non_hydrostatic) then
      call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
end do runge_kutta_looq
! recompute : dt_rk,moist_2,mu_2,muts,ph_2,ph_tend,t_2
if (config_flags%mp_physics .ne. 0) then
  if (config_flags%specified .or. config_flags%nested) then
    sz = spec_zone
  else
    sz = 0
  endif
! recompute : sz
  do ij = 1, grid%num_tiles
    its = max(grid%i_start(ij),ids+sz)
! recompute : its
    ite = min(grid%i_end(ij),ide-1-sz)
! recompute : ite
    jts = max(grid%j_start(ij),jds+sz)
! recompute : jts
    jte = min(grid%j_end(ij),jde-1-sz)
! recompute : jte
    if ( .not. non_hydrostatic) then
      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
&ims,ime,jms,jme,kms,kme,its,ite,jts,jte,k_end )
    endif
    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
&rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,k_start,k_end )
  end do
endif
al(:,:,:) = alj(:,:,:)
moist_1(:,:,:,:) = moist_1i(:,:,:,:)
moist_2(:,:,:,:) = moist_2i(:,:,:,:)
moist_tend(:,:,:,:) = moist_tendi(:,:,:,:)
mu_1(:,:) = mu_1i(:,:)
mu_2(:,:) = mu_2j(:,:)
p(:,:,:) = pj(:,:,:)
ph_1(:,:,:) = ph_1i(:,:,:)
ph_2(:,:,:) = ph_2j(:,:,:)
ph_tendf(:,:,:) = ph_tendfi(:,:,:)
pm1(:,:,:) = pm1i(:,:,:)
ru_tendf(:,:,:) = ru_tendfi(:,:,:)
rv_tendf(:,:,:) = rv_tendfi(:,:,:)
rw_tendf(:,:,:) = rw_tendfi(:,:,:)
t_1(:,:,:) = t_1i(:,:,:)
t_2(:,:,:) = t_2j(:,:,:)
t_tendf(:,:,:) = t_tendfi(:,:,:)
u_1(:,:,:) = u_1i(:,:,:)
u_2(:,:,:) = u_2i(:,:,:)
v_1(:,:,:) = v_1i(:,:,:)
v_2(:,:,:) = v_2i(:,:,:)
w_1(:,:,:) = w_1i(:,:,:)
w_2(:,:,:) = w_2j(:,:,:)
xkmhd(:,:,:) = xkmhdi(:,:,:)
a_runge_kutta_loop: do rk_step = rk_order, 1, -1
  a(:,:,:) = ah(:,:,:)
  al(:,:,:) = alj(:,:,:)
  alpha(:,:,:) = alphah(:,:,:)
  dt_rk = dt_rkh
  dts_rk = dts_rkh
  gamma(:,:,:) = gammah(:,:,:)
  moist_1(:,:,:,:) = moist_1i(:,:,:,:)
  moist_2(:,:,:,:) = moist_2i(:,:,:,:)
  moist_tend(:,:,:,:) = moist_tendi(:,:,:,:)
  mu_1(:,:) = mu_1i(:,:)
  mu_2(:,:) = mu_2j(:,:)
  number_of_small_timesteps = number_of_small_timestepsh
  p(:,:,:) = pj(:,:,:)
  ph_1(:,:,:) = ph_1i(:,:,:)
  ph_2(:,:,:) = ph_2j(:,:,:)
  ph_tendf(:,:,:) = ph_tendfi(:,:,:)
  pm1(:,:,:) = pm1i(:,:,:)
  ru_m(:,:,:) = ru_mh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfi(:,:,:)
  rv_m(:,:,:) = rv_mh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfi(:,:,:)
  rw_tendf(:,:,:) = rw_tendfi(:,:,:)
  t_1(:,:,:) = t_1i(:,:,:)
  t_2(:,:,:) = t_2j(:,:,:)
  t_tendf(:,:,:) = t_tendfi(:,:,:)
  u_1(:,:,:) = u_1i(:,:,:)
  u_2(:,:,:) = u_2i(:,:,:)
  v_1(:,:,:) = v_1i(:,:,:)
  v_2(:,:,:) = v_2i(:,:,:)
  w_1(:,:,:) = w_1i(:,:,:)
  w_2(:,:,:) = w_2j(:,:,:)
  ww_m(:,:,:) = ww_mh(:,:,:)
  xkmhd(:,:,:) = xkmhdi(:,:,:)
  runge_kutta_loor: do rk_step1 = 1, rk_step-1
    if (rk_order .eq. 1) then
      if (step_number .ne. 1) then
        number_of_small_timesteps = 2*time_step_sound
        dt_rk = dt
      else
        number_of_small_timesteps = time_step_sound
        dt_rk = dt/2.
      endif
      dts_rk = dts
    else if (rk_order .eq. 2) then
      if (rk_step1 .eq. 1) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    else if (rk_order .eq. 3) then
      if (rk_step1 .eq. 1) then
        dt_rk = dt/3.
        dts_rk = dt_rk
        number_of_small_timesteps = 1
      else if (rk_step1 .eq. 2) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    endif
    do ij = 1, grid%num_tiles
      call rk_step_prep( config_flags,rk_step1,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,&
&alb,cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij)&
&,grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    rk_step_is_onze: if (rk_step1 .eq. 1) then
      do ij = 1, grid%num_tiles
        call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,&
&rk_step1,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )
      end do
      do ij = 1, grid%num_tiles
        call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,&
&v_phy,p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,&
&rqccuten,rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
      if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
        do ij = 1, grid%num_tiles
          call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        end do
      endif
    endif rk_step_is_onze
    do ij = 1, grid%num_tiles
      call rk_tendency( config_flags,rk_step1,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,&
&h_diabatic,phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,&
&e,sina,cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,&
&jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    do ij = 1, grid%num_tiles
      if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
        call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step1,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
    do ij = 1, grid%num_tiles
      call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step1,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
    small_stepzt: do iteration = 1, number_of_small_timesteps
      do ij = 1, grid%num_tiles
        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
      end do
      do ij = 1, grid%num_tiles
        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif
        call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then
            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif
        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    end do small_stepzt
    do ij = 1, grid%num_tiles
      call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!      call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij)&
!&,grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
    end do
    moist_scalar_advancj: if (num_3d_m .ge. param_first_scalar) then
      moist_variable_loou: do im = param_first_scalar, num_3d_m
        moist_tile_loop_9d: do ij = 1, grid%num_tiles
          call rk_scalar_tend( im,im,config_flags,rk_step1,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,&
&kvdif,xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),&
&grid%j_end(ij),k_start,k_end )
          if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
            if (im .eq. p_qv) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
          if (config_flags%nested .and. rk_step1 .eq. 1) then
            if (im .eq. p_qc) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qr) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qi) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qs) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qg) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        end do moist_tile_loop_9d
        moist_tile_loop_9c: do ij = 1, grid%num_tiles
          call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step1,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        end do moist_tile_loop_9c
      end do moist_variable_loou
    endif moist_scalar_advancj
    do ij = 1, grid%num_tiles
      call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if ( .not. non_hydrostatic) then
        call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
  end do runge_kutta_loor
  xkmhdh(:,:,:) = xkmhd(:,:,:)
  w_2h(:,:,:) = w_2(:,:,:)
  w_1h(:,:,:) = w_1(:,:,:)
  v_2h(:,:,:) = v_2(:,:,:)
  v_1h(:,:,:) = v_1(:,:,:)
  u_2h(:,:,:) = u_2(:,:,:)
  u_1h(:,:,:) = u_1(:,:,:)
  t_tendfh(:,:,:) = t_tendf(:,:,:)
  t_2h(:,:,:) = t_2(:,:,:)
  t_1h(:,:,:) = t_1(:,:,:)
  rw_tendfh(:,:,:) = rw_tendf(:,:,:)
  rv_tendfh(:,:,:) = rv_tendf(:,:,:)
  ru_tendfh(:,:,:) = ru_tendf(:,:,:)
  pm1h(:,:,:) = pm1(:,:,:)
  ph_tendfh(:,:,:) = ph_tendf(:,:,:)
  ph_2h(:,:,:) = ph_2(:,:,:)
  ph_1h(:,:,:) = ph_1(:,:,:)
  ph(:,:,:) = p(:,:,:)
  mu_2h(:,:) = mu_2(:,:)
  mu_1h(:,:) = mu_1(:,:)
  moist_tendh(:,:,:,:) = moist_tend(:,:,:,:)
  moist_2h(:,:,:,:) = moist_2(:,:,:,:)
  moist_1h(:,:,:,:) = moist_1(:,:,:,:)
  dnwh(:) = dnw(:)
  alh(:,:,:) = al(:,:,:)
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzc: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    do ij = 1, grid%num_tiles
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
      do ij = 1, grid%num_tiles
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    endif
  endif rk_step_is_onzc
!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd
  do ij = 1, grid%num_tiles
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save
  do ij = 1, grid%num_tiles
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend
  do ij = 1, grid%num_tiles
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
!  recompute : a,al,alpha,c2a,gamma,mu_1,mu_2,mu_save,mudf,p,ph_1,ph_2,p
! h_save,pm1,t_1,t_2,t_save,u_1,u_2,u_save,v_1,v_2,v_save,w_1,w_2,w_save
! ,ww1
  small_stepzq: do iteration = 1, number_of_small_timesteps
    do ij = 1, grid%num_tiles
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
    do ij = 1, grid%num_tiles
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  end do small_stepzq
! recompute : mu_2,mudf,muts,ph_2,pm1,ru_m,rv_m,t_2,u_2,v_2,w_2,ww_m
  do ij = 1, grid%num_tiles
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
  end do
! recompute : mu_2,ph_2,t_2
  moist_scalar_advanch: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loos: do im = param_first_scalar, num_3d_m
      moist_tile_loop_8: do ij = 1, grid%num_tiles
        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      end do moist_tile_loop_8
      moist_tile_loop_7: do ij = 1, grid%num_tiles
        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do moist_tile_loop_7
    end do moist_variable_loos
  endif moist_scalar_advanch
! recompute : moist_2
  do ij = 1, grid%num_tiles
    if ( .not. non_hydrostatic) then
      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_end )
    endif
    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
&rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )
  end do
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
!  recdepend vars : grid,ime,ims,jme,jms,k_end,k_start,kme,kms,moist_1,m
! oist_2,moist_tend,num_3d_m,rk_step
! recompute pos : IF_STMT solve_em.f90:1756
! recompute vars : moist_tend
  rk_step_is_onh: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  endif rk_step_is_onh
! recompute vars : moist_tend
  a_moist_scalar_advance: if (num_3d_m .ge. param_first_scalar) then
    do im = param_first_scalar, num_3d_m
      moist_tile_loop_9: do ij = 1, grid%num_tiles
        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      end do moist_tile_loop_9
! recompute : advect_tend,moist_tend
      do ij = 1, grid%num_tiles
        call a_rk_update_scalar( im,im,moist_1(ims,kms,jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),advect_tend,a_advect_tend,msft,mu_1,a_mu_1,mu_2,a_mu_2,&
&mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
      do ij = 1, grid%num_tiles
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqc_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqr_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqi_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqs_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqg_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        call a_rk_scalar_tend( im,im,config_flags,rk_step,ru_m,a_ru_m,rv_m,a_rv_m,ww_m,a_ww_m,mut,a_mut,alt,a_alt,moist_1(ims,kms,&
&jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),&
&a_advect_tend,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,kvdif,xkmhd,a_xkmhd,leapfrog,ids,ide,jds,jde,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    end do
  endif a_moist_scalar_advance
  al(:,:,:) = alh(:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_1(:,:) = mu_1h(:,:)
  mu_2(:,:) = mu_2h(:,:)
  p(:,:,:) = ph(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_1,mu_2,mu
! b,num_3d_m,p,param_first_scalar,ph_1,ph_2,phb,pm1,rdx,rdy,ru_tendf,rv_
! tendf,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_1,v_2,w_1,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ww
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ww
!  recdepend vars : al,alt,cqu,cqv,cqw,grid,ime,ims,jme,jms,k_end,k_star
! t,kme,kms,mu_1,mu_2,mut,muu,muv,num_3d_m,p,ph_1,ph_2,php,pm1,rk_step,r
! u_tendf,rv_tendf,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_1,v_2,w_1,w_2,ww
! recompute pos : IF_STMT solve_em.f90:1756
! recompute vars : ru_tendf,rv_tendf,rw_tendf,t_tendf
  rk_step_is_onz: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  endif rk_step_is_onz
! recompute vars : ru_tendf,rv_tendf,rw_tendf,t_tendf
!  recdepend vars : al,alt,cb,cf1,cf2,cf3,cfn,cfn1,config_flags,cosa,cqu
! ,cqv,cqw,dt,e,f,fnm,fnp,g,grid,ide,ids,ime,ims,jde,jds,jme,jms,k_end,k
! _start,kde,kme,kms,kvdif,leapfrog,msft,msfu,msfv,mu_1,mu_2,mub,mut,muu
! ,muv,non_hydrostatic,p,pb,ph_1,ph_2,phb,php,pm1,pr,pr,rdn,rdnw,rdx,rdy
! ,reradius,rk_step,ru,ru_tendf,rv,rv_tendf,rw,rw_tendf,sina,t_1,t_2,t_i
! nit,t_tendf,u_1,u_2,u_base,v_1,v_2,v_base,w_1,w_2,w_alpha,w_beta,ww,xk
! mhd,z_base
! recompute pos : DOLOOP_STMT solve_em.f90:2247
! recompute vars : cqw
  do ij = 1, grid%num_tiles
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : cqw
!  recdepend vars : alt,cpovcv,cqu,cqv,cqw,dnw,grid,ide,ime,ims,jde,jme,
! jms,k_end,k_start,kde,kme,kms,leapfrog,msft,msfu,msfv,mu_1,mu_2,mub,mu
! t,muu,muv,non_hydrostatic,p,pb,ph_1,ph_2,php,pm1,rdnw,rk_step,smdiv,t0
! ,t_1,t_2,u_1,u_2,v_1,v_2,w_1,w_2,ww,znu
! recompute pos : DOLOOP_STMT solve_em.f90:2368
!  recompute vars : al,c2a,mu_2,mudf,p,ph_2,ph_save,pm1,t_2,t_save,u_2,u
! _save,v_2,v_save,w_2,w_save,ww1
  do ij = 1, grid%num_tiles
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
!  recompute vars : al,c2a,mu_2,mudf,p,ph_2,ph_save,pm1,t_2,t_save,u_2,u
! _save,v_2,v_save,w_2,w_save,ww1
!  recdepend vars : a,al,alb,alpha,alt,c2a,cf1,cf2,cf3,config_flags,cqu,
! cqv,cqw,dnw,dts,dts_rk,emdiv,epssm,fnm,fnp,g,gamma,grid,ht,ide,ids,ime
! ,ims,jde,jds,jme,jms,k_end,k_start,kde,kme,kms,msft,msfu,msfv,mu_2,mu_
! tend,mudf,mut,muu,muv,non_hydrostatic,number_of_small_timesteps,p,pb,p
! h_2,ph_save,ph_tend,phb,php,pm1,rdn,rdnw,rdx,rdy,ru_tend,rv_tend,rw_te
! nd,smdiv,spec_zone,t0,t_2,t_save,t_tend,u_2,u_save,v_2,v_save,w_2,w_sa
! ve,ww,ww1,znu
! recompute pos : DOLOOP_STMT solve_em.f90:2511
! recompute vars : muts,t_2,u_2,v_2,w_2
  small_stepzp: do iteration = 1, number_of_small_timesteps-1
    do ij = 1, grid%num_tiles
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
    do ij = 1, grid%num_tiles
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  end do small_stepzp
  iteration = number_of_small_timesteps
  do ij = 1, grid%num_tiles
    call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,emdiv,&
&rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
  do ij = 1, grid%num_tiles
    call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,&
&kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,jpe,&
&1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,jpe,&
&1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
    endif
    if (non_hydrostatic) then
      call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,a,&
&alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    if (config_flags%specified .or. config_flags%nested) then
      if (non_hydrostatic) then
        if (config_flags%specified) then
        else
          call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
      endif
    endif
  end do
! recompute vars : muts,t_2,u_2,v_2,w_2
  do ij = 1, grid%num_tiles
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
! recompute : muus,muvs
!    call a_small_step_finish( u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,t_2,a_t_2,a_ph_2,a_mu_2,mut,a_mut,muts,a_muts,muu,a_muu,muus,a_muus,&
!&muv,a_muv,muvs,a_muvs,u_save,a_u_save,v_save,a_v_save,w_save,a_w_save,t_save,a_t_save,a_ph_save,a_mu_save,msfu,msfv,msft,ide,&
!&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij) )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )

    call a_calc_mu_uv_1( config_flags,a_muts,a_muus,a_muvs,ids,ide,jds,jde,ims,ime,jms,jme,grid%i_start(ij),grid%i_end(ij),grid%&
&j_start(ij),grid%j_end(ij) )
  end do
  al(:,:,:) = alh(:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_1(:,:) = mu_1h(:,:)
  mu_2(:,:) = mu_2h(:,:)
  p(:,:,:) = ph(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_1,mu_2,mu
! b,num_3d_m,p,param_first_scalar,ph_1,ph_2,ph_tendf,phb,pm1,rdx,rdy,ru_
! tendf,rv_tendf,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_1,v_2,w_1,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
!  recdepend vars : al,alt,cqu,cqv,cqw,grid,ime,ims,jme,jms,k_end,k_star
! t,kme,kms,mu_1,mu_2,mut,muu,muv,num_3d_m,p,ph_1,ph_2,ph_tendf,php,pm1,
! rk_step,ru,ru_tendf,rv,rv_tendf,rw,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_
! 1,v_2,w_1,w_2,ww
! recompute pos : IF_STMT solve_em.f90:1756
! recompute vars : ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf
  rk_step_is_onza: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  endif rk_step_is_onza
! recompute vars : ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf
!  recdepend vars : al,alt,cb,cf1,cf2,cf3,cfn,cfn1,config_flags,cosa,cqu
! ,cqv,cqw,dt,e,f,fnm,fnp,g,grid,ide,ids,ime,ims,jde,jds,jme,jms,k_end,k
! _start,kde,kme,kms,kvdif,leapfrog,msft,msfu,msfv,mu_1,mu_2,mub,mut,muu
! ,muv,non_hydrostatic,p,pb,ph_1,ph_2,ph_tendf,phb,php,pm1,pr,pr,rdn,rdn
! w,rdx,rdy,reradius,rk_step,ru,ru_tendf,rv,rv_tendf,rw,rw_tendf,sina,t_
! 1,t_2,t_init,t_tendf,u_1,u_2,u_base,v_1,v_2,v_base,w_1,w_2,w_alpha,w_b
! eta,ww,xkmhd,z_base
! recompute pos : DOLOOP_STMT solve_em.f90:2247
!  recompute vars : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend
! ,rv_tendf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save
  do ij = 1, grid%num_tiles
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
!  recompute vars : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend
! ,rv_tendf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save
!  recdepend vars : alt,config_flags,cqu,cqv,cqw,dtbc,fcx,gcx,grid,h_dia
! batic,ide,ids,ijde,ijds,ime,ims,jde,jds,jme,jms,k_end,k_start,kde,kds,
! kme,kms,msft,msfu,msfv,mu_1,mu_2,mu_b,mu_bt,mu_tend,mut,muu,muv,p,p_xe
! b,p_xsb,p_yeb,p_ysb,ph_1,ph_2,ph_b,ph_bt,ph_save,ph_tend,ph_tendf,php,
! pm1,relax_zone,rk_step,ru,ru_tend,ru_tendf,rv,rv_tend,rv_tendf,rw_tend
! ,rw_tendf,spec_bdy_width,spec_zone,t_1,t_2,t_b,t_bt,t_save,t_tend,t_te
! ndf,u_1,u_2,u_b,u_bt,u_save,v_1,v_2,v_b,v_bt,v_save,w_1,w_2,w_b,w_bt,w
! _save,ww
! recompute pos : DOLOOP_STMT solve_em.f90:2280
! recompute vars : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend
  do ij = 1, grid%num_tiles
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
! recompute vars : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend
!  recdepend vars : alt,cpovcv,cqu,cqv,cqw,dnw,grid,ide,ime,ims,jde,jme,
! jms,k_end,k_start,kde,kme,kms,leapfrog,msft,msfu,msfv,mu_1,mu_2,mu_ten
! d,mub,mut,muu,muv,non_hydrostatic,p,pb,ph_1,ph_2,ph_tend,php,pm1,rdnw,
! rk_step,ru_tend,rv_tend,rw_tend,smdiv,t0,t_1,t_2,t_tend,u_1,u_2,v_1,v_
! 2,w_1,w_2,ww,znu
! recompute pos : DOLOOP_STMT solve_em.f90:2368
!  recompute vars : al,c2a,mu_2,p,ph_2,ph_save,t_2,t_save,u_save,v_save,
! w_2,ww1
  do ij = 1, grid%num_tiles
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
!  recompute vars : al,c2a,mu_2,p,ph_2,ph_save,t_2,t_save,u_save,v_save,
! w_2,ww1
  a_small_steps: do iteration = number_of_small_timesteps, 1, -1
    al(:,:,:) = alh(:,:,:)
    mu_1(:,:) = mu_1h(:,:)
    mu_2(:,:) = mu_2h(:,:)
    p(:,:,:) = ph(:,:,:)
    ph_1(:,:,:) = ph_1h(:,:,:)
    ph_2(:,:,:) = ph_2h(:,:,:)
    pm1(:,:,:) = pm1h(:,:,:)
    t_1(:,:,:) = t_1h(:,:,:)
    t_2(:,:,:) = t_2h(:,:,:)
    u_1(:,:,:) = u_1h(:,:,:)
    u_2(:,:,:) = u_2h(:,:,:)
    v_1(:,:,:) = v_1h(:,:,:)
    v_2(:,:,:) = v_2h(:,:,:)
    w_1(:,:,:) = w_1h(:,:,:)
    w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_1,mu_2,mu
! b,num_3d_m,p,param_first_scalar,ph_1,ph_2,phb,pm1,rdx,rdy,t_1,t_2,u_1,
! u_2,v_1,v_2,w_1,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : alt,mut,muu,muv,ww
    do ij = 1, grid%num_tiles
      call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,&
&alb,cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij)&
&,grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
! recompute vars : alt,mut,muu,muv,ww
!  recdepend vars : alt,cpovcv,dnw,grid,ide,ime,ims,jde,jme,jms,k_end,k_
! start,kde,kme,kms,leapfrog,msft,msfu,msfv,mu_1,mu_2,mub,mut,muu,muv,no
! n_hydrostatic,p,pb,ph_1,ph_2,pm1,rdnw,rk_step,smdiv,t0,t_1,t_2,u_1,u_2
! ,v_1,v_2,w_1,w_2,ww,znu
! recompute pos : DOLOOP_STMT solve_em.f90:2368
! recompute vars : al,mu_2,mudf,p,ph_2,pm1,t_2,u_2,v_2,w_2
    do ij = 1, grid%num_tiles
      call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
! recompute vars : al,mu_2,mudf,p,ph_2,pm1,t_2,u_2,v_2,w_2
    small_stepzr: do iteration1 = 1, iteration-1
      do ij = 1, grid%num_tiles
        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
      end do
      do ij = 1, grid%num_tiles
        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration1,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif
        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then
            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif
        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration1,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    end do small_stepzr
    wwh(:,:,:) = ww(:,:,:)
    w_2i(:,:,:) = w_2(:,:,:)
    t_2i(:,:,:) = t_2(:,:,:)
    ph_2i(:,:,:) = ph_2(:,:,:)
    pi(:,:,:) = p(:,:,:)
    mu_2i(:,:) = mu_2(:,:)
    ali(:,:,:) = al(:,:,:)
    do ij = 1, grid%num_tiles
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    end do
! recompute : u_2,v_2
    do ij = 1, grid%num_tiles
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
! recompute : mu_2,muave,muts,t_2,t_2save,ww
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
! recompute : mu_2,muts,t_2
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
! recompute : ph_2,t_2save,w_2
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
      endif
! recompute : ph_2
      call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%&
&j_start(ij),grid%j_end(ij),k_start,k_end )
      mu_2(:,:) = mu_2i(:,:)
      ph_2(:,:,:) = ph_2i(:,:,:)
      t_2(:,:,:) = t_2i(:,:,:)
      w_2(:,:,:) = w_2i(:,:,:)
      ww(:,:,:) = wwh(:,:,:)
!  recdepend vars : config_flags,dnw,dts,epssm,fnm,fnp,grid,ide,ids,ij,i
! me,ims,jde,jds,jme,jms,k_end,k_start,kde,kme,kms,msft,msfu,msfv,mu_2,m
! u_tend,mut,muu,muv,ph_2,rdnw,rdx,rdy,t_2,t_save,t_tend,u_2,u_save,v_2,
! v_save,w_2,ww,ww1
! recompute pos : CALL_STMT solve_em.f90:2580
! recompute vars : mu_2,muave,muts,t_2,t_2save,ww
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
! recompute vars : mu_2,muave,muts,t_2,t_2save,ww
!  recdepend vars : config_flags,dts_rk,grid,ide,ids,ij,ime,ims,jde,jds,
! jme,jms,k_end,k_start,kde,kme,kms,mu_2,mu_tend,muave,muts,ph_2,spec_zo
! ne,t_2,t_2save,t_tend,w_2,ww
! recompute pos : IF_STMT solve_em.f90:2597
! recompute vars : mu_2,muts,t_2
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
! recompute vars : mu_2,muts,t_2
!  recdepend vars : a,alb,alpha,alt,c2a,cf1,cf2,cf3,config_flags,cqw,dts
! ,epssm,fnm,fnp,g,gamma,grid,ht,ide,ids,ij,ime,ims,jde,jds,jme,jms,k_en
! d,k_start,kme,kms,msft,mu_2,muave,mut,muts,non_hydrostatic,ph_2,ph_sav
! e,ph_tend,phb,rdn,rdnw,rdx,rdy,rw_tend,t0,t_2,t_2save,t_save,u_2,v_2,w
! _2,ww
! recompute pos : IF_STMT solve_em.f90:2655
! recompute vars : ph_2
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
! recompute vars : ph_2
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          if (config_flags%specified) then
          else
            call a_spec_bdyupdate( a_w_2,a_rw_tend,dts_rk,'h',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
          call a_spec_bdyupdate_ph( ph_save,a_ph_save,ph_2,a_ph_2,ph_tend,a_ph_tend,mu_tend,a_mu_tend,muts,a_muts,dts_rk,'h',&
&spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )
        endif
      endif
      mu_2(:,:) = mu_2i(:,:)
      ph_2(:,:,:) = ph_2i(:,:,:)
      t_2(:,:,:) = t_2i(:,:,:)
      w_2(:,:,:) = w_2i(:,:,:)
      ww(:,:,:) = wwh(:,:,:)
!  recdepend vars : config_flags,dnw,dts,epssm,fnm,fnp,grid,ide,ids,ij,i
! me,ims,jde,jds,jme,jms,k_end,k_start,kde,kme,kms,msft,msfu,msfv,mu_2,m
! u_tend,mut,muu,muv,ph_2,rdnw,rdx,rdy,t_2,t_save,t_tend,u_2,u_save,v_2,
! v_save,w_2,ww,ww1
! recompute pos : CALL_STMT solve_em.f90:2580
! recompute vars : mu_2,muave,muts,t_2,t_2save,ww
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
! recompute vars : mu_2,muave,muts,t_2,t_2save,ww
!  recdepend vars : config_flags,dts_rk,grid,ide,ids,ij,ime,ims,jde,jds,
! jme,jms,k_end,k_start,kde,kme,kms,mu_2,mu_tend,muave,muts,ph_2,spec_zo
! ne,t_2,t_2save,t_tend,w_2,ww
! recompute pos : IF_STMT solve_em.f90:2597
! recompute vars : mu_2,muts,t_2
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
! recompute vars : mu_2,muts,t_2
      if (non_hydrostatic) then
        call a_advance_w( w_2,a_w_2,rw_tend,a_rw_tend,ww,a_ww,u_2,a_u_2,v_2,a_v_2,mu_2,a_mu_2,mut,a_mut,muave,a_muave,muts,a_muts,&
&t_2save,a_t_2save,t_2,a_t_2,t_save,a_t_save,ph_2,a_ph_2,ph_save,a_ph_save,phb,ph_tend,a_ph_tend,ht,c2a,a_c2a,cqw,a_cqw,&
&alt,a_alt,alb,a,a_a,alpha,a_alpha,gamma,a_gamma,rdx,rdy,dts,t0,epssm,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,&
&ide,jds,jde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      call a_sumflux( a_u_2,a_v_2,a_ww,u_save,a_u_save,v_save,a_v_save,a_ww1,muu,a_muu,muv,a_muv,a_ru_m,a_rv_m,a_ww_m,msfu,msfv,&
&iteration,number_of_small_timesteps,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),&
&grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_muts,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_mu_2,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_t_2,a_t_tend,dts_rk,'t',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      ww(:,:,:) = wwh(:,:,:)
      call a_advance_mu_t( ww,a_ww,ww1,a_ww1,u_2,a_u_2,u_save,a_u_save,v_2,a_v_2,v_save,a_v_save,a_mu_2,a_mut,a_muave,a_muts,muu,&
&a_muu,muv,a_muv,a_mudf,a_t_2,t_save,a_t_save,a_t_2save,a_t_tend,mu_tend,a_mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,&
&msfv,msft,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
    end do
    al(:,:,:) = ali(:,:,:)
    mu_2(:,:) = mu_2i(:,:)
    p(:,:,:) = pi(:,:,:)
    ph_2(:,:,:) = ph_2i(:,:,:)
    do ij = 1, grid%num_tiles
      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_v_2,a_rv_tend,dts_rk,'v',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call a_spec_bdyupdate( a_u_2,a_ru_tend,dts_rk,'u',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      call a_advance_uv( a_u_2,a_ru_tend,a_v_2,a_rv_tend,p,a_p,pb,ph_2,a_ph_2,php,a_php,alt,a_alt,al,a_al,mu_2,a_mu_2,muu,a_muu,&
&cqu,a_cqu,muv,a_muv,cqv,a_cqv,a_mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  end do a_small_steps
  al(:,:,:) = alh(:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_1(:,:) = mu_1h(:,:)
  mu_2(:,:) = mu_2h(:,:)
  p(:,:,:) = ph(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_1,mu_2,mu
! b,num_3d_m,p,param_first_scalar,ph_1,ph_2,phb,rdx,rdy,ru_tendf,rv_tend
! f,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_1,v_2,w_1,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
!  recdepend vars : al,alt,cqu,cqv,cqw,grid,ime,ims,jme,jms,k_end,k_star
! t,kme,kms,mu_1,mu_2,mut,muu,muv,num_3d_m,p,ph_1,ph_2,php,rk_step,ru,ru
! _tendf,rv,rv_tendf,rw,rw_tendf,t_1,t_2,t_tendf,u_1,u_2,v_1,v_2,w_1,w_2
! ,ww
! recompute pos : IF_STMT solve_em.f90:1756
! recompute vars : ru_tendf,rv_tendf,rw_tendf,t_tendf
  rk_step_is_onzb: if (rk_step .eq. 1) then
    do ij = 1, grid%num_tiles
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  endif rk_step_is_onzb
! recompute vars : ru_tendf,rv_tendf,rw_tendf,t_tendf
!  recdepend vars : al,alt,cb,cf1,cf2,cf3,cfn,cfn1,config_flags,cosa,cqu
! ,cqv,cqw,dt,e,f,fnm,fnp,g,grid,ide,ids,ime,ims,jde,jds,jme,jms,k_end,k
! _start,kde,kme,kms,kvdif,leapfrog,msft,msfu,msfv,mu_1,mu_2,mub,mut,muu
! ,muv,non_hydrostatic,p,pb,ph_1,ph_2,phb,php,pr,pr,rdn,rdnw,rdx,rdy,rer
! adius,rk_step,ru,ru_tendf,rv,rv_tendf,rw,rw_tendf,sina,t_1,t_2,t_init,
! t_tendf,u_1,u_2,u_base,v_1,v_2,v_base,w_1,w_2,w_alpha,w_beta,ww,xkmhd,
! z_base
! recompute pos : DOLOOP_STMT solve_em.f90:2247
! recompute vars : cqw
  do ij = 1, grid%num_tiles
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : cqw
  do ij = 1, grid%num_tiles
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
! recompute : c2a,mu_2,muts,ph_2,t_2,t_save
    if (non_hydrostatic) then
      call a_calc_coef_w( a,a_a,alpha,a_alpha,gamma,a_gamma,mut,a_mut,cqw,a_cqw,rdn,rdnw,c2a,a_c2a,dts,g,epssm,ide,jde,kde,ims,ime,&
&jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij) )
    endif
    call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,0,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
    mu_1(:,:) = mu_1h(:,:)
    mu_2(:,:) = mu_2h(:,:)
    p(:,:,:) = ph(:,:,:)
    t_1(:,:,:) = t_1h(:,:,:)
    t_2(:,:,:) = t_2h(:,:,:)
    u_1(:,:,:) = u_1h(:,:,:)
    u_2(:,:,:) = u_2h(:,:,:)
    v_1(:,:,:) = v_1h(:,:,:)
    v_2(:,:,:) = v_2h(:,:,:)
    w_1(:,:,:) = w_1h(:,:,:)
    w_2(:,:,:) = w_2h(:,:,:)
    call a_small_step_prep( u_1,a_u_1,u_2,a_u_2,v_1,a_v_1,v_2,a_v_2,w_1,a_w_1,w_2,a_w_2,t_1,a_t_1,t_2,a_t_2,a_ph_1,a_ph_2,mub,mu_1,&
&a_mu_1,mu_2,a_mu_2,muu,a_muu,muus,a_muus,muv,a_muv,muvs,a_muvs,mut,a_mut,muts,a_muts,a_mudf,a_u_save,a_v_save,a_w_save,&
&a_t_save,a_ph_save,a_mu_save,a_ww,a_ww1,a_c2a,pb,p,a_p,alt,a_alt,msfu,msfv,msft,rk_step,leapfrog,ide,jde,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
  al(:,:,:) = alh(:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_2,mub,num
! _3d_m,param_first_scalar,ph_2,phb,rdx,rdy,t_2,u_2,v_2,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : mut
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : mut
  do ij = 1, grid%num_tiles
    if (config_flags%specified .or. config_flags%nested) then
      call a_spec_bdy_dry( config_flags,a_ru_tend,a_rv_tend,a_ph_tend,a_t_tend,a_rw_tend,a_mu_tend,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,&
&a_w_bt,a_mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call a_rk_addtend_dry( a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,&
&a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,rk_step,h_diabatic,a_mut,msft,msfu,msfv,ide,jde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call a_relax_bdy_dry( config_flags,a_u_save,a_v_save,a_ph_save,a_t_save,a_w_save,a_mu_tend,a_ru,a_rv,ph_2,a_ph_2,t_2,a_t_2,&
&w_2,a_w_2,a_mu_2,mut,a_mut,a_u_b,a_v_b,a_ph_b,a_t_b,a_w_b,a_mu_b,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,a_w_bt,a_mu_bt,spec_bdy_width,&
&spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
  end do
  al(:,:,:) = alh(:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  p(:,:,:) = ph(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
!  recdepend vars : al,alb,config_flags,dnw,grid,ide,ids,ime,ims,jde,jds
! ,jme,jms,k_end,k_start,kde,kme,kms,moist_2,msft,msfu,msfv,mu_2,mub,num
! _3d_m,p,param_first_scalar,ph_1,ph_2,phb,rdx,rdy,t_1,t_2,u_1,u_2,v_1,v
! _2,w_1,w_2
! recompute pos : DOLOOP_STMT solve_em.f90:1697
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  do ij = 1, grid%num_tiles
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
! recompute vars : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  do ij = 1, grid%num_tiles
    call a_rk_tendency( config_flags,rk_step,a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,&
&a_t_tendf,a_mu_tend,a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,ru,a_ru,rv,a_rv,rw,a_rw,ww,a_ww,u_2,a_u_2,v_2,a_v_2,w_2,&
&a_w_2,t_2,a_t_2,ph_2,a_ph_2,u_1,a_u_1,v_1,a_v_1,w_1,a_w_1,t_1,a_t_1,ph_1,a_ph_1,phb,t_init,mu_2,a_mu_2,mut,a_mut,muu,a_muu,&
&muv,a_muv,mub,al,a_al,alt,a_alt,p,a_p,pb,php,a_php,cqu,a_cqu,cqv,a_cqv,cqw,a_cqw,u_base,v_base,z_base,msfu,msfv,msft,f,e,sina,&
&cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,kvdif,xkmhd,a_xkmhd,cf1,cf2,cf3,cfn,cfn1,non_hydrostatic,leapfrog,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  p(:,:,:) = ph(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  xkmhd(:,:,:) = xkmhdh(:,:,:)
  a_rk_step_is_one: if (rk_step .eq. 1) then
! recompute : p8w,p_phy,t8w,t_phy,th_phy
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
      do ij = 1, grid%num_tiles
        call a_calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,a_xkmhd,xkmv,xkhh,xkhv,bn2,a_bn2h,khdif,div,&
&defor11,defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,a_p8w,t8w,a_t8w,th_phy,a_th_phy,t_phy,a_t_phy,&
&p_phy,a_p_phy,moist_2,a_moist_2,dn,dnw,dx,dy,rdz,rdzw,num_3d_m,cf1,cf2,cf3,kh_tke_upper_bound,ids,ide,jds,jde,kde,ims,ime,&
&jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do
    endif
    do ij = 1, grid%num_tiles
      call a_phy_prep( p,a_p,pb,ph_2,a_ph_2,phb,t_2,a_t_2,th_phy,a_th_phy,p_phy,a_p_phy,pi_phy,a_pi_phyh,a_p8w,t_phy,a_t_phy,a_t8w,&
&z,a_z,z_at_w,a_z_at_wh,fnm,fnp,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
    end do
    do ij = 1, grid%num_tiles
      call a_init_zero_tendency( a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,a_moist_tend,num_3d_m,ims,ime,jms,jme,kms,&
&kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do
  endif a_rk_step_is_one
  dnw(:) = dnwh(:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  do ij = 1, grid%num_tiles
    call a_rk_step_prep( config_flags,u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,a_ph_2,mu_2,a_mu_2,moist_2,a_moist_2,a_ru,a_rv,a_rw,a_ww,a_php,&
&a_alt,muu,a_muu,muv,a_muv,mub,mut,a_mut,a_al,a_cqu,a_cqv,a_cqw,msfu,msfv,msft,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
  end do
end do a_runge_kutta_loop

!----------------------------------------------
! FREE DYNAMIC MEMORY
!----------------------------------------------
#endif

#endif
end subroutine solve_em_ad

