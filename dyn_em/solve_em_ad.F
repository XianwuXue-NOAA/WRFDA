!                           DISCLAIMER
!
!   This file was generated by TAF version 1.7.18
!***********************************************************
!***********************************************************

!  revised by Qingnong Xiao and Zaizhong Ma in June 08,2005

!***********************************************************
!***********************************************************
!
!   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
!   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
!   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
!   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
!   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
!   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
!   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
!   OF THE POSSIBILITY OF SUCH DAMAGES.
!
!                           Haftungsbeschraenkung
!   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
!   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
!   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
!   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
!   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
!   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
!   Mitteilung darueber an FastOpt.
!
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!WRF:MEDIATION_LAYER:SOLVER

SUBROUTINE solve_em_ad ( grid , config_flags , &
!
#include "em_dummy_args.inc"
!
                 )

! Driver layer modules
   USE module_domain
   USE module_configure
   USE module_driver_constants
   USE module_machine
   USE module_tiles
   USE module_dm
! Mediation layer modules
! Model layer modules
   USE module_model_constants
   USE module_small_step_em
   USE module_em
   USE module_big_step_utilities_em
   USE module_bc
   USE module_bc_em
   USE module_solvedebug_em
   USE module_physics_addtendc
   USE module_diffusion_em
! Registry generated module
   USE module_state_description
   USE module_radiation_driver
   USE module_surface_driver
   USE module_cumulus_driver
   USE module_microphysics_driver
   USE module_pbl_driver
#ifdef WRF_CHEM
   USE module_input_chem_data
#endif

   USE a_module_small_step_em
   USE a_module_em
   USE a_module_big_step_utilities_em
   USE a_module_bc
   USE a_module_bc_em
   USE a_module_diffusion_em

   IMPLICIT NONE

   !  Input data.

   TYPE(domain) , TARGET          :: grid

   !  Definitions of dummy arguments to solve
#include <em_dummy_decl.inc>

   !  WRF state bcs
   TYPE (grid_config_rec_type) , INTENT(IN)          :: config_flags

   ! WRF state data

!#include "../phys/physics_drive.int"

   ! Local data

   INTEGER                         :: k_start , k_end, its, ite, jts, jte
   INTEGER                         :: ids , ide , jds , jde , kds , kde , &
                                      ims , ime , jms , jme , kms , kme , &
                                      ips , ipe , jps , jpe , kps , kpe
   INTEGER                         :: ij , iteration
   INTEGER                         :: im , num_3d_m , ic , num_3d_c
   INTEGER                         :: loop
   INTEGER                         :: ijds, ijde
   INTEGER                         :: itmpstep
   INTEGER                         :: sz

! storage for tendencies and decoupled state (generated from Registry)
#include <em_i1_decl.inc>

#ifdef WRFVAR

   INTEGER :: rc 
   INTEGER :: number_of_small_timesteps, rk_step
   INTEGER :: klevel,ijm,ijp,i,j,k,size1,size2    ! for prints/plots only
   INTEGER :: idum1, idum2, dynamics_option

   INTEGER :: rk_order, iwmax, jwmax, kwmax
   REAL :: dt_rk, dts_rk, dtm, wmax
   LOGICAL :: leapfrog
   INTEGER :: l,kte,kk
integer myproc

real a_z_at_wh(1+grid%em31-grid%sm31,1+grid%em32-grid%sm32,1+grid%em33-grid%sm33)
real ah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ali(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alphah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real dnwh(grid%sm32:grid%em32)
real dt_rkh
real dts_rkh
real gammah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer iteration1
real moist_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real mu_1h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_1i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2j(grid%sm31:grid%em31,grid%sm33:grid%em33)
integer number_of_small_timestepsh
real ph(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer rk_step1
real ru_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ww_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real wwh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real a_pi_phyh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)                  :: a_bn2h

real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqc_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqr_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqi_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqs_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqg_bth

!JM real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)        :: a_moist_tend

!----------------------------------------------------------------------------------------
!defined by Zaizhong Ma for saving the basic states
!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------
!*********************************************************************
real u_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_1o(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2o(grid%sm31:grid%em31,grid%sm33:grid%em33)
real po(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)


real alp(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pp(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2p(grid%sm31:grid%em31,grid%sm33:grid%em33)

real alq(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2q(grid%sm31:grid%em31,grid%sm33:grid%em33)
real pq(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2q(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real wwr(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2r(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2r(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real w_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real wws(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2s(grid%sm31:grid%em31,grid%sm33:grid%em33)
real ph_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real as(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2saves(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real mudf_ma(grid%sm31:grid%em31,grid%sm33:grid%em33)
!*********************************************************************
!----------------------------------------------------------------------------------------
real ww_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhd_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real moist_tend_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real dnw_keep3(grid%sm32:grid%em32)

!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------
real ww_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real a_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alpha_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real gamma_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: p_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: al_keep3
!----------------------------------------------------------------------------------------

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist) :: moist_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist) :: moist_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: p_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: al_keep4
!----------------------------------------------------------------------------------------
integer :: iy

real ru_mz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_mz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real moist_tendz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
!----------------------------------------

#ifdef DEREF_KLUDGE
   INTEGER     :: sm31 , em31 , sm32 , em32 , sm33 , em33
   INTEGER     :: sm31x, em31x, sm32x, em32x, sm33x, em33x
   INTEGER     :: sm31y, em31y, sm32y, em32y, sm33y, em33y
#endif

#include <bench_solve_em_def.h>

#include "deref_kludge.h"

#define COPY_IN
#include <em_scalar_derefs.inc>
#ifdef DM_PARALLEL
#    define REGISTER_I1
#      include <em_data_calls.inc>
#endif

!<DESCRIPTION>
!<pre>
! solve_em is the main driver for advancing a grid a single timestep.
! It is a mediation-layer routine -> DM and SM calls are made where 
! needed for parallel processing.  
!
! solve_em can integrate the equations using 3 time-integration methods
!      
!    - 3rd order Runge-Kutta time integration (recommended)
!      
!    - 2nd order Runge-Kutta time integration
!      
!    - Leapfrog time integration
!      (note: the leapfrog scheme is not correctly implemented
!      for most of the physics)
!
! The main sections of solve_em are
!     
! (1) Runge-Kutta (RK) loop
!     
! (2) Non-timesplit physics (i.e., tendencies computed for updating
!     model state variables during the first RK sub-step (loop)
!     
! (3) Small (acoustic, sound) timestep loop - within the RK sub-steps
!     
! (4) Scalar advance for moist and chem scalar variables (and TKE)
!     within the RK sub-steps.
!     
! (5) time-split physics (after the RK step), currently this includes
!     only microphyics
!
! A more detailed description of these sections follows.
!</pre>
!</DESCRIPTION>

#include <bench_solve_em_init.h>

! xyh
!    return
call get_ijk_from_grid( grid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe )
#ifdef DM_PARALLEL
#   include "HALO_EM_INIT_1.inc"
#   include "HALO_EM_INIT_2.inc"
#   include "HALO_EM_INIT_3.inc"
#   include "HALO_EM_INIT_4.inc"
#   include "HALO_EM_INIT_5.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

ij = 1

!----------------------------------------------
! SAVE REQUIRED INPUT VARIABLES
!----------------------------------------------
#ifdef DM_PARALLEL
#include "HALO_ADJ_SAVE1.inc"
#endif
xkmhdi(:,:,:) = xkmhd(:,:,:)
ww_mh(:,:,:) = ww_m(:,:,:)
w_2j(:,:,:) = w_2(:,:,:)
w_1i(:,:,:) = w_1(:,:,:)
v_2i(:,:,:) = v_2(:,:,:)
v_1i(:,:,:) = v_1(:,:,:)
u_2i(:,:,:) = u_2(:,:,:)
u_1i(:,:,:) = u_1(:,:,:)
t_tendfi(:,:,:) = t_tendf(:,:,:)
t_2j(:,:,:) = t_2(:,:,:)
t_1i(:,:,:) = t_1(:,:,:)
rw_tendfi(:,:,:) = rw_tendf(:,:,:)
rv_tendfi(:,:,:) = rv_tendf(:,:,:)
rv_mh(:,:,:) = rv_m(:,:,:)
ru_tendfi(:,:,:) = ru_tendf(:,:,:)
ru_mh(:,:,:) = ru_m(:,:,:)
pm1i(:,:,:) = pm1(:,:,:)
ph_tendfi(:,:,:) = ph_tendf(:,:,:)
ph_2j(:,:,:) = ph_2(:,:,:)
ph_1i(:,:,:) = ph_1(:,:,:)
pj(:,:,:) = p(:,:,:)
number_of_small_timestepsh = number_of_small_timesteps
mu_2j(:,:) = mu_2(:,:)
mu_1i(:,:) = mu_1(:,:)
moist_tendi(:,:,:,:) = moist_tend(:,:,:,:)
moist_2i(:,:,:,:) = moist_2(:,:,:,:)
moist_1i(:,:,:,:) = moist_1(:,:,:,:)
gammah(:,:,:) = gamma(:,:,:)
dts_rkh = dts_rk
dt_rkh = dt_rk
alphah(:,:,:) = alpha(:,:,:)
alj(:,:,:) = al(:,:,:)
ah(:,:,:) = a(:,:,:)

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
a_a(:,:,:) = 0.
a_advect_tend(:,:,:) = 0.
a_alpha(:,:,:) = 0.
a_bn2h(:,:,:) = 0.
a_c2a(:,:,:) = 0.
a_cqu(:,:,:) = 0.
a_cqv(:,:,:) = 0.
a_cqw(:,:,:) = 0.
a_gamma(:,:,:) = 0.
a_moist_tend(:,:,:,:) = 0.
a_mu_save(:,:) = 0.
a_mu_tend(:,:) = 0.
a_muave(:,:) = 0.
a_mut(:,:) = 0.
a_muts(:,:) = 0.
a_muu(:,:) = 0.
a_muus(:,:) = 0.
a_muv(:,:) = 0.
a_muvs(:,:) = 0.
a_p8w(:,:,:) = 0.
a_p_phy(:,:,:) = 0.
a_ph_save(:,:,:) = 0.
a_ph_tend(:,:,:) = 0.
a_ph_tendf(:,:,:) = 0.
a_pi_phyh(:,:,:) = 0.
a_pm1(:,:,:) = 0.
a_rqc_bth(:,:,:,:) = 0.
a_rqg_bth(:,:,:,:) = 0.
a_rqi_bth(:,:,:,:) = 0.
a_rqr_bth(:,:,:,:) = 0.
a_rqs_bth(:,:,:,:) = 0.
a_ru_m(:,:,:) = 0.
a_ru_tend(:,:,:) = 0.
a_ru_tendf(:,:,:) = 0.
a_rv_m(:,:,:) = 0.
a_rv_tend(:,:,:) = 0.
a_rv_tendf(:,:,:) = 0.
a_rw_tend(:,:,:) = 0.
a_rw_tendf(:,:,:) = 0.
a_t8w(:,:,:) = 0.
a_t_2save(:,:,:) = 0.
a_t_phy(:,:,:) = 0.
a_t_save(:,:,:) = 0.
a_t_tend(:,:,:) = 0.
a_t_tendf(:,:,:) = 0.
a_th_phy(:,:,:) = 0.
a_u_save(:,:,:) = 0.
a_v_save(:,:,:) = 0.
a_w_save(:,:,:) = 0.
a_ww1(:,:,:) = 0.
a_ww_m(:,:,:) = 0.
a_z_at_wh(:,:,:) = 0.


!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
cfn = grid%cfn
! recompute : cfn
cfn1 = grid%cfn1
! recompute : cfn1
epsts = grid%epsts
! recompute : epsts
step_number = grid%step_number
! recompute : step_number
rdx = grid%rdx
! recompute : rdx
rdy = grid%rdy
! recompute : rdy
cf1 = grid%cf1
! recompute : cf1
cf2 = grid%cf2
! recompute : cf2
cf3 = grid%cf3
! recompute : cf3
dtbc = grid%dtbc
! recompute : dtbc
dx = grid%dx
! recompute : dx
dy = grid%dy
! recompute : dy
dt = grid%dt
! recompute : dt
rk_ord = grid%rk_ord
! recompute : rk_ord
diff_opt = grid%diff_opt
! recompute : diff_opt
damp_opt = grid%damp_opt
! recompute : damp_opt
zdamp = grid%zdamp
! recompute : zdamp
dampcoef = grid%dampcoef
! recompute : dampcoef
khdif = grid%khdif
! recompute : khdif
kvdif = grid%kvdif
! recompute : kvdif
smdiv = grid%smdiv
! recompute : smdiv
emdiv = grid%emdiv
! recompute : emdiv
epssm = grid%epssm
! recompute : epssm
non_hydrostatic = grid%non_hydrostatic
! recompute : non_hydrostatic
time_step_sound = grid%time_step_sound
! recompute : time_step_sound
kh_tke_upper_bound = grid%kh_tke_upper_bound
! recompute : kh_tke_upper_bound
spec_bdy_width = grid%spec_bdy_width
! recompute : spec_bdy_width
spec_zone = grid%spec_zone
! recompute : spec_zone
relax_zone = grid%relax_zone
! recompute : relax_zone
call get_ijk_from_grid( grid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe )
!  recompute : ide,ids,ime,ims,ipe,ips,jde,jds,jme,jms,jpe,jps,kde,kds,k
! me,kms,kpe,kps
k_start = kps
! recompute : k_start
k_end = kpe
! recompute : k_end
ijds = min(ids,jds)
! recompute : ijds
ijde = max(ide,jde)
! recompute : ijde
num_3d_m = num_moist
! recompute : num_3d_m
call set_tiles( grid,ids,ide,jds,jde,ips,ipe,jps,jpe )
if ( grid%num_tiles > 1 ) call wrf_error_fatal( "Adjoint code is not thread safe" )
! recompute : grid
rk_order = config_flags%rk_ord
! recompute : rk_order
leapfrog =  .false. 
! recompute : leapfrog
dts = dt/float(time_step_sound)
! recompute : dts
if (rk_ord .eq. 1) then
  leapfrog =  .true. 
endif
! recompute : leapfrog

!------------------------------
runge_kutta_looq: do rk_step = 1, rk_order
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

  rk_step_is_ong: if (rk_step .eq. 1) then
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

  endif rk_step_is_ong

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#endif

  small_stepu: do iteration = 1, number_of_small_timesteps
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#      include "HALO_EM_C2.inc"
#endif

  end do small_stepu

    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )

#ifdef DM_PARALLEL
#  include "HALO_EM_D.inc"
#endif

  moist_scalar_advancg: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loor: do im = param_first_scalar, num_3d_m
        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do moist_variable_loor
  endif moist_scalar_advancg

    call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if ( .not. non_hydrostatic) then
      call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#  include "HALO_EM_C2.inc"
#  include "HALO_EM_D2_5.inc"
#  include "HALO_EM_MOIST_E_5.inc"
#  include "HALO_EM_TKE_5.inc"
#  include  "HALO_EM_TKE_F.inc"
#endif


end do runge_kutta_looq

! recompute : dt_rk,moist_2,mu_2,muts,ph_2,ph_tend,t_2
if (config_flags%mp_physics .ne. 0) then
  if (config_flags%specified .or. config_flags%nested) then
    sz = spec_zone
  else
    sz = 0
  endif
! recompute : sz
#ifdef REMOVED_BY_JM
    its = max(grid%i_start(ij),ids+sz)
! recompute : its
    ite = min(grid%i_end(ij),ide-1-sz)
! recompute : ite
    jts = max(grid%j_start(ij),jds+sz)
! recompute : jts
    jte = min(grid%j_end(ij),jde-1-sz)
! recompute : jte
#else
! in case of parallel, we want the computation to go out one cell 
! onto halo this ignores tiling; multi-threading is disabled above
! this should also work for non-parallel

    its = max(ips-1,ids+sz)
    ite = min(ipe+1,ide-1-sz)
    jts = max(jps-1,jds+sz)
    jte = min(jpe+1,jde-1-sz)
#endif
    if ( .not. non_hydrostatic) then

#ifdef DM_PARALLEL
! halo  HALO_ADJ_A dyn_em  8:msft,ht,a_u,a_v,a_w
#include "HALO_ADJ_A.inc"
#endif

      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
&ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_end )

    endif

    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
&rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

endif

!------------------------------
!------------------------------

a_runge_kutta_loop: do rk_step = rk_order, 1, -1

  a(:,:,:) = ah(:,:,:)
  al(:,:,:) = alj(:,:,:)
  alpha(:,:,:) = alphah(:,:,:)
!  dt_rk = dt_rkh
!  dts_rk = dts_rkh
  gamma(:,:,:) = gammah(:,:,:)
  moist_1(:,:,:,:) = moist_1i(:,:,:,:)
  moist_2(:,:,:,:) = moist_2i(:,:,:,:)
  moist_tend(:,:,:,:) = moist_tendi(:,:,:,:)
  mu_1(:,:) = mu_1i(:,:)
  mu_2(:,:) = mu_2j(:,:)
!  number_of_small_timesteps = number_of_small_timestepsh
  p(:,:,:) = pj(:,:,:)
  ph_1(:,:,:) = ph_1i(:,:,:)
  ph_2(:,:,:) = ph_2j(:,:,:)
  ph_tendf(:,:,:) = ph_tendfi(:,:,:)
  pm1(:,:,:) = pm1i(:,:,:)
  ru_m(:,:,:) = ru_mh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfi(:,:,:)
  rv_m(:,:,:) = rv_mh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfi(:,:,:)
  rw_tendf(:,:,:) = rw_tendfi(:,:,:)
  t_1(:,:,:) = t_1i(:,:,:)
  t_2(:,:,:) = t_2j(:,:,:)
  t_tendf(:,:,:) = t_tendfi(:,:,:)
  u_1(:,:,:) = u_1i(:,:,:)
  u_2(:,:,:) = u_2i(:,:,:)
  v_1(:,:,:) = v_1i(:,:,:)
  v_2(:,:,:) = v_2i(:,:,:)
  w_1(:,:,:) = w_1i(:,:,:)
  w_2(:,:,:) = w_2j(:,:,:)
  ww_m(:,:,:) = ww_mh(:,:,:)
  xkmhd(:,:,:) = xkmhdi(:,:,:)

  runge_kutta_loor: do rk_step1 = 1, rk_step-1
    if (rk_order .eq. 1) then
      if (step_number .ne. 1) then
        number_of_small_timesteps = 2*time_step_sound
        dt_rk = dt
      else
        number_of_small_timesteps = time_step_sound
        dt_rk = dt/2.
      endif
      dts_rk = dts
    else if (rk_order .eq. 2) then
      if (rk_step1 .eq. 1) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    else if (rk_order .eq. 3) then
      if (rk_step1 .eq. 1) then
        dt_rk = dt/3.
        dts_rk = dt_rk
        number_of_small_timesteps = 1
      else if (rk_step1 .eq. 2) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    endif

#ifdef DM_PARALLEL
! not sure this is needed here. add it for now; can remove later
#    include "HALO_ADJ_A1.inc"
#endif

      call rk_step_prep( config_flags,rk_step1,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,&
&alb,cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij)&
&,grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

    rk_step_is_onze: if (rk_step1 .eq. 1) then
        call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,&
&rk_step1,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

        call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,&
&v_phy,p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,&
&rqccuten,rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

          call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
    endif rk_step_is_onze

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

      call rk_tendency( config_flags,rk_step1,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,&
&h_diabatic,phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,&
&e,sina,cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,&
&jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
        call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step1,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif


      call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step1,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#      include "HALO_EM_C2.inc"
#      include "HALO_EM_B.inc"
#endif

    small_stepzt: do iteration = 1, number_of_small_timesteps

        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif


#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif
        call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then
              call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif
        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )


#ifdef DM_PARALLEL
#      include "HALO_EM_C2.inc"
#      include "HALO_EM_B.inc"
#endif

    end do small_stepzt
      call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!      call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij)&
!&,grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original

      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
#ifdef DM_PARALLEL
#  include "HALO_EM_D.inc"
#endif

    moist_scalar_advancj: if (num_3d_m .ge. param_first_scalar) then
      moist_variable_loou: do im = param_first_scalar, num_3d_m

          call rk_scalar_tend( im,im,config_flags,rk_step1,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,&
&kvdif,xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),&
&grid%j_end(ij),k_start,k_end )
          if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
            if (im .eq. p_qv) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
          if (config_flags%nested .and. rk_step1 .eq. 1) then
            if (im .eq. p_qc) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qr) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qi) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qs) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qg) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif

          call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step1,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do moist_variable_loou
    endif moist_scalar_advancj

#ifdef DM_PARALLEL
#       include "HALO_EM_TKE_ADVECT_5.inc"
#endif

      call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if ( .not. non_hydrostatic) then
        call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#    include "HALO_EM_B.inc"
#    include "HALO_EM_C2.inc"
#    include "HALO_EM_D2_5.inc"
#    include "HALO_EM_MOIST_E_5.inc"
#endif

  end do runge_kutta_loor

#ifdef DM_PARALLEL
#    include "HALO_ADJ_SAVE2.inc"
#endif

!------------------------------
  ww_m_keep3(:,:,:) = ww_m(:,:,:)
  rv_m_keep3(:,:,:) = rv_m(:,:,:)
  ru_m_keep3(:,:,:) = ru_m(:,:,:)
  a_keep3(:,:,:) = a(:,:,:)
  alpha_keep3(:,:,:) = alpha(:,:,:)
  gamma_keep3(:,:,:) = gamma(:,:,:)
!------------------------------


  xkmhdh(:,:,:) = xkmhd(:,:,:)
  w_2h(:,:,:) = w_2(:,:,:)
  w_1h(:,:,:) = w_1(:,:,:)
  v_2h(:,:,:) = v_2(:,:,:)
  v_1h(:,:,:) = v_1(:,:,:)
  u_2h(:,:,:) = u_2(:,:,:)
  u_1h(:,:,:) = u_1(:,:,:)
  t_tendfh(:,:,:) = t_tendf(:,:,:)
  t_2h(:,:,:) = t_2(:,:,:)
  t_1h(:,:,:) = t_1(:,:,:)
  rw_tendfh(:,:,:) = rw_tendf(:,:,:)
  rv_tendfh(:,:,:) = rv_tendf(:,:,:)
  ru_tendfh(:,:,:) = ru_tendf(:,:,:)
  pm1h(:,:,:) = pm1(:,:,:)
  ph_tendfh(:,:,:) = ph_tendf(:,:,:)
  ph_2h(:,:,:) = ph_2(:,:,:)
  ph_1h(:,:,:) = ph_1(:,:,:)
  ph(:,:,:) = p(:,:,:)
  mu_2h(:,:) = mu_2(:,:)
  mu_1h(:,:) = mu_1(:,:)
  moist_tendh(:,:,:,:) = moist_tend(:,:,:,:)
  moist_2h(:,:,:,:) = moist_2(:,:,:,:)
  moist_1h(:,:,:,:) = moist_1(:,:,:,:)
  dnwh(:) = dnw(:)
  alh(:,:,:) = al(:,:,:)
!----------------------------------------
  mudf_ma(:,:) = mudf(:,:)
!----------------------------------------


  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzc: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzc
!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!  end do

!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save
!  do ij = 1, grid%num_tiles
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

  small_stepzq: do iteration = 1, number_of_small_timesteps

      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

  end do small_stepzq
! recompute : mu_2,mudf,muts,ph_2,pm1,ru_m,rv_m,t_2,u_2,v_2,w_2,ww_m

    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )

#ifdef DM_PARALLEL
#  include "HALO_EM_D.inc"
#endif

! recompute : mu_2,ph_2,t_2

  moist_scalar_advanch: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loos: do im = param_first_scalar, num_3d_m

        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    end do moist_variable_loos
  endif moist_scalar_advanch

! recompute : moist_2

    call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    if ( .not. non_hydrostatic) then
      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_end )
    endif

    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
&rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_EM_D2_5.inc"
#endif

!------------------------------
!------------------------------

  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------


  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#   include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzg: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif

  endif rk_step_is_onzg

#ifdef DM_PARALLEL
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

!------------------------------
!------------------------------

  small_stepzw: do iteration = 1, number_of_small_timesteps

      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#   include "HALO_EM_B.inc"
#   include "HALO_EM_C2.inc"
#endif

  end do small_stepzw
! recompute : mu_2,mudf,muts,ph_2,pm1,ru_m,rv_m,t_2,u_2,v_2,w_2,ww_m

#ifdef DM_PARALLEL
#   include "HALO_EM_D.inc"
#endif

    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )

! recompute : mu_2,ph_2,t_2
!---------------------------------------------------------------------------------

  a_moist_scalar_advance: if (num_3d_m .ge. param_first_scalar) then

#ifdef DM_PARALLEL
#  include "HALO_ADJ_SAVE3.inc"
#endif
!----------------------------------------
!1111
!saved by Zaizhong Ma
!----------------------------------------
u_1_keep4(:,:,:) = u_1(:,:,:)
u_2_keep4(:,:,:) = u_2(:,:,:)
v_1_keep4(:,:,:) = v_1(:,:,:)
v_2_keep4(:,:,:) = v_2(:,:,:)
w_1_keep4(:,:,:) = w_1(:,:,:)
w_2_keep4(:,:,:) = w_2(:,:,:)
ph_1_keep4(:,:,:) = ph_1(:,:,:)
ph_2_keep4(:,:,:) = ph_2(:,:,:)
t_1_keep4(:,:,:) = t_1(:,:,:)
t_2_keep4(:,:,:) = t_2(:,:,:)
mu_1_keep4(:,:) = mu_1(:,:)
mu_2_keep4(:,:) = mu_2(:,:)
p_keep4(:,:,:) = p(:,:,:)
al_keep4(:,:,:) = al(:,:,:)
moist_1_keep4(:,:,:,:) = moist_1(:,:,:,:)
moist_2_keep4(:,:,:,:) = moist_2(:,:,:,:)
!----------------------------------------
rv_mz(:,:,:) = rv_m(:,:,:)
ru_tendfz(:,:,:) = ru_tendf(:,:,:)
ru_mz(:,:,:) = ru_m(:,:,:)
moist_tendz(:,:,:,:) = moist_tend(:,:,:,:)
!----------------------------------------

    do im = num_3d_m, param_first_scalar, -1
!----------------------------------------
!  1111
!recovered by Zaizhong Ma
!----------------------------------------
u_1(:,:,:) = u_1_keep4(:,:,:)
u_2(:,:,:) = u_2_keep4(:,:,:)
v_1(:,:,:) = v_1_keep4(:,:,:)
v_2(:,:,:) = v_2_keep4(:,:,:)
w_1(:,:,:) = w_1_keep4(:,:,:)
w_2(:,:,:) = w_2_keep4(:,:,:)
ph_1(:,:,:) = ph_1_keep4(:,:,:)
ph_2(:,:,:) = ph_2_keep4(:,:,:)
t_1(:,:,:) = t_1_keep4(:,:,:)
t_2(:,:,:) = t_2_keep4(:,:,:)
mu_1(:,:) = mu_1_keep4(:,:)
mu_2(:,:) = mu_2_keep4(:,:)
p(:,:,:) = p_keep4(:,:,:)
al(:,:,:) = al_keep4(:,:,:)
moist_1(:,:,:,:) = moist_1_keep4(:,:,:,:)
moist_2(:,:,:,:) = moist_2_keep4(:,:,:,:)
!----------------------------------------
!----------------------------------------
rv_m(:,:,:) = rv_mz(:,:,:)
ru_tendf(:,:,:) = ru_tendfz(:,:,:)
ru_m(:,:,:) = ru_mz(:,:,:)
moist_tend(:,:,:,:) = moist_tendz(:,:,:,:)
!----------------------------------------

#ifdef DM_PARALLEL
#   include "HALO_EM_D.inc"
#   include "HALO_ADJ_D.inc"
#endif

     moist_variable_loor2:  do iy = param_first_scalar, num_3d_m - 1

        call rk_scalar_tend( iy,iy,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,iy),moist_2(ims,kms,jms,&
&iy),moist_tend(ims,kms,jms,iy),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (iy .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (iy .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

        call rk_update_scalar( iy,iy,moist_1(ims,kms,jms,iy),moist_2(ims,kms,jms,iy),moist_tend(ims,kms,jms,iy),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    end do moist_variable_loor2

        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

!-------------------------------------------------------

#ifdef DM_PARALLEL
#   include "HALO_ADJ_E.inc"
#endif

! recompute : advect_tend,moist_tend

        call a_rk_update_scalar( im,im,moist_1(ims,kms,jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),advect_tend,a_advect_tend,msft,mu_1,a_mu_1,mu_2,a_mu_2,&
&mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqc_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqr_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqi_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqs_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqg_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

#ifdef DM_PARALLEL
# include "HALO_ADJ_RKUPDATE.inc"
#endif

        call a_rk_scalar_tend( im,im,config_flags,rk_step,ru_m,a_ru_m,rv_m,a_rv_m,ww_m,a_ww_m,mut,a_mut,alt,a_alt,moist_1(ims,kms,&
&jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),&
&a_advect_tend,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,kvdif,xkmhd,a_xkmhd,leapfrog,ids,ide,jds,jde,kde,&
&ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )

    end do
  endif a_moist_scalar_advance

!------------------------------
!------------------------------

!------------------------------
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#  include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzz: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzz

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

!  recompute : a,al,alpha,c2a,gamma,mu_1,mu_2,mu_save,mudf,p,ph_1,ph_2,p
! h_save,pm1,t_1,t_2,t_save,u_1,u_2,u_save,v_1,v_2,v_save,w_1,w_2,w_save
! ,ww1

!------------------------------
!------------------------------

  small_stepzz: do iteration = 1, number_of_small_timesteps

      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif

      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

  end do small_stepzz

!------------------------------------------------------

    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#  include "HALO_EM_D.inc"
#  include "HALO_ADJ_D.inc"
#endif

! recompute : muus,muvs

    call a_small_step_finish( u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,t_2,a_t_2,a_ph_2,a_mu_2,mut,a_mut,muts,a_muts,muu,a_muu,muus,a_muus,&
&muv,a_muv,muvs,a_muvs,u_save,a_u_save,v_save,a_v_save,w_save,a_w_save,t_save,a_t_save,a_ph_save,a_mu_save,msfu,msfv,msft,ide,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )

!halo HALO_ADJ_B dyn_em 8:a_muts,a_muus,a_muvs
#ifdef DM_PARALLEL
#  include "HALO_ADJ_B.inc"
#endif

    call a_calc_mu_uv_1( config_flags,a_muts,a_muus,a_muvs,ids,ide,jds,jde,ims,ime,jms,jme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )

!------------------------------
!------------------------------

  a_small_steps: do iteration = number_of_small_timesteps, 1, -1

!------------------------------
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#   include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

  rk_step_is_onzd: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzd

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

    small_stepzr: do iteration1 = 1, iteration-1

        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration1,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif

#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration1,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif

        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then

               CALL zero_grad_bdy ( w_2,                        &
                                    'w'         , config_flags, &
                                    spec_zone,                  &
                                    ids,ide, jds,jde, kds,kde,  & ! domain dims
                                    ims,ime, jms,jme, kms,kme,  & ! memory dims
                                    ips,ipe, jps,jpe, kps,kpe,  & ! patch  dims
                                    grid%i_start(ij), grid%i_end(ij),         &
                                    grid%j_start(ij), grid%j_end(ij),         &
                                    k_start    , k_end             )

            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif

        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration1,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )


#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#      include "HALO_EM_C2.inc"
#endif

    end do small_stepzr

!----------------------------------------
#ifdef DM_PARALLEL
#      include "HALO_ADJ_SAVE4.inc"
#endif
alq(:,:,:) = al(:,:,:)
mu_2q(:,:) = mu_2(:,:)
pq(:,:,:) = p(:,:,:)
ph_2q(:,:,:) = ph_2(:,:,:)

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#endif

      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

!----------------------------------------
#ifdef DM_PARALLEL
#       include "HALO_ADJ_SAVE5.inc"
#endif
wwr(:,:,:) = ww(:,:,:)
u_2r(:,:,:) = u_2(:,:,:)
v_2r(:,:,:) = v_2(:,:,:)

#ifdef DM_PARALLEL
#     include "HALO_EM_C.inc"
#endif

      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#include "HALO_EM_INIT_1.inc"
#include "HALO_EM_INIT_2.inc"
#include "HALO_EM_INIT_3.inc"
#include "HALO_EM_INIT_4.inc"
#include "HALO_EM_INIT_5.inc"
#endif

      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#       include "HALO_ADJ_SAVE6.inc"
#endif
!----------------------------------------
w_2s(:,:,:) = w_2(:,:,:)
wws(:,:,:) = ww(:,:,:)
u_2s(:,:,:) = u_2(:,:,:)
v_2s(:,:,:) = v_2(:,:,:)
mu_2s(:,:) = mu_2(:,:)
t_2s(:,:,:) = t_2(:,:,:)
ph_2s(:,:,:) = ph_2(:,:,:)
as(:,:,:) = a(:,:,:)
t_2saves(:,:,:) = t_2save(:,:,:) 

      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then

          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,&
&kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ide,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          if (config_flags%specified) then
            call a_zero_grad_bdy( a_w_2,'w',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start)
          else
            call a_spec_bdyupdate( a_w_2,a_rw_tend,dts_rk,'h',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
          endif

          call a_spec_bdyupdate_ph( ph_save,a_ph_save,ph_2,a_ph_2,ph_tend,a_ph_tend,mu_tend,a_mu_tend,muts,a_muts,dts_rk,'h',&
&spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
        endif
      endif

!----------------------------------------
w_2(:,:,:) = w_2s(:,:,:)
ww(:,:,:) = wws(:,:,:)
u_2(:,:,:) = u_2s(:,:,:)
v_2(:,:,:) = v_2s(:,:,:)
mu_2(:,:) = mu_2s(:,:)
t_2(:,:,:) = t_2s(:,:,:)
ph_2(:,:,:) = ph_2s(:,:,:)
a(:,:,:) = as(:,:,:)
t_2save(:,:,:) = t_2saves(:,:,:) 

!halo HALO_ADJ_C dyn_em 8:a_w_2,w_2,ht,a_u,a_v
#ifdef DM_PARALLEL
#  include "HALO_ADJ_C.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      if (non_hydrostatic) then

#ifdef DM_PARALLEL
#  include "HALO_ADJ_ADVANCE_W.inc"
#endif

        call a_advance_w( w_2,a_w_2,rw_tend,a_rw_tend,ww,a_ww,u_2,a_u_2,v_2,a_v_2,mu_2,a_mu_2,mut,a_mut,muave,a_muave,muts,a_muts,&
&t_2save,a_t_2save,t_2,a_t_2,t_save,a_t_save,ph_2,a_ph_2,ph_save,a_ph_save,phb,ph_tend,a_ph_tend,ht,c2a,a_c2a,cqw,a_cqw,&
&alt,a_alt,alb,a,a_a,alpha,a_alpha,gamma,a_gamma,rdx,rdy,dts,t0,epssm,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,&
&ide,jds,jde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

      endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      call a_sumflux( a_u_2,a_v_2,a_ww,u_save,a_u_save,v_save,a_v_save,a_ww1,muu,a_muu,muv,a_muv,a_ru_m,a_rv_m,a_ww_m,msfu,msfv,&
&iteration,number_of_small_timesteps,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_muts,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_mu_2,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_t_2,a_t_tend,dts_rk,'t',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

!----------------------------------------
u_2(:,:,:) = u_2r(:,:,:)
v_2(:,:,:) = v_2r(:,:,:)
ww(:,:,:) = wwr(:,:,:)

#ifdef DM_PARALLEL
#  include "HALO_ADJ_C.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      call a_advance_mu_t( ww,a_ww,ww1,a_ww1,u_2,a_u_2,u_save,a_u_save,v_2,a_v_2,v_save,a_v_save,a_mu_2,a_mut,a_muave,a_muts,muu,&
&a_muu,muv,a_muv,a_mudf,a_t_2,t_save,a_t_save,a_t_2save,a_t_tend,mu_tend,a_mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,&
&msfv,msft,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-2,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )

!----------------------------------------
    al(:,:,:) = alq(:,:,:)
    mu_2(:,:) = mu_2q(:,:)
    p(:,:,:) = pq(:,:,:)
    ph_2(:,:,:) = ph_2q(:,:,:)

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_v_2,a_rv_tend,dts_rk,'v',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call a_spec_bdyupdate( a_u_2,a_ru_tend,dts_rk,'u',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      endif

!halo HALO_ADJ_D dyn_em 24:a_al,a_alt,a_cqu,a_cqv,a_mu_2,a_mu_save,a_mudf,a_mut,a_muts,a_muu,a_muus,a_muv,a_muvs,\
!a_p,a_ph_2,a_ph_save,a_php,a_ru_tend,a_rv_tend,a_t_2,a_t_save,a_u_2,a_u_save,a_v_2,a_v_save,a_w_2,a_w_save,al,\
!alt,cqu,cqv,msft,msfu,msfv,mu_2,mut,muts,muu,muus,muv,muvs,p,pb,ph_2,php,t_2,t_save,u_2,u_save,v_2,v_save,\
!w_2,w_save
!

#ifdef DM_PARALLEL
#  include "HALO_EM_D.inc"
#  include "HALO_ADJ_D.inc"
#endif
#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

#ifdef DM_PARALLEL
#   include "HALO_ADJ_ADVANCE_U.inc"
#endif
      call a_advance_uv( a_u_2,a_ru_tend,a_v_2,a_rv_tend,p,a_p,pb,ph_2,a_ph_2,php,a_php,alt,a_alt,al,a_al,mu_2,a_mu_2,muu,a_muu,&
&cqu,a_cqu,muv,a_muv,cqv,a_cqv,a_mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-2,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )

  end do a_small_steps

!------------------------------
!------------------------------

  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#  include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

  rk_step_is_onzf: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzf

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

!------------------------------
!------------------------------

!----------------------------------------
#ifdef DM_PARALLEL
#      include "HALO_ADJ_SAVE7.inc"
#endif
u_1o(:,:,:) = u_1(:,:,:)
u_2o(:,:,:) = u_2(:,:,:)
v_1o(:,:,:) = v_1(:,:,:)
v_2o(:,:,:) = v_2(:,:,:)
w_1o(:,:,:) = w_1(:,:,:)
w_2o(:,:,:) = w_2(:,:,:)
t_1o(:,:,:) = t_1(:,:,:)
t_2o(:,:,:) = t_2(:,:,:)
mu_1o(:,:) = mu_1(:,:)
mu_2o(:,:) = mu_2(:,:)
po(:,:,:) = p(:,:,:)

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#      include "HALO_EM_B.inc"
#endif

!----------------------------------------
#ifdef DM_PARALLEL
#      include "HALO_ADJ_SAVE8.inc"
#endif
alp(:,:,:) = al(:,:,:)
pp(:,:,:) = p(:,:,:)
ph_2p(:,:,:) = ph_2(:,:,:)
t_2p(:,:,:) = t_2(:,:,:)
mu_2p(:,:) = mu_2(:,:)

    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_EM_B.inc"
#    include "HALO_EM_C.inc"
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

    if (non_hydrostatic) then
      call a_calc_coef_w( a,a_a,alpha,a_alpha,gamma,a_gamma,mut,a_mut,cqw,a_cqw,rdn,rdnw,c2a,a_c2a,dts,g,epssm,ide,jde,kde,ims,ime,&
&jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )
    endif

!----------------------------------------
al(:,:,:) = alp(:,:,:)
p(:,:,:) = pp(:,:,:)
ph_2(:,:,:) = ph_2p(:,:,:)
t_2(:,:,:) = t_2p(:,:,:)
mu_2(:,:) = mu_2p(:,:)

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

    call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,0,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

!----------------------------------------
u_1(:,:,:) = u_1o(:,:,:)
u_2(:,:,:) = u_2o(:,:,:)
v_1(:,:,:) = v_1o(:,:,:)
v_2(:,:,:) = v_2o(:,:,:)
w_1(:,:,:) = w_1o(:,:,:)
w_2(:,:,:) = w_2o(:,:,:)
t_1(:,:,:) = t_1o(:,:,:)
t_2(:,:,:) = t_2o(:,:,:)
mu_1(:,:) = mu_1o(:,:)
mu_2(:,:) = mu_2o(:,:)
p(:,:,:) = po(:,:,:)

!halo HALO_ADJ_E dyn_em 8:u_1,a_u_1,u_2,a_u_2,v_1,a_v_1,v_2,a_v_2,w_1,a_w_1,w_2,a_w_2,t_1,a_t_1,t_2,a_t_2,a_ph_1,a_ph_2,mub,mu_1,a_mu_1,mu_2,a_mu_2,muu,a_muu,muus,a_muus,muv,a_muv,muvs,a_muvs,mut,a_mut,muts,a_muts,a_mudf,a_u_save,a_v_save,a_w_save,a_t_save,a_ph_save,a_mu_save,a_ww,a_ww1,a_c2a,pb,p,a_p,alt,a_alt,msfu,msfv,msft
#ifdef DM_PARALLEL
#  include "HALO_ADJ_E.inc"
#endif
#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

    call a_small_step_prep( u_1,a_u_1,u_2,a_u_2,v_1,a_v_1,v_2,a_v_2,w_1,a_w_1,w_2,a_w_2,t_1,a_t_1,t_2,a_t_2,a_ph_1,a_ph_2,mub,mu_1,&
&a_mu_1,mu_2,a_mu_2,muu,a_muu,muus,a_muus,muv,a_muv,muvs,a_muvs,mut,a_mut,muts,a_muts,a_mudf,a_u_save,a_v_save,a_w_save,&
&a_t_save,a_ph_save,a_mu_save,a_ww,a_ww1,a_c2a,pb,p,a_p,alt,a_alt,msfu,msfv,msft,rk_step,leapfrog,ide,jde,kde,ims,ime,jms,jme,&
&kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

!------------------------------
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
!---------- added by zzma for recomputing basic states -------------
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

  rk_step_is_onzs: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzs

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!------------------------------
!------------------------------

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

    if (config_flags%specified .or. config_flags%nested) then
#ifdef DM_PARALLEL
#  include "HALO_ADJ_SPEC_BDY_DRY.inc"
#endif
      call a_spec_bdy_dry( config_flags,a_ru_tend,a_rv_tend,a_ph_tend,a_t_tend,a_rw_tend,a_mu_tend,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,&
&a_w_bt,a_mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
    endif
#ifdef DM_PARALLEL
#  include "HALO_ADJ_ADDTEND_DRY.inc"
#endif
    call a_rk_addtend_dry( a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,&
&a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,rk_step,h_diabatic,a_mut,msft,msfu,msfv,ide,jde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
#ifdef DM_PARALLEL
#  include "HALO_ADJ_RELAXBDY_DRY.inc"
#endif
      call a_relax_bdy_dry( config_flags,a_u_save,a_v_save,a_ph_save,a_t_save,a_w_save,a_mu_tend,a_ru,a_rv,ph_2,a_ph_2,t_2,a_t_2,&
&w_2,a_w_2,a_mu_2,mut,a_mut,a_u_b,a_v_b,a_ph_b,a_t_b,a_w_b,a_mu_b,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,a_w_bt,a_mu_bt,spec_bdy_width,&
&spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
    endif

!------------------------------
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------

  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzr: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_A.inc"
#endif

      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_C.inc"
#     include "HALO_EM_TKE_D.inc"
#endif

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
  endif rk_step_is_onzr

#ifdef DM_PARALLEL
#     include "HALO_EM_PHYS_PBL.inc"
#     include "HALO_EM_PHYS_DIFFUSION.inc"
#     include "HALO_EM_TKE_E.inc"
#     include "HALO_EM_TKE_5.inc"
#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_RKTEND.inc"
#endif

    call a_rk_tendency1( config_flags,rk_step,a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,&
&a_t_tendf,a_mu_tend,a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,ru,a_ru,rv,a_rv,rw,a_rw,ww,a_ww,u_2,a_u_2,v_2,a_v_2,w_2,&
&a_w_2,t_2,a_t_2,ph_2,a_ph_2,u_1,a_u_1,v_1,a_v_1,w_1,a_w_1,t_1,a_t_1,ph_1,a_ph_1,phb,t_init,mu_2,a_mu_2,mut,a_mut,muu,a_muu,&
&muv,a_muv,mub,al,a_al,alt,a_alt,p,a_p,pb,php,a_php,cqu,a_cqu,cqv,a_cqv,cqw,a_cqw,u_base,v_base,z_base,msfu,msfv,msft,f,e,sina,&
&cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,kvdif,xkmhd,a_xkmhd,cf1,cf2,cf3,cfn,cfn1,non_hydrostatic,leapfrog,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_RKTEND.inc"
#endif

    call a_rk_tendency2( config_flags,rk_step,a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,&
&a_t_tendf,a_mu_tend,a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,ru,a_ru,rv,a_rv,rw,a_rw,ww,a_ww,u_2,a_u_2,v_2,a_v_2,w_2,&
&a_w_2,t_2,a_t_2,ph_2,a_ph_2,u_1,a_u_1,v_1,a_v_1,w_1,a_w_1,t_1,a_t_1,ph_1,a_ph_1,phb,t_init,mu_2,a_mu_2,mut,a_mut,muu,a_muu,&
&muv,a_muv,mub,al,a_al,alt,a_alt,p,a_p,pb,php,a_php,cqu,a_cqu,cqv,a_cqv,cqw,a_cqw,u_base,v_base,z_base,msfu,msfv,msft,f,e,sina,&
&cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,kvdif,xkmhd,a_xkmhd,cf1,cf2,cf3,cfn,cfn1,non_hydrostatic,leapfrog,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )

!------------------------------
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : dt_rk,dts_rk,number_of_small_timesteps

    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
#ifdef DM_PARALLEL
#    include "HALO_EM_A.inc"
#endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#endif

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

  a_rk_step_is_one: if (rk_step .eq. 1) then
! recompute : p8w,p_phy,t8w,t_phy,th_phy
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

!halo HALO_ADJ_F dyn_em 8:a_p,a_p8w,a_t,a_t8w,a_theta,a_xkmhd,bn2,defor11,defor12,defor13,defor22,defor23,defor33,div,moist,p,p8w,rdz,rdzw,t,t8w,theta,tke,xkhh,xkhv,xkmh,xkmhd,xkmv
#ifdef DM_PARALLEL
# include "HALO_ADJ_F.inc"
#endif

        call a_calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,a_xkmhd,xkmv,xkhh,xkhv,bn2,a_bn2h,khdif,div,&
&defor11,defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,a_p8w,t8w,a_t8w,th_phy,a_th_phy,t_phy,a_t_phy,&
&p_phy,a_p_phy,moist_2,a_moist_2,dn,dnw,dx,dy,rdz,rdzw,num_3d_m,cf1,cf2,cf3,kh_tke_upper_bound,ids,ide,jds,jde,kde,ims,ime,&
&jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

    endif

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

      call a_phy_prep( p,a_p,pb,ph_2,a_ph_2,phb,t_2,a_t_2,th_phy,a_th_phy,p_phy,a_p_phy,pi_phy,a_pi_phyh,a_p8w,t_phy,a_t_phy,a_t8w,&
&z,a_z,z_at_w,a_z_at_wh,fnm,fnp,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

      call a_init_zero_tendency( a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,a_moist_tend,num_3d_m,ims,ime,jms,jme,kms,&
&kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

  endif a_rk_step_is_one

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

  dnw(:) = dnwh(:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)

#ifdef DM_PARALLEL
# include "HALO_ADJ_G.inc"
#endif

    call a_rk_step_prep( config_flags,u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,a_ph_2,mu_2,a_mu_2,moist_2,a_moist_2,a_ru,a_rv,a_rw,a_ww,a_php,&
&a_alt,muu,a_muu,muv,a_muv,mub,mut,a_mut,a_al,a_cqu,a_cqv,a_cqw,msfu,msfv,msft,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

#ifdef DM_PARALLEL
#    include "HALO_ADJ_A1.inc"
#    include "HALO_ADJ_A.inc"
#   include "HALO_EM_AD_INIT_1.inc"
#   include "HALO_EM_AD_INIT_2.inc"
#   include "HALO_EM_AD_INIT_3.inc"
#   include "HALO_EM_AD_INIT_5.inc"
#endif

end do a_runge_kutta_loop

!----------------------------------------------
! FREE DYNAMIC MEMORY
!----------------------------------------------
#endif

end subroutine solve_em_ad


