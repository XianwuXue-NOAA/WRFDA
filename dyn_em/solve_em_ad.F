#define FAST_CPY
!#define BENCH
!                           DISCLAIMER
!
!   This file was generated by TAF version 1.7.18
!***********************************************************
!***********************************************************

!  revised by Qingnong Xiao and Zaizhong Ma in June 08,2005

!***********************************************************
!***********************************************************
!
!   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
!   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
!   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
!   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
!   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
!   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
!   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
!   OF THE POSSIBILITY OF SUCH DAMAGES.
!
!                           Haftungsbeschraenkung
!   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
!   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
!   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
!   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
!   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
!   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
!   Mitteilung darueber an FastOpt.
!
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!WRF:MEDIATION_LAYER:SOLVER

SUBROUTINE solve_em_ad ( grid , config_flags , &
!
#include "em_dummy_args.inc"
!
                 )

! Driver layer modules
   USE module_domain
   USE module_configure
   USE module_driver_constants
   USE module_machine
   USE module_tiles
   USE module_dm
! Mediation layer modules
! Model layer modules
   USE module_model_constants
   USE module_small_step_em
   USE module_em
   USE module_big_step_utilities_em
   USE module_bc
   USE module_bc_em
   USE module_solvedebug_em
   USE module_physics_addtendc
   USE module_diffusion_em
! Registry generated module
   USE module_state_description
   USE module_radiation_driver
   USE module_surface_driver
   USE module_cumulus_driver
   USE module_microphysics_driver
   USE module_pbl_driver
   USE module_mp_nconvp   !Xiaoyan Zhang
#ifdef WRF_CHEM
   USE module_input_chem_data
#endif

   USE a_module_small_step_em
   USE a_module_em
   USE a_module_big_step_utilities_em
   USE a_module_bc
   USE a_module_bc_em
   USE a_module_diffusion_em

   USE module_4dvaropt

   IMPLICIT NONE

   !  Input data.

   TYPE(domain) , TARGET          :: grid

   !  Definitions of dummy arguments to solve
#include <em_dummy_decl.inc>

   !  WRF state bcs
   TYPE (grid_config_rec_type) , INTENT(IN)          :: config_flags

   ! WRF state data

!#include "../phys/physics_drive.int"

   ! Local data

   INTEGER                         :: k_start , k_end, its, ite, jts, jte
   INTEGER                         :: ids , ide , jds , jde , kds , kde , &
                                      ims , ime , jms , jme , kms , kme , &
                                      ips , ipe , jps , jpe , kps , kpe
   INTEGER                         :: ij , iteration
   INTEGER                         :: im , num_3d_m , ic , num_3d_c
   INTEGER                         :: loop
   INTEGER                         :: ijds, ijde
   INTEGER                         :: itmpstep
   INTEGER                         :: sz
#ifndef NO_HALO_FIX
   INTEGER                         :: filecount
   INTEGER,PARAMETER               :: min_filecount=0
   INTEGER,PARAMETER               :: max_filecount=1026
#endif

! storage for tendencies and decoupled state (generated from Registry)
#include <em_i1_decl.inc>

#ifdef WRFVAR

   INTEGER :: rc 
   INTEGER :: number_of_small_timesteps, rk_step
   INTEGER :: klevel,ijm,ijp,i,j,k,size1,size2    ! for prints/plots only
   INTEGER :: idum1, idum2, dynamics_option

   INTEGER :: rk_order, iwmax, jwmax, kwmax
   REAL :: dt_rk, dts_rk, dtm, wmax
   LOGICAL :: leapfrog
   INTEGER :: l,kte,kk
integer myproc
   INTEGER :: n3d_elem, n2d_elem, nbd_elem

real a_z_at_wh(1+grid%em31-grid%sm31,1+grid%em32-grid%sm32,1+grid%em33-grid%sm33)
real ah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ali(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alphah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real dnwh(grid%sm32:grid%em32)
real dt_rkh
real dts_rkh
real gammah(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer iteration1
real moist_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_tendi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real mu_1h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_1i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2h(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2i(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2j(grid%sm31:grid%em31,grid%sm33:grid%em33)
integer number_of_small_timestepsh
real ph(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer rk_step1
real ru_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendfi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2h(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2i(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2j(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ww_mh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real wwh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhdi(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real a_pi_phyh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)                  :: a_bn2h

real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqc_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqr_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqi_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqs_bth
real, DIMENSION(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)           :: a_rqg_bth

!JM real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)        :: a_moist_tend

!----------------------------------------------------------------------------------------
!defined by Zaizhong Ma for saving the basic states
!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------
!*********************************************************************
real u_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_1o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2o(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_1o(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2o(grid%sm31:grid%em31,grid%sm33:grid%em33)
real po(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)


real alp(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pp(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2p(grid%sm31:grid%em31,grid%sm33:grid%em33)

real alq(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2q(grid%sm31:grid%em31,grid%sm33:grid%em33)
real pq(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2q(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real wwr(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2r(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2r(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real w_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real wws(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real mu_2s(grid%sm31:grid%em31,grid%sm33:grid%em33)
real ph_2s(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real as(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2saves(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)

real mudf_ma(grid%sm31:grid%em31,grid%sm33:grid%em33)
!*********************************************************************
!----------------------------------------------------------------------------------------
real ww_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhd_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_tendf_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pm1_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real moist_tend_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real dnw_keep3(grid%sm32:grid%em32)

!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------
real ww_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_m_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real a_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alpha_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real gamma_keep3(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
!----------------------------------------------------------------------------------------
!----------------------------------------------------------------------------------------

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_1_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_2_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: p_keep3
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: al_keep3
!----------------------------------------------------------------------------------------

real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: u_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: v_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: w_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: t_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: ph_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm33:grid%em33) :: mu_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist) :: moist_1_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist) :: moist_2_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: p_keep4
real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33) :: al_keep4
!----------------------------------------------------------------------------------------
integer :: iy
! TBH:  Buffer IDs for store/restore
INTEGER, PARAMETER :: BUF_RK_LOOR = 1
INTEGER, PARAMETER :: BUF_SMALL_STEP = 2
INTEGER, PARAMETER :: BUF_RKTEND_THRU_SS = 3
INTEGER, PARAMETER :: BUF_RKTEND = 4

real ru_mz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv_mz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ru_tendfz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real moist_tendz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
!----------------------------------------

!Xiaoyan Zhang add
   real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)           :: a_rainnc
   real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)           :: a_rainncv
   real, DIMENSION(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)           :: a_h_diabatic
!
!


#ifdef DEREF_KLUDGE
   INTEGER     :: sm31 , em31 , sm32 , em32 , sm33 , em33
   INTEGER     :: sm31x, em31x, sm32x, em32x, sm33x, em33x
   INTEGER     :: sm31y, em31y, sm32y, em32y, sm33y, em33y
#endif

#include <bench_solve_em_a_def.h>

#include "deref_kludge.h"

#define COPY_IN
#include <em_scalar_derefs.inc>
#ifdef DM_PARALLEL
#    define REGISTER_I1
#      include <em_data_calls.inc>
#endif

!<DESCRIPTION>
!<pre>
! solve_em is the main driver for advancing a grid a single timestep.
! It is a mediation-layer routine -> DM and SM calls are made where 
! needed for parallel processing.  
!
! solve_em can integrate the equations using 3 time-integration methods
!      
!    - 3rd order Runge-Kutta time integration (recommended)
!      
!    - 2nd order Runge-Kutta time integration
!      
!    - Leapfrog time integration
!      (note: the leapfrog scheme is not correctly implemented
!      for most of the physics)
!
! The main sections of solve_em are
!     
! (1) Runge-Kutta (RK) loop
!     
! (2) Non-timesplit physics (i.e., tendencies computed for updating
!     model state variables during the first RK sub-step (loop)
!     
! (3) Small (acoustic, sound) timestep loop - within the RK sub-steps
!     
! (4) Scalar advance for moist and chem scalar variables (and TKE)
!     within the RK sub-steps.
!     
! (5) time-split physics (after the RK step), currently this includes
!     only microphyics
!
! A more detailed description of these sections follows.
!</pre>
!</DESCRIPTION>

#include <bench_solve_em_a_init.h>

CALL wrf_debug ( 10 , 'DEBUG:  begin solve_em_ad()' )
CALL module_4dvaropt_start

! xyh
!    return
call get_ijk_from_grid( grid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe )

BENCH_START(exch1)
#ifdef DM_PARALLEL
lineno = __LINE__
#   include "HALO_0376.inc"








#endif

  n2d_elem = (ime-ims+1)*(jme-jms+1)
  n3d_elem = n2d_elem*(kme-kms+1)
  nbd_elem = max(grid%ed31,grid%ed33)*(grid%ed32-grid%sd32+1)*grid%spec_bdy_width*4

ij = 1

!----------------------------------------------
! SAVE REQUIRED INPUT VARIABLES
!----------------------------------------------
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_0394.inc"
#endif
BENCH_END(exch1)

BENCH_START(comp1)

#ifndef FAST_CPY
xkmhdi(:,:,:) = xkmhd(:,:,:)
ww_mh(:,:,:) = ww_m(:,:,:)
w_2j(:,:,:) = w_2(:,:,:)
w_1i(:,:,:) = w_1(:,:,:)
v_2i(:,:,:) = v_2(:,:,:)
v_1i(:,:,:) = v_1(:,:,:)
u_2i(:,:,:) = u_2(:,:,:)
u_1i(:,:,:) = u_1(:,:,:)
t_tendfi(:,:,:) = t_tendf(:,:,:)
t_2j(:,:,:) = t_2(:,:,:)
t_1i(:,:,:) = t_1(:,:,:)
rw_tendfi(:,:,:) = rw_tendf(:,:,:)
rv_tendfi(:,:,:) = rv_tendf(:,:,:)
rv_mh(:,:,:) = rv_m(:,:,:)
ru_tendfi(:,:,:) = ru_tendf(:,:,:)
ru_mh(:,:,:) = ru_m(:,:,:)
pm1i(:,:,:) = pm1(:,:,:)
ph_tendfi(:,:,:) = ph_tendf(:,:,:)
ph_2j(:,:,:) = ph_2(:,:,:)
ph_1i(:,:,:) = ph_1(:,:,:)
pj(:,:,:) = p(:,:,:)
mu_2j(:,:) = mu_2(:,:)
mu_1i(:,:) = mu_1(:,:)
moist_tendi(:,:,:,:) = moist_tend(:,:,:,:)
moist_2i(:,:,:,:) = moist_2(:,:,:,:)
moist_1i(:,:,:,:) = moist_1(:,:,:,:)
gammah(:,:,:) = gamma(:,:,:)
alphah(:,:,:) = alpha(:,:,:)
alj(:,:,:) = al(:,:,:)
ah(:,:,:) = a(:,:,:)
#else
 call fast_copy_lint( xkmhdi , xkmhd , n3d_elem )
 call fast_copy_lint( ww_mh , ww_m , n3d_elem )
 call fast_copy_lint( w_2j , w_2 , n3d_elem )
 call fast_copy_lint( w_1i , w_1 , n3d_elem )
 call fast_copy_lint( v_2i , v_2 , n3d_elem )
 call fast_copy_lint( v_1i , v_1 , n3d_elem )
 call fast_copy_lint( u_2i , u_2 , n3d_elem )
 call fast_copy_lint( u_1i , u_1 , n3d_elem )
 call fast_copy_lint( t_tendfi , t_tendf , n3d_elem )
 call fast_copy_lint( t_2j , t_2 , n3d_elem )
 call fast_copy_lint( t_1i , t_1 , n3d_elem )
 call fast_copy_lint( rw_tendfi , rw_tendf , n3d_elem )
 call fast_copy_lint( rv_tendfi , rv_tendf , n3d_elem )
 call fast_copy_lint( rv_mh , rv_m , n3d_elem )
 call fast_copy_lint( ru_tendfi , ru_tendf , n3d_elem )
 call fast_copy_lint( ru_mh , ru_m , n3d_elem )
 call fast_copy_lint( pm1i , pm1 , n3d_elem )
 call fast_copy_lint( ph_tendfi , ph_tendf , n3d_elem )
 call fast_copy_lint( ph_2j , ph_2 , n3d_elem )
 call fast_copy_lint( ph_1i , ph_1 , n3d_elem )
 call fast_copy_lint( pj , p , n3d_elem )
 call fast_copy_lint( mu_2j , mu_2 , n2d_elem )
 call fast_copy_lint( mu_1i , mu_1 , n2d_elem )
 call fast_copy_lint( moist_tendi(ims,kms,jms,2) , moist_tend(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
 call fast_copy_lint( moist_2i(ims,kms,jms,2) , moist_2(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
 call fast_copy_lint( moist_1i(ims,kms,jms,2) , moist_1(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
 call fast_copy_lint( gammah , gamma , n3d_elem )
 call fast_copy_lint( alphah , alpha , n3d_elem )
 call fast_copy_lint( alj , al , n3d_elem )
 call fast_copy_lint( ah , a , n3d_elem )
#endif

number_of_small_timestepsh = number_of_small_timesteps
dts_rkh = dts_rk
dt_rkh = dt_rk

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES
!----------------------------------------------
#ifndef FAST_CPY
a_a(:,:,:) = 0.
a_advect_tend(:,:,:) = 0.
a_alpha(:,:,:) = 0.
a_bn2h(:,:,:) = 0.
a_c2a(:,:,:) = 0.
a_cqu(:,:,:) = 0.
a_cqv(:,:,:) = 0.
a_cqw(:,:,:) = 0.
a_gamma(:,:,:) = 0.
a_moist_tend(:,:,:,:) = 0.
a_mu_save(:,:) = 0.
a_mu_tend(:,:) = 0.
a_muave(:,:) = 0.
a_mut(:,:) = 0.
a_muts(:,:) = 0.
a_muu(:,:) = 0.
a_muus(:,:) = 0.
a_muv(:,:) = 0.
a_muvs(:,:) = 0.
a_p8w(:,:,:) = 0.
a_p_phy(:,:,:) = 0.
a_ph_save(:,:,:) = 0.
a_ph_tend(:,:,:) = 0.
a_ph_tendf(:,:,:) = 0.
a_pi_phyh(:,:,:) = 0.
a_pm1(:,:,:) = 0.
a_rqc_bth(:,:,:,:) = 0.
a_rqg_bth(:,:,:,:) = 0.
a_rqi_bth(:,:,:,:) = 0.
a_rqr_bth(:,:,:,:) = 0.
a_rqs_bth(:,:,:,:) = 0.
a_ru_m(:,:,:) = 0.
a_ru_tend(:,:,:) = 0.
a_ru_tendf(:,:,:) = 0.
a_rv_m(:,:,:) = 0.
a_rv_tend(:,:,:) = 0.
a_rv_tendf(:,:,:) = 0.
a_rw_tend(:,:,:) = 0.
a_rw_tendf(:,:,:) = 0.
a_t8w(:,:,:) = 0.
a_t_2save(:,:,:) = 0.
a_t_phy(:,:,:) = 0.
a_t_save(:,:,:) = 0.
a_t_tend(:,:,:) = 0.
a_t_tendf(:,:,:) = 0.
a_th_phy(:,:,:) = 0.
a_u_save(:,:,:) = 0.
a_v_save(:,:,:) = 0.
a_w_save(:,:,:) = 0.
a_ww1(:,:,:) = 0.
a_ww_m(:,:,:) = 0.
a_z_at_wh(:,:,:) = 0.
#else
 call fast_zero_lint( a_a , n3d_elem )
 call fast_zero_lint( a_advect_tend , n3d_elem )
 call fast_zero_lint( a_alpha , n3d_elem )
 call fast_zero_lint( a_bn2h , n3d_elem )
 call fast_zero_lint( a_c2a , n3d_elem )
 call fast_zero_lint( a_cqu , n3d_elem )
 call fast_zero_lint( a_cqv , n3d_elem )
 call fast_zero_lint( a_cqw , n3d_elem )
 call fast_zero_lint( a_gamma , n3d_elem )
 call fast_zero_lint( a_moist_tend(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ))
 call fast_zero_lint( a_mu_save , n2d_elem )
 call fast_zero_lint( a_mu_tend , n2d_elem )
 call fast_zero_lint( a_muave , n2d_elem )
 call fast_zero_lint( a_mut , n2d_elem )
 call fast_zero_lint( a_muts , n2d_elem )
 call fast_zero_lint( a_muu , n2d_elem )
 call fast_zero_lint( a_muus , n2d_elem )
 call fast_zero_lint( a_muv , n2d_elem )
 call fast_zero_lint( a_muvs , n2d_elem )
 call fast_zero_lint( a_p8w , n3d_elem )
 call fast_zero_lint( a_p_phy , n3d_elem )
 call fast_zero_lint( a_ph_save , n3d_elem )
 call fast_zero_lint( a_ph_tend , n3d_elem )
 call fast_zero_lint( a_ph_tendf , n3d_elem )
 call fast_zero_lint( a_pi_phyh , n3d_elem )
 call fast_zero_lint( a_pm1 , n3d_elem )
 call fast_zero_lint( a_rqc_bth , nbd_elem )
 call fast_zero_lint( a_rqg_bth , nbd_elem )
 call fast_zero_lint( a_rqi_bth , nbd_elem )
 call fast_zero_lint( a_rqr_bth , nbd_elem )
 call fast_zero_lint( a_rqs_bth , nbd_elem )
 call fast_zero_lint( a_ru_m , n3d_elem )
 call fast_zero_lint( a_ru_tend , n3d_elem )
 call fast_zero_lint( a_ru_tendf , n3d_elem )
 call fast_zero_lint( a_rv_m , n3d_elem )
 call fast_zero_lint( a_rv_tend , n3d_elem )
 call fast_zero_lint( a_rv_tendf , n3d_elem )
 call fast_zero_lint( a_rw_tend , n3d_elem )
 call fast_zero_lint( a_rw_tendf , n3d_elem )
 call fast_zero_lint( a_t8w , n3d_elem )
 call fast_zero_lint( a_t_2save , n3d_elem )
 call fast_zero_lint( a_t_phy , n3d_elem )
 call fast_zero_lint( a_t_save , n3d_elem )
 call fast_zero_lint( a_t_tend , n3d_elem )
 call fast_zero_lint( a_t_tendf , n3d_elem )
 call fast_zero_lint( a_th_phy , n3d_elem )
 call fast_zero_lint( a_u_save , n3d_elem )
 call fast_zero_lint( a_v_save , n3d_elem )
 call fast_zero_lint( a_w_save , n3d_elem )
 call fast_zero_lint( a_ww1 , n3d_elem )
 call fast_zero_lint( a_ww_m , n3d_elem )
 call fast_zero_lint( a_z_at_wh , n3d_elem )
#endif

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = 0
#include <a_debug_halo.h>
#endif

!----------------------------------------------
! ROUTINE BODY
!----------------------------------------------
cfn = grid%cfn
! recompute : cfn
cfn1 = grid%cfn1
! recompute : cfn1
epsts = grid%epsts
! recompute : epsts
step_number = grid%step_number
! recompute : step_number
rdx = grid%rdx
! recompute : rdx
rdy = grid%rdy
! recompute : rdy
cf1 = grid%cf1
! recompute : cf1
cf2 = grid%cf2
! recompute : cf2
cf3 = grid%cf3
! recompute : cf3
dtbc = grid%dtbc
! recompute : dtbc
dx = grid%dx
! recompute : dx
dy = grid%dy
! recompute : dy
dt = grid%dt
! recompute : dt
rk_ord = grid%rk_ord
! recompute : rk_ord
diff_opt = grid%diff_opt
! recompute : diff_opt
damp_opt = grid%damp_opt
! recompute : damp_opt
zdamp = grid%zdamp
! recompute : zdamp
dampcoef = grid%dampcoef
! recompute : dampcoef
khdif = grid%khdif
! recompute : khdif
kvdif = grid%kvdif
! recompute : kvdif
smdiv = grid%smdiv
! recompute : smdiv
emdiv = grid%emdiv
! recompute : emdiv
epssm = grid%epssm
! recompute : epssm
non_hydrostatic = grid%non_hydrostatic
! recompute : non_hydrostatic
time_step_sound = grid%time_step_sound
! recompute : time_step_sound
kh_tke_upper_bound = grid%kh_tke_upper_bound
! recompute : kh_tke_upper_bound
spec_bdy_width = grid%spec_bdy_width
! recompute : spec_bdy_width
spec_zone = grid%spec_zone
! recompute : spec_zone
relax_zone = grid%relax_zone
! recompute : relax_zone
call get_ijk_from_grid( grid,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe )
!  recompute : ide,ids,ime,ims,ipe,ips,jde,jds,jme,jms,jpe,jps,kde,kds,k
! me,kms,kpe,kps
k_start = kps
! recompute : k_start
k_end = kpe
! recompute : k_end
ijds = min(ids,jds)
! recompute : ijds
ijde = max(ide,jde)
! recompute : ijde
num_3d_m = num_moist
! recompute : num_3d_m
call set_tiles( grid,ids,ide,jds,jde,ips,ipe,jps,jpe )
if ( grid%num_tiles > 1 ) call wrf_error_fatal( "Adjoint code is not thread safe" )
! recompute : grid
rk_order = config_flags%rk_ord
! recompute : rk_order
leapfrog =  .false. 
! recompute : leapfrog
dts = dt/float(time_step_sound)
! recompute : dts
if (rk_ord .eq. 1) then
  leapfrog =  .true. 
endif
! recompute : leapfrog
BENCH_END(comp1)

!------------------------------
runge_kutta_looq: do rk_step = 1, rk_order
BENCH_START(comp2)
  dtm=dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm=2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm=dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
BENCH_END(comp2)

BENCH_START(exch2)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_0616.inc"





#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_0626.inc"
#endif
BENCH_END(exch2)

BENCH_START(comp3)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp3)

BENCH_START(exch3)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_0637.inc"
#endif
BENCH_END(exch3)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 3
#include <a_debug_halo.h>
#endif

  rk_step_is_ong: if (rk_step .eq. 1) then
BENCH_START(comp4)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp4)

BENCH_START(exch4)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_0648.inc"
#endif
BENCH_END(exch4)

BENCH_START(comp5)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp5)

BENCH_START(exch5)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_0660.inc"



#endif
BENCH_END(exch5)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 5
#include <a_debug_halo.h>
#endif

BENCH_START(comp6)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp6)

  endif rk_step_is_ong

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 6
#include <a_debug_halo.h>
#endif

BENCH_START(exch6)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_0679.inc"



#endif
BENCH_END(exch6)

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepu, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7771)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7771)

! TBH:  Trade redundant computation for memory.  
! TBH:  Save fields re-computed later by calls to rk_tendency.  
! TBH:  NOTE:  This optimization can co-exist with remove_rktend_thru_ss 
! TBH:  NOTE:  because its main benefit occurs prior to the small-step loop.  
 store_rktend: if ( config_flags%remove_rktend ) then
BENCH_START(compstore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  store_rktend:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "store_rktend.h"
BENCH_END(compstore_rktend_tim)
 endif store_rktend

BENCH_START(comp7)
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp7)

BENCH_START(exch7)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_0718.inc"
#endif
BENCH_END(exch7)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 7
#include <a_debug_halo.h>
#endif

  small_stepu: do iteration = 1, number_of_small_timesteps
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepu, iteration = ',iteration
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp8)
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp8)

BENCH_START(exch8)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_0736.inc"
#endif
BENCH_END(exch8)

BENCH_START(comp9)
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp9)

BENCH_START(exch9)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_0747.inc"




#endif
BENCH_END(exch9)

BENCH_START(comp10)
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp10)

BENCH_START(exch10)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_0790.inc"
#endif
BENCH_END(exch10)

  end do small_stepu

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 10
#include <a_debug_halo.h>
#endif

! TBH:  Trade redundant computation for memory.  
! TBH:  Save fields re-computed later by small_step loops.  
 store_small_step: if ( config_flags%remove_small_step .and. &
                ( .not. config_flags%remove_rktend_thru_ss ) ) then
BENCH_START(compstore_small_step_tim)
   WRITE(wrf_err_message,*)'DEBUG:  store_small_step:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_SMALL_STEP)
#include "store_small_step.h"
BENCH_END(compstore_small_step_tim)
 endif store_small_step

! TBH:  Trade redundant computation for memory.  
! TBH:  Save fields computed between the call to rk_tendency and 
! TBH:  the end of small_stepu loop.  
 store_rktend_thru_ss: if ( config_flags%remove_rktend_thru_ss ) then
BENCH_START(compstore_rktend_thru_ss_tim)
   WRITE(wrf_err_message,*)'DEBUG:  store_rktend_thru_ss:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND_THRU_SS)
#include "store_rktend_thru_ss.h"
BENCH_END(compstore_rktend_thru_ss_tim)
 endif store_rktend_thru_ss

BENCH_START(comp11)
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )

!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
BENCH_END(comp11)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 11
#include <a_debug_halo.h>
#endif

BENCH_START(exch11)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_0821.inc"
#endif
BENCH_END(exch11)

BENCH_START(comp12)
  moist_scalar_advancg: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loor: do im = param_first_scalar, num_3d_m
        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    end do moist_variable_loor
  endif moist_scalar_advancg

    call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if ( .not. non_hydrostatic) then
      call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp12)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = (rk_step*100) + 12
#include <a_debug_halo.h>
#endif

BENCH_START(exch12)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_0871.inc"




#endif
BENCH_END(exch12)

! TBH:  Trade redundant computation for memory.  
! TBH:  Save fields re-computed later by runge_kutta_loor...  
 store_runge_kutta_loor: if (config_flags%remove_runge_kutta_loor) then
BENCH_START(compstore_runge_kutta_loor_tim)
   if ( rk_step < rk_order ) then
     WRITE(wrf_err_message,*)'DEBUG:  store_runge_kutta_loor:  rk_step, rk_order = ',rk_step,rk_order
     CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
     ! store fields
     CALL select_frame(rk_step, BUF_RK_LOOR)
#include "store_runge_kutta_loor.h"
   endif
BENCH_END(compstore_runge_kutta_loor_tim)
 endif store_runge_kutta_loor

end do runge_kutta_looq


if (config_flags%mp_physics == 0) then
  if (config_flags%specified .or. config_flags%nested) then
    sz = spec_zone
  else
    sz = 0
  endif

    if ( .not. non_hydrostatic) then

BENCH_START(exch13)
#ifdef DM_PARALLEL
lineno = __LINE__


#endif
BENCH_END(exch13)

BENCH_START(comp13)
      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,&
                     a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
                     ims,ime,jms,jme,kms,kme,&
                     max(grid%i_start(ij),ids+sz),  &
                     min(grid%i_end(ij),ide-1-sz),    &
                     max(grid%j_start(ij),jds+sz),  &
                     min(grid%j_end(ij),jde-1-sz),k_end )
BENCH_END(comp13)

    endif

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = 13
#include <a_debug_halo.h>
#endif

BENCH_START(comp14)
    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,&
                      a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
                      rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
                      max(grid%i_start(ij),ids+sz),  &
                      min(grid%i_end(ij),ide-1-sz),    &
                      max(grid%j_start(ij),jds+sz),  &
                      min(grid%j_end(ij),jde-1-sz),k_start,k_end )
BENCH_END(comp14)

BENCH_START(comp_a_moist_physics_finish_tim)
    call a_moist_physics_finish_em( a_t_2, a_t_1, t0, &
                    a_h_diabatic, dtm, ide, jde, kde, &
                    ims, ime, jms, jme, kms, kme, &
                    max(grid%i_start(ij),ids+sz),  &
                    min(grid%i_end(ij),ide-1-sz),    &
                    max(grid%j_start(ij),jds+sz),  &
                    min(grid%j_end(ij),jde-1-sz),k_start,k_end )
BENCH_END(comp_a_moist_physics_finish_tim)


BENCH_START(comp_moist_physics_prep_tim)
       CALL moist_physics_prep_em( t_2, t_1, t0, rho,                &
                                   al, alb, p, p8w, p0, pb,          &
                                   ph_2, phb, pi_phy, p_phy,         &
                                   z, z_at_w, dz8w,                  &
                                   dtm, h_diabatic,                  &
                                   config_flags,fnm, fnp,            &
                                   ids, ide, jds, jde, kds, kde,     &
                                   ims, ime, jms, jme, kms, kme,     &
                                   max(grid%i_start(ij),ids+sz),  &
                                   min(grid%i_end(ij),ide-1-sz),    &
                                   max(grid%j_start(ij),jds+sz),  &
                                   min(grid%j_end(ij),jde-1-sz),k_start,k_end )
BENCH_END(comp_moist_physics_prep_tim)

BENCH_START(comp_a_lscond_tim)
       CALL a_lscond ( t_2,a_t_2,p_phy,a_p_phy,moist_2(ims,kms,jms,P_QV), &
                       a_moist_2(ims,kms,jms,P_QV),rho,a_rho,&
                       pi_phy,a_pi_phy,r_v,xlv,cp,ep_2,svp1,svp2,svp3,svpt0,dz8w,a_dz8w, &
                       rainnc,a_rainnc,rainncv,a_rainncv,ims,ime,jms,jme,kms,kme, &
                       max(grid%i_start(ij),ids+sz),  &
                       min(grid%i_end(ij),ide-1-sz),    &
                       max(grid%j_start(ij),jds+sz),  &
                       min(grid%j_end(ij),jde-1-sz),min(k_end,kde-1) )
BENCH_END(comp_a_lscond_tim)

BENCH_START(comp_a_moist_physics_prep_tim)
       call a_moist_physics_prep_em( t_2, a_t_2, t_1, a_t_1, t0, rho, a_rho, &
                                     al, a_al, alb, p, a_p, p8w, a_p8w, p0, &
                                     pb, ph_2, a_ph_2, phb, pi_phy, a_pi_phy, &
                                     p_phy, a_p_phy, z, a_z, z_at_w, a_z_at_w, &
                                     dz8w, a_dz8w, h_diabatic, a_h_diabatic, fnm, fnp, &
                                     ide, jde, kde, ims, ime, jms, jme, kms, kme, &
                                     max(grid%i_start(ij),ids+sz),  &
                                     min(grid%i_end(ij),ide-1-sz),    &
                                     max(grid%j_start(ij),jds+sz),  &
                                     min(grid%j_end(ij),jde-1-sz),k_start,k_end )
BENCH_END(comp_a_moist_physics_prep_tim)

endif

!------------------------------
!------------------------------

a_runge_kutta_loop: do rk_step = rk_order, 1, -1

BENCH_START(comp15)

! TBH:  Eliminate this copy when rk_step > 1 and 
! TBH:  config_flags%remove_runge_kutta_loor == .TRUE.
if ( .not. ( config_flags%remove_runge_kutta_loor .and. &
           ( rk_step > 1 ) ) ) then
#ifndef FAST_CPY
  a(:,:,:) = ah(:,:,:)
  al(:,:,:) = alj(:,:,:)
  alpha(:,:,:) = alphah(:,:,:)
  gamma(:,:,:) = gammah(:,:,:)
  moist_1(:,:,:,:) = moist_1i(:,:,:,:)
  moist_2(:,:,:,:) = moist_2i(:,:,:,:)
  moist_tend(:,:,:,:) = moist_tendi(:,:,:,:)
  mu_1(:,:) = mu_1i(:,:)
  mu_2(:,:) = mu_2j(:,:)
  p(:,:,:) = pj(:,:,:)
  ph_1(:,:,:) = ph_1i(:,:,:)
  ph_2(:,:,:) = ph_2j(:,:,:)
  ph_tendf(:,:,:) = ph_tendfi(:,:,:)
  pm1(:,:,:) = pm1i(:,:,:)
  ru_m(:,:,:) = ru_mh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfi(:,:,:)
  rv_m(:,:,:) = rv_mh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfi(:,:,:)
  rw_tendf(:,:,:) = rw_tendfi(:,:,:)
  t_1(:,:,:) = t_1i(:,:,:)
  t_2(:,:,:) = t_2j(:,:,:)
  t_tendf(:,:,:) = t_tendfi(:,:,:)
  u_1(:,:,:) = u_1i(:,:,:)
  u_2(:,:,:) = u_2i(:,:,:)
  v_1(:,:,:) = v_1i(:,:,:)
  v_2(:,:,:) = v_2i(:,:,:)
  w_1(:,:,:) = w_1i(:,:,:)
  w_2(:,:,:) = w_2j(:,:,:)
  ww_m(:,:,:) = ww_mh(:,:,:)
  xkmhd(:,:,:) = xkmhdi(:,:,:)
#else
 call fast_copy_lint(  a , ah , n3d_elem )
 call fast_copy_lint(  al , alj , n3d_elem )
 call fast_copy_lint(  alpha , alphah , n3d_elem )
 call fast_copy_lint(  gamma , gammah , n3d_elem )
 call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1i(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
 call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2i(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
 call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendi(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
 call fast_copy_lint(  mu_1 , mu_1i , n2d_elem )
 call fast_copy_lint(  mu_2 , mu_2j , n2d_elem )
 call fast_copy_lint(  p , pj , n3d_elem )
 call fast_copy_lint(  ph_1 , ph_1i , n3d_elem )
 call fast_copy_lint(  ph_2 , ph_2j , n3d_elem )
 call fast_copy_lint(  ph_tendf , ph_tendfi , n3d_elem )
 call fast_copy_lint(  pm1 , pm1i , n3d_elem )
 call fast_copy_lint(  ru_m , ru_mh , n3d_elem )
 call fast_copy_lint(  ru_tendf , ru_tendfi , n3d_elem )
 call fast_copy_lint(  rv_m , rv_mh , n3d_elem )
 call fast_copy_lint(  rv_tendf , rv_tendfi , n3d_elem )
 call fast_copy_lint(  rw_tendf , rw_tendfi , n3d_elem )
 call fast_copy_lint(  t_1 , t_1i , n3d_elem )
 call fast_copy_lint(  t_2 , t_2j , n3d_elem )
 call fast_copy_lint(  t_tendf , t_tendfi , n3d_elem )
 call fast_copy_lint(  u_1 , u_1i , n3d_elem )
 call fast_copy_lint(  u_2 , u_2i , n3d_elem )
 call fast_copy_lint(  v_1 , v_1i , n3d_elem )
 call fast_copy_lint(  v_2 , v_2i , n3d_elem )
 call fast_copy_lint(  w_1 , w_1i , n3d_elem )
 call fast_copy_lint(  w_2 , w_2j , n3d_elem )
 call fast_copy_lint(  ww_m , ww_mh , n3d_elem )
 call fast_copy_lint(  xkmhd , xkmhdi , n3d_elem )
#endif
endif

BENCH_END(comp15)

! TBH:  Trade redundant computation for memory.  
 restore_runge_kutta_loor: if (.not. config_flags%remove_runge_kutta_loor) then

  CALL wrf_debug ( 10 , 'DEBUG:  begin runge_kutta_loor' )
  runge_kutta_loor: do rk_step1 = 1, rk_step-1
    dtm = dt
    if (rk_order .eq. 1) then
      if (step_number .ne. 1) then
        number_of_small_timesteps = 2*time_step_sound
        dt_rk = dt
        dtm = 2*dt
      else
        number_of_small_timesteps = time_step_sound
        dt_rk = dt/2.
        dtm = dt
      endif
      dts_rk = dts
    else if (rk_order .eq. 2) then
      if (rk_step1 .eq. 1) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    else if (rk_order .eq. 3) then
      if (rk_step1 .eq. 1) then
        dt_rk = dt/3.
        dts_rk = dt_rk
        number_of_small_timesteps = 1
      else if (rk_step1 .eq. 2) then
        dt_rk = 0.5*dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound/2
      else
        dt_rk = dt
        dts_rk = dts
        number_of_small_timesteps = time_step_sound
      endif
    endif

BENCH_START(exch14)
#ifdef DM_PARALLEL
lineno = __LINE__
! not sure this is needed here. add it for now; can remove later
#    include "HALO_1015.inc"
#endif
BENCH_END(exch14)

BENCH_START(comp16)
      call rk_step_prep( config_flags,rk_step1,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,&
&alb,cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij)&
&,grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp16)
BENCH_START(exch15)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1026.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1031.inc"
#endif
BENCH_END(exch15)

    rk_step_is_onze: if (rk_step1 .eq. 1) then
BENCH_START(comp17)
        call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,&
&rk_step1,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )
BENCH_END(comp17)

BENCH_START(exch16)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1043.inc"
#endif
BENCH_END(exch16)

BENCH_START(comp18)
        call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,&
&v_phy,p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,&
&rqccuten,rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp18)
      if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

BENCH_START(exch17)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch17)

BENCH_START(comp19)
          call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp19)
      endif
    endif rk_step_is_onze

BENCH_START(exch18)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1073.inc"



#endif
BENCH_END(exch18)

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepzt, rk_step1 = ',rk_step1
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7772)
      call rk_tendency( config_flags,rk_step1,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,&
&h_diabatic,phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,&
&e,sina,cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,&
&jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7772)
BENCH_START(comp20)

      if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
        call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step1,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif


      call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step1,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp20)

BENCH_START(exch19)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_1114.inc"

#endif
BENCH_END(exch19)

    small_stepzt: do iteration = 1, number_of_small_timesteps
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepzt, iteration = ',iteration
CALL wrf_debug( 10, TRIM(wrf_err_message) )

BENCH_START(comp21)
        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
BENCH_END(comp21)


BENCH_START(exch20)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1135.inc"
#endif
BENCH_END(exch20)

BENCH_START(comp22)
        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp22)

BENCH_START(exch21)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_1146.inc"




#endif
BENCH_END(exch21)

BENCH_START(comp23)
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif
        call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then
              call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif
        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp23)


BENCH_START(exch22)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_1189.inc"

#endif
BENCH_END(exch22)

    end do small_stepzt
BENCH_START(comp24)
      call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!      call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij)&
!&,grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original

      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
BENCH_END(comp24)
BENCH_START(exch23)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_1219.inc"
#endif
BENCH_END(exch23)

BENCH_START(comp25)
    moist_scalar_advancj: if (num_3d_m .ge. param_first_scalar) then
      moist_variable_loou: do im = param_first_scalar, num_3d_m

          call rk_scalar_tend( im,im,config_flags,rk_step1,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,&
&kvdif,xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),&
&grid%j_end(ij),k_start,k_end )
          if ((config_flags%specified .or. config_flags%nested) .and. rk_step1 .eq. 1) then
            if (im .eq. p_qv) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
          if (config_flags%nested .and. rk_step1 .eq. 1) then
            if (im .eq. p_qc) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qr) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qi) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qs) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            else if (im .eq. p_qg) then
              call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif

          call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step1,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      end do moist_variable_loou
    endif moist_scalar_advancj
BENCH_END(comp25)

BENCH_START(exch24)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch24)

BENCH_START(comp26)
      call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if ( .not. non_hydrostatic) then
        call diagnose_w( ph_tend,ph_2,ph_1,w_2,muts,dt_rk,u_2,v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp26)

BENCH_START(exch25)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1278.inc"



#endif
BENCH_END(exch25)

  CALL wrf_debug ( 10 , 'DEBUG:  end runge_kutta_loor' )
  end do runge_kutta_loor

 else ! restore_runge_kutta_loor
BENCH_START(comprestore_runge_kutta_loor_tim)
   if (rk_step > 1) then
     WRITE(wrf_err_message,*)'DEBUG:  restore_runge_kutta_loor:  rk_step, rk_order = ',rk_step,rk_order
     CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
     ! restore saved fields
     CALL select_frame(rk_step-1, BUF_RK_LOOR)
#include "restore_runge_kutta_loor.h"
     WRITE(wrf_err_message,*)'DEBUG:  restore_runge_kutta_loor:  done for rk_step-1 = ',(rk_step-1)
     CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   endif
BENCH_END(comprestore_runge_kutta_loor_tim)
 endif restore_runge_kutta_loor

BENCH_START(exch26)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1290.inc"
#endif
BENCH_END(exch26)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 26
#include <a_debug_halo.h>
#endif

BENCH_START(comp27)

#ifndef FAST_CPY
!------------------------------
  ww_m_keep3(:,:,:) = ww_m(:,:,:)
  rv_m_keep3(:,:,:) = rv_m(:,:,:)
  ru_m_keep3(:,:,:) = ru_m(:,:,:)
  a_keep3(:,:,:) = a(:,:,:)
  alpha_keep3(:,:,:) = alpha(:,:,:)
  gamma_keep3(:,:,:) = gamma(:,:,:)
!------------------------------

  xkmhdh(:,:,:) = xkmhd(:,:,:)
  w_2h(:,:,:) = w_2(:,:,:)
  w_1h(:,:,:) = w_1(:,:,:)
  v_2h(:,:,:) = v_2(:,:,:)
  v_1h(:,:,:) = v_1(:,:,:)
  u_2h(:,:,:) = u_2(:,:,:)
  u_1h(:,:,:) = u_1(:,:,:)
  t_tendfh(:,:,:) = t_tendf(:,:,:)
  t_2h(:,:,:) = t_2(:,:,:)
  t_1h(:,:,:) = t_1(:,:,:)
  rw_tendfh(:,:,:) = rw_tendf(:,:,:)
  rv_tendfh(:,:,:) = rv_tendf(:,:,:)
  ru_tendfh(:,:,:) = ru_tendf(:,:,:)
  pm1h(:,:,:) = pm1(:,:,:)
  ph_tendfh(:,:,:) = ph_tendf(:,:,:)
  ph_2h(:,:,:) = ph_2(:,:,:)
  ph_1h(:,:,:) = ph_1(:,:,:)
  ph(:,:,:) = p(:,:,:)
  mu_2h(:,:) = mu_2(:,:)
  mu_1h(:,:) = mu_1(:,:)
  moist_tendh(:,:,:,:) = moist_tend(:,:,:,:)
  moist_2h(:,:,:,:) = moist_2(:,:,:,:)
  moist_1h(:,:,:,:) = moist_1(:,:,:,:)
  dnwh(:) = dnw(:)
  alh(:,:,:) = al(:,:,:)
!----------------------------------------
  mudf_ma(:,:) = mudf(:,:)
!----------------------------------------
#else
!------------------------------
  call fast_copy_lint(  ww_m_keep3 , ww_m , n3d_elem )
  call fast_copy_lint(  rv_m_keep3 , rv_m , n3d_elem )
  call fast_copy_lint(  ru_m_keep3 , ru_m , n3d_elem )
  call fast_copy_lint(  a_keep3 , a , n3d_elem )
  call fast_copy_lint(  alpha_keep3 , alpha , n3d_elem )
  call fast_copy_lint(  gamma_keep3 , gamma , n3d_elem )
!------------------------------

  call fast_copy_lint(  xkmhdh , xkmhd , n3d_elem )
  call fast_copy_lint(  w_2h , w_2 , n3d_elem )
  call fast_copy_lint(  w_1h , w_1 , n3d_elem )
  call fast_copy_lint(  v_2h , v_2 , n3d_elem )
  call fast_copy_lint(  v_1h , v_1 , n3d_elem )
  call fast_copy_lint(  u_2h , u_2 , n3d_elem )
  call fast_copy_lint(  u_1h , u_1 , n3d_elem )
  call fast_copy_lint(  t_tendfh , t_tendf , n3d_elem )
  call fast_copy_lint(  t_2h , t_2 , n3d_elem )
  call fast_copy_lint(  t_1h , t_1 , n3d_elem )
  call fast_copy_lint(  rw_tendfh , rw_tendf , n3d_elem )
  call fast_copy_lint(  rv_tendfh , rv_tendf , n3d_elem )
  call fast_copy_lint(  ru_tendfh , ru_tendf , n3d_elem )
  call fast_copy_lint(  pm1h , pm1 , n3d_elem )
  call fast_copy_lint(  ph_tendfh , ph_tendf , n3d_elem )
  call fast_copy_lint(  ph_2h , ph_2 , n3d_elem )
  call fast_copy_lint(  ph_1h , ph_1 , n3d_elem )
  call fast_copy_lint(  ph , p , n3d_elem )
  call fast_copy_lint(  mu_2h , mu_2 , n2d_elem )
  call fast_copy_lint(  mu_1h , mu_1 , n2d_elem )
  call fast_copy_lint(  moist_tendh(ims,kms,jms,2) , moist_tend(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
  call fast_copy_lint(  moist_2h(ims,kms,jms,2) , moist_2(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
  call fast_copy_lint(  moist_1h(ims,kms,jms,2) , moist_1(ims,kms,jms,2) , n3d_elem * ( num_moist - 1 ) )
  call fast_copy_lint(  dnwh , dnw , kme-kms+1 )
  call fast_copy_lint(  alh , al , n3d_elem )
!----------------------------------------
  call fast_copy_lint(  mudf_ma , mudf , n2d_elem )
!----------------------------------------
#endif

  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
BENCH_END(comp27)
! recompute : dt_rk,dts_rk,number_of_small_timesteps

BENCH_START(exch23)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1373.inc"
#endif
BENCH_END(exch23)

BENCH_START(comp28)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp28)

BENCH_START(exch24)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1384.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1389.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1394.inc"
#endif
BENCH_END(exch24)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzc: if (rk_step .eq. 1) then

BENCH_START(comp29)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp29)

BENCH_START(exch25)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1407.inc"
#endif
BENCH_END(exch25)

BENCH_START(comp30)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp30)

BENCH_START(exch26)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1419.inc"



#endif
BENCH_END(exch26)

BENCH_START(comp31)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
BENCH_END(comp31)
  endif rk_step_is_onzc
!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

BENCH_START(exch27)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1441.inc"



#endif
BENCH_END(exch27)
WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepzq, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier between the call to rk_tendency and 
! TBH:  the end of small_stepu loop.  
 restore_rktend_thru_sszq: if ( config_flags%remove_rktend_thru_ss ) then
BENCH_START(comprestore_rktend_thru_ss_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktend_thru_sszq:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND_THRU_SS)
#include "restore_rktend_thru_ss.h"
BENCH_END(comprestore_rktend_thru_ss_tim)
 else  ! restore_rktend_thru_sszq

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendzq: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendzq:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendzq

BENCH_START(comp7773)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7773)

 endif restore_rktendzq

!  end do
BENCH_START(comp32)

!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save
!  do ij = 1, grid%num_tiles
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp32)

BENCH_START(exch28)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_1487.inc"

#endif
BENCH_END(exch28)

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by small_stepu loop.  
 restore_small_stepzq: if (config_flags%remove_small_step) then
BENCH_START(comprestore_small_step_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_small_stepzq:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_SMALL_STEP)
#include "restore_small_step.h"
BENCH_END(comprestore_small_step_tim)
 else  ! restore_small_stepzq

  small_stepzq: do iteration = 1, number_of_small_timesteps
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepzq, iteration = ',iteration
CALL wrf_debug( 10, TRIM(wrf_err_message) )

BENCH_START(comp33)
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp33)

BENCH_START(exch29)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1507.inc"
#endif
BENCH_END(exch29)

BENCH_START(comp34)
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp34)

BENCH_START(exch30)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_1518.inc"




#endif
BENCH_END(exch30)

BENCH_START(comp35)
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp35)

BENCH_START(exch31)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_1560.inc"

#endif
BENCH_END(exch31)

  end do small_stepzq

 endif restore_small_stepzq

 endif restore_rktend_thru_sszq

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 35
#include <a_debug_halo.h>
#endif

! recompute : mu_2,mudf,muts,ph_2,pm1,ru_m,rv_m,t_2,u_2,v_2,w_2,ww_m

BENCH_START(comp36)
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
BENCH_END(comp36)

BENCH_START(exch32)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_1592.inc"
#endif
BENCH_END(exch32)

! recompute : mu_2,ph_2,t_2

BENCH_START(comp37)
  moist_scalar_advanch: if (num_3d_m .ge. param_first_scalar) then
    moist_variable_loos: do im = param_first_scalar, num_3d_m

        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

        call rk_update_scalar( im,im,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),moist_tend(ims,kms,jms,im),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    end do moist_variable_loos
  endif moist_scalar_advanch
BENCH_END(comp37)

! recompute : moist_2

BENCH_START(comp37_calc_p_rho_phi)
    call calc_p_rho_phi( moist_2,num_3d_m,al,alb,mu_2,muts,ph_2,p,pb,t_2,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp37_calc_p_rho_phi)

BENCH_START(comp37_a_diagnose_w)
    if ( .not. non_hydrostatic) then
      call a_diagnose_w( ph_tend,a_ph_tend,a_ph_2,a_ph_1,a_w_2,muts,a_muts,dt_rk,a_u_2,a_v_2,ht,cf1,cf2,cf3,rdx,rdy,msft,ide,jde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_end )
    endif
BENCH_END(comp37_a_diagnose_w)

BENCH_START(comp37_a_calc_p_rho_phi)
    call a_calc_p_rho_phi( moist_2,a_moist_2,num_3d_m,al,a_al,alb,mu_2,a_mu_2,muts,a_muts,ph_2,a_ph_2,p,a_p,pb,t_2,a_t_2,p0,t0,dnw,&
&rdnw,rdn,non_hydrostatic,ide,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),&
&k_start,k_end )
BENCH_END(comp37_a_calc_p_rho_phi)

BENCH_START(exch33)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1654.inc"





#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1664.inc"
#endif
BENCH_END(exch33)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 37
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

BENCH_START(comp38)
#ifndef FAST_CPY
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
#else
 call fast_copy_lint(  ww_m , ww_m_keep3 , n3d_elem ) 
 call fast_copy_lint(  rv_m , rv_m_keep3 , n3d_elem ) 
 call fast_copy_lint(  ru_m , ru_m_keep3 , n3d_elem ) 
 call fast_copy_lint(  a , a_keep3 , n3d_elem ) 
 call fast_copy_lint(  alpha , alpha_keep3 , n3d_elem ) 
 call fast_copy_lint(  gamma , gamma_keep3 , n3d_elem ) 
!------------------------------

 call fast_copy_lint(  xkmhd , xkmhdh , n3d_elem ) 
 call fast_copy_lint(  w_2 , w_2h , n3d_elem ) 
 call fast_copy_lint(  w_1 , w_1h , n3d_elem ) 
 call fast_copy_lint(  v_2 , v_2h , n3d_elem ) 
 call fast_copy_lint(  v_1 , v_1h , n3d_elem ) 
 call fast_copy_lint(  u_2 , u_2h , n3d_elem ) 
 call fast_copy_lint(  u_1 , u_1h , n3d_elem ) 
 call fast_copy_lint(  t_tendf , t_tendfh , n3d_elem ) 
 call fast_copy_lint(  t_2 , t_2h , n3d_elem ) 
 call fast_copy_lint(  t_1 , t_1h , n3d_elem ) 
 call fast_copy_lint(  rw_tendf , rw_tendfh , n3d_elem ) 
 call fast_copy_lint(  rv_tendf , rv_tendfh , n3d_elem ) 
 call fast_copy_lint(  ru_tendf , ru_tendfh , n3d_elem ) 
 call fast_copy_lint(  pm1 , pm1h , n3d_elem ) 
 call fast_copy_lint(  ph_tendf , ph_tendfh , n3d_elem ) 
 call fast_copy_lint(  ph_2 , ph_2h , n3d_elem ) 
 call fast_copy_lint(  ph_1 , ph_1h , n3d_elem ) 
 call fast_copy_lint(  p , ph , n3d_elem ) 
 call fast_copy_lint(  mu_2 , mu_2h , n2d_elem ) 
 call fast_copy_lint(  mu_1 , mu_1h , n2d_elem ) 
 call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2) , n3d_elem * (num_moist-1) ) 
 call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem * (num_moist-1) ) 
 call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2) , n3d_elem * (num_moist-1) ) 
 call fast_copy_lint(  dnw , dnwh , kme-kms+1 ) 
 call fast_copy_lint(  al , alh , n3d_elem ) 
!----------------------------------------
 call fast_copy_lint(  mudf , mudf_ma , n2d_elem ) 
!----------------------------------------
#endif

  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
BENCH_END(comp38)
! recompute : dt_rk,dts_rk,number_of_small_timesteps

BENCH_START(exch34)
#ifdef DM_PARALLEL
lineno = __LINE__
#   include "HALO_1748.inc"
#endif
BENCH_END(exch34)

BENCH_START(comp39)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp39)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1757.inc"
#endif

BENCH_START(exch35)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_1763.inc"
#endif
BENCH_END(exch35)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzg: if (rk_step .eq. 1) then

BENCH_START(comp40)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp40)

BENCH_START(exch36)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch36)

BENCH_START(comp41)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp41)

BENCH_START(exch37)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch37)

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

BENCH_START(comp42)
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp42)

    endif

  endif rk_step_is_onzg

BENCH_START(exch38)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1809.inc"



#endif
BENCH_END(exch38)

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier between the call to rk_tendency and 
! TBH:  the end of small_stepu loop.  
 restore_rktend_thru_sszw: if ( config_flags%remove_rktend_thru_ss ) then
BENCH_START(comprestore_rktend_thru_ss_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktend_thru_sszw:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND_THRU_SS)
#include "restore_rktend_thru_ss.h"
BENCH_END(comprestore_rktend_thru_ss_tim)
 else  ! restore_rktend_thru_sszw

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendzw: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendzw:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendzw

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepzw, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7774)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7774)

 endif restore_rktendzw

BENCH_START(comp43)
!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp43)

BENCH_START(exch39)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_1857.inc"

#endif
BENCH_END(exch39)

!------------------------------
!------------------------------

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by small_stepu loop.  
 restore_small_stepzw: if (config_flags%remove_small_step) then
BENCH_START(comprestore_small_step_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_small_stepzw:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_SMALL_STEP)
#include "restore_small_step.h"
BENCH_END(comprestore_small_step_tim)
 else  ! restore_small_stepzw

  small_stepzw: do iteration = 1, number_of_small_timesteps
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepzw, iteration = ',iteration
CALL wrf_debug( 10, TRIM(wrf_err_message) )

BENCH_START(comp44)
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp44)

BENCH_START(exch40)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_1880.inc"
#endif
BENCH_END(exch40)
BENCH_START(comp444)
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp444)
BENCH_START(exch41)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_1889.inc"




#endif
BENCH_END(exch41)
BENCH_START(comp45)
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp45)

BENCH_START(exch42)
#ifdef DM_PARALLEL
lineno = __LINE__
#   include "HALO_1930.inc"

#endif
BENCH_END(exch42)

  end do small_stepzw

 endif restore_small_stepzw

 endif restore_rktend_thru_sszw

! recompute : mu_2,mudf,muts,ph_2,pm1,ru_m,rv_m,t_2,u_2,v_2,w_2,ww_m

BENCH_START(exch43)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch43)

BENCH_START(comp46)
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!    call small_step_finish( u_2,u_1,v_2,v_1,w_2,w_1,t_2,t_1,ph_2,ph_1,ww,ww1,mu_2,mu_1,mut,muts,muu,muus,muv,muvs,u_save,v_save,&
!&w_save,t_save,ph_save,mu_save,msfu,msfv,msft,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
!&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
!-----The original
      CALL small_step_finish( u_2, u_1, v_2, v_1, w_2, w_1,     &
                              t_2, t_1, ph_2, ph_1, ww, ww1,    &
                              mu_2, mu_1,                       &
                              mut, muts, muu, muus, muv, muvs,  &
                              u_save, v_save, w_save,           &
                              t_save, ph_save, mu_save,         &
                              msfu, msfv, msft,                 &
                              h_diabatic,                       &
                              number_of_small_timesteps,dts_rk, &
                              ids, ide, jds, jde, kds, kde,     &
                              ims, ime, jms, jme, kms, kme,     &
                              grid%i_start(ij), grid%i_end(ij), &
                              grid%j_start(ij), grid%j_end(ij), &
                              k_start    , k_end               )
BENCH_END(comp46)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 46
#include <a_debug_halo.h>
#endif

! recompute : mu_2,ph_2,t_2
!---------------------------------------------------------------------------------

  a_moist_scalar_advance: if (num_3d_m .ge. param_first_scalar) then

BENCH_START(exch44)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_1974.inc"
#endif
BENCH_END(exch44)
BENCH_START(comp47)
!----------------------------------------
!1111
!saved by Zaizhong Ma
!----------------------------------------
#ifndef FAST_CPY
u_1_keep4(:,:,:) = u_1(:,:,:)
u_2_keep4(:,:,:) = u_2(:,:,:)
v_1_keep4(:,:,:) = v_1(:,:,:)
v_2_keep4(:,:,:) = v_2(:,:,:)
w_1_keep4(:,:,:) = w_1(:,:,:)
w_2_keep4(:,:,:) = w_2(:,:,:)
ph_1_keep4(:,:,:) = ph_1(:,:,:)
ph_2_keep4(:,:,:) = ph_2(:,:,:)
t_1_keep4(:,:,:) = t_1(:,:,:)
t_2_keep4(:,:,:) = t_2(:,:,:)
mu_1_keep4(:,:) = mu_1(:,:)
mu_2_keep4(:,:) = mu_2(:,:)
p_keep4(:,:,:) = p(:,:,:)
al_keep4(:,:,:) = al(:,:,:)
moist_1_keep4(:,:,:,:) = moist_1(:,:,:,:)
moist_2_keep4(:,:,:,:) = moist_2(:,:,:,:)
!----------------------------------------
rv_mz(:,:,:) = rv_m(:,:,:)
ru_tendfz(:,:,:) = ru_tendf(:,:,:)
ru_mz(:,:,:) = ru_m(:,:,:)
moist_tendz(:,:,:,:) = moist_tend(:,:,:,:)
#else
 call fast_copy_lint(u_1_keep4 , u_1 , n3d_elem )
 call fast_copy_lint(u_2_keep4 , u_2 , n3d_elem )
 call fast_copy_lint(v_1_keep4 , v_1 , n3d_elem )
 call fast_copy_lint(v_2_keep4 , v_2 , n3d_elem )
 call fast_copy_lint(w_1_keep4 , w_1 , n3d_elem )
 call fast_copy_lint(w_2_keep4 , w_2 , n3d_elem )
 call fast_copy_lint(ph_1_keep4 , ph_1 , n3d_elem )
 call fast_copy_lint(ph_2_keep4 , ph_2 , n3d_elem )
 call fast_copy_lint(t_1_keep4 , t_1 , n3d_elem )
 call fast_copy_lint(t_2_keep4 , t_2 , n3d_elem )
 call fast_copy_lint(mu_1_keep4 , mu_1 , n2d_elem )
 call fast_copy_lint(mu_2_keep4 , mu_2 , n2d_elem )
 call fast_copy_lint(p_keep4 , p , n3d_elem )
 call fast_copy_lint(al_keep4 , al , n3d_elem )
 call fast_copy_lint(moist_1_keep4(ims,kms,jms,2) , moist_1(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
 call fast_copy_lint(moist_2_keep4(ims,kms,jms,2) , moist_2(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
!----------------------------------------
 call fast_copy_lint(rv_mz , rv_m , n3d_elem )
 call fast_copy_lint(ru_tendfz , ru_tendf , n3d_elem )
 call fast_copy_lint(ru_mz , ru_m , n3d_elem )
 call fast_copy_lint(moist_tendz(ims,kms,jms,2) , moist_tend(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
#endif
!----------------------------------------
BENCH_END(comp47)

    do im = num_3d_m, param_first_scalar, -1
BENCH_START(comp48)
!----------------------------------------
!  1111
!recovered by Zaizhong Ma
!----------------------------------------
#ifndef FAST_CPY
u_1(:,:,:) = u_1_keep4(:,:,:)
u_2(:,:,:) = u_2_keep4(:,:,:)
v_1(:,:,:) = v_1_keep4(:,:,:)
v_2(:,:,:) = v_2_keep4(:,:,:)
w_1(:,:,:) = w_1_keep4(:,:,:)
w_2(:,:,:) = w_2_keep4(:,:,:)
ph_1(:,:,:) = ph_1_keep4(:,:,:)
ph_2(:,:,:) = ph_2_keep4(:,:,:)
t_1(:,:,:) = t_1_keep4(:,:,:)
t_2(:,:,:) = t_2_keep4(:,:,:)
mu_1(:,:) = mu_1_keep4(:,:)
mu_2(:,:) = mu_2_keep4(:,:)
p(:,:,:) = p_keep4(:,:,:)
al(:,:,:) = al_keep4(:,:,:)
moist_1(:,:,:,:) = moist_1_keep4(:,:,:,:)
moist_2(:,:,:,:) = moist_2_keep4(:,:,:,:)
!----------------------------------------
!----------------------------------------
rv_m(:,:,:) = rv_mz(:,:,:)
ru_tendf(:,:,:) = ru_tendfz(:,:,:)
ru_m(:,:,:) = ru_mz(:,:,:)
moist_tend(:,:,:,:) = moist_tendz(:,:,:,:)
!----------------------------------------
#else
  call fast_copy_lint(u_1 , u_1_keep4 , n3d_elem )
  call fast_copy_lint(u_2 , u_2_keep4 , n3d_elem )
  call fast_copy_lint(v_1 , v_1_keep4 , n3d_elem )
  call fast_copy_lint(v_2 , v_2_keep4 , n3d_elem )
  call fast_copy_lint(w_1 , w_1_keep4 , n3d_elem )
  call fast_copy_lint(w_2 , w_2_keep4 , n3d_elem )
  call fast_copy_lint(ph_1 , ph_1_keep4 , n3d_elem )
  call fast_copy_lint(ph_2 , ph_2_keep4 , n3d_elem )
  call fast_copy_lint(t_1 , t_1_keep4 , n3d_elem )
  call fast_copy_lint(t_2 , t_2_keep4 , n3d_elem )
  call fast_copy_lint(mu_1 , mu_1_keep4 , n2d_elem )
  call fast_copy_lint(mu_2 , mu_2_keep4 , n2d_elem )
  call fast_copy_lint(p , p_keep4 , n3d_elem )
  call fast_copy_lint(al , al_keep4 , n3d_elem )
  call fast_copy_lint(moist_1(ims,kms,jms,2) , moist_1_keep4(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(moist_2(ims,kms,jms,2) , moist_2_keep4(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
!----------------------------------------
!----------------------------------------
  call fast_copy_lint(rv_m , rv_mz , n3d_elem )
  call fast_copy_lint(ru_tendf , ru_tendfz , n3d_elem )
  call fast_copy_lint(ru_m , ru_mz , n3d_elem )
  call fast_copy_lint(moist_tend(ims,kms,jms,2) , moist_tendz(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
!----------------------------------------
#endif
BENCH_END(comp48)

BENCH_START(exch45)
#ifdef DM_PARALLEL
lineno = __LINE__
#   include "HALO_2036.inc"

#endif
BENCH_END(exch45)

BENCH_START(comp49)
     moist_variable_loor2:  do iy = param_first_scalar, num_3d_m - 1

        call rk_scalar_tend( iy,iy,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,iy),moist_2(ims,kms,jms,&
&iy),moist_tend(ims,kms,jms,iy),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (iy .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (iy .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (iy .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,iy),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif

        call rk_update_scalar( iy,iy,moist_1(ims,kms,jms,iy),moist_2(ims,kms,jms,iy),moist_tend(ims,kms,jms,iy),advect_tend,msft,&
&mu_1,mu_2,mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    end do moist_variable_loor2

        call rk_scalar_tend( im,im,config_flags,rk_step,dt_rk,ru_m,rv_m,ww_m,mut,alt,moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,&
&im),moist_tend(ims,kms,jms,im),advect_tend,rqvften,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,khdif,kvdif,&
&xkmhd,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%&
&j_end(ij),k_start,k_end )
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqv_b,rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqc_b,rqc_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqr_b,rqr_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqi_b,rqi_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqs_b,rqs_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call spec_bdy_scalar( moist_tend(ims,kms,jms,im),rqg_b,rqg_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
BENCH_END(comp49)

!-------------------------------------------------------

BENCH_START(exch46)
#ifdef DM_PARALLEL
lineno = __LINE__
#   include "HALO_2112.inc"
#endif
BENCH_END(exch46)

! recompute : advect_tend,moist_tend

BENCH_START(comp50)
        call a_rk_update_scalar( im,im,moist_1(ims,kms,jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,&
&jms,im),moist_tend(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),advect_tend,a_advect_tend,msft,mu_1,a_mu_1,mu_2,a_mu_2,&
&mub,rk_step,dt_rk,spec_zone,epsts,leapfrog,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

        if (config_flags%nested .and. rk_step .eq. 1) then
          if (im .eq. p_qc) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqc_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qr) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqr_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qi) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqi_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qs) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqs_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else if (im .eq. p_qg) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqg_bth,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
        if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
          if (im .eq. p_qv) then
            call a_spec_bdy_scalar( a_moist_tend(ims,kms,jms,im),a_rqv_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,&
&kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
BENCH_END(comp50)

BENCH_START(exch47)
#ifdef DM_PARALLEL
lineno = __LINE__
# include "HALO_2154.inc"
#endif
BENCH_END(exch47)

BENCH_START(comp51)
        call a_rk_scalar_tend( im,im,config_flags,rk_step,ru_m,a_ru_m,rv_m,a_rv_m,ww_m,a_ww_m,mut,a_mut,alt,a_alt,moist_1(ims,kms,&
&jms,im),a_moist_1(ims,kms,jms,im),moist_2(ims,kms,jms,im),a_moist_2(ims,kms,jms,im),a_moist_tend(ims,kms,jms,im),&
&a_advect_tend,qv_base, .true. ,fnm,fnp,msfu,msfv,msft,rdx,rdy,rdn,rdnw,kvdif,xkmhd,a_xkmhd,leapfrog,ids,ide,jds,jde,kde,&
&ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )
BENCH_END(comp51)

    end do
  endif a_moist_scalar_advance

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 51
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

BENCH_START(comp52)
#ifndef FAST_CPY
!------------------------------
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
#else
!------------------------------
 call fast_copy_lint(  ww_m , ww_m_keep3, n3d_elem )
 call fast_copy_lint(  rv_m , rv_m_keep3, n3d_elem )
 call fast_copy_lint(  ru_m , ru_m_keep3, n3d_elem )
 call fast_copy_lint(  a , a_keep3, n3d_elem )
 call fast_copy_lint(  alpha , alpha_keep3, n3d_elem )
 call fast_copy_lint(  gamma , gamma_keep3, n3d_elem )
!------------------------------

 call fast_copy_lint(  xkmhd , xkmhdh, n3d_elem )
 call fast_copy_lint(  w_2 , w_2h, n3d_elem )
 call fast_copy_lint(  w_1 , w_1h, n3d_elem )
 call fast_copy_lint(  v_2 , v_2h, n3d_elem )
 call fast_copy_lint(  v_1 , v_1h, n3d_elem )
 call fast_copy_lint(  u_2 , u_2h, n3d_elem )
 call fast_copy_lint(  u_1 , u_1h, n3d_elem )
 call fast_copy_lint(  t_tendf , t_tendfh, n3d_elem )
 call fast_copy_lint(  t_2 , t_2h, n3d_elem )
 call fast_copy_lint(  t_1 , t_1h, n3d_elem )
 call fast_copy_lint(  rw_tendf , rw_tendfh, n3d_elem )
 call fast_copy_lint(  rv_tendf , rv_tendfh, n3d_elem )
 call fast_copy_lint(  ru_tendf , ru_tendfh, n3d_elem )
 call fast_copy_lint(  pm1 , pm1h, n3d_elem )
 call fast_copy_lint(  ph_tendf , ph_tendfh, n3d_elem )
 call fast_copy_lint(  ph_2 , ph_2h, n3d_elem )
 call fast_copy_lint(  ph_1 , ph_1h, n3d_elem )
 call fast_copy_lint(  p , ph, n3d_elem )
 call fast_copy_lint(  mu_2 , mu_2h, n2d_elem )
 call fast_copy_lint(  mu_1 , mu_1h, n2d_elem )
 call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2), n3d_elem*(num_moist-1) )
 call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2), n3d_elem*(num_moist-1) )
 call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2), n3d_elem*(num_moist-1) )
 call fast_copy_lint(  dnw , dnwh , kme-kms+1 )
 call fast_copy_lint(  al , alh, n3d_elem )
!----------------------------------------
 call fast_copy_lint(  mudf , mudf_ma, n2d_elem )
!----------------------------------------
#endif
  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
BENCH_END(comp52)

BENCH_START(exch48)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_2249.inc"
#endif
BENCH_END(exch48)

BENCH_START(comp53)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp53)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2258.inc"
#endif

BENCH_START(exch49)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2264.inc"
#endif
BENCH_END(exch49)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzz: if (rk_step .eq. 1) then

BENCH_START(comp54)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp54)

BENCH_START(exch50)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch50)

BENCH_START(comp55)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp55)

BENCH_START(exch51)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch51)

BENCH_START(comp56)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
BENCH_END(comp56)
  endif rk_step_is_onzz

BENCH_START(exch52)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2309.inc"



#endif
BENCH_END(exch52)

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier between the call to rk_tendency and 
! TBH:  the end of small_stepu loop.  
 restore_rktend_thru_sszz: if ( config_flags%remove_rktend_thru_ss ) then
BENCH_START(comprestore_rktend_thru_ss_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktend_thru_sszz:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND_THRU_SS)
#include "restore_rktend_thru_ss.h"
BENCH_END(comprestore_rktend_thru_ss_tim)
 else  ! restore_rktend_thru_sszz

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendzz: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendzz:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendzz

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepzz, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7775)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7775)

 endif restore_rktendzz

BENCH_START(comp57)
!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif

! recompute : mu_tend,ph_tend,ru_tend,rv_tend,rw_tend,t_tend

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp57)

BENCH_START(exch53)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2358.inc"

#endif
BENCH_END(exch53)

!  recompute : a,al,alpha,c2a,gamma,mu_1,mu_2,mu_save,mudf,p,ph_1,ph_2,p
! h_save,pm1,t_1,t_2,t_save,u_1,u_2,u_save,v_1,v_2,v_save,w_1,w_2,w_save
! ,ww1

!------------------------------
!------------------------------

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by small_stepu loop.  
 restore_small_stepzz: if (config_flags%remove_small_step) then
BENCH_START(comprestore_small_step_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_small_stepzz:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_SMALL_STEP)
#include "restore_small_step.h"
BENCH_END(comprestore_small_step_tim)
 else  ! restore_small_stepzz

  small_stepzz: do iteration = 1, number_of_small_timesteps
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepzz, iteration = ',iteration
CALL wrf_debug( 10, TRIM(wrf_err_message) )

BENCH_START(comp58)
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp58)

BENCH_START(exch54)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2386.inc"
#endif
BENCH_END(exch54)

BENCH_START(comp59)
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp59)

BENCH_START(exch55)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_2397.inc"




#endif
BENCH_END(exch55)

BENCH_START(comp60)
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,&
&kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
      call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ids,ide,jds,jde,&
&kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp60)

BENCH_START(exch56)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2441.inc"

#endif
BENCH_END(exch56)

  end do small_stepzz

 endif restore_small_stepzz

 endif restore_rktend_thru_sszz

!------------------------------------------------------

BENCH_START(comp61)
    call calc_mu_uv_1( config_flags,muts,muus,muvs,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp61)

BENCH_START(exch57)
#ifdef DM_PARALLEL


#endif
BENCH_END(exch57)

! recompute : muus,muvs

BENCH_START(comp62)
    call a_small_step_finish( u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,t_2,a_t_2,a_ph_2,a_mu_2,mut,a_mut,muts,a_muts,muu,a_muu,muus,a_muus,&
&muv,a_muv,muvs,a_muvs,u_save,a_u_save,v_save,a_v_save,w_save,a_w_save,t_save,a_t_save,a_ph_save,a_mu_save,msfu,msfv,msft,ide,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )
BENCH_END(comp62)


BENCH_START(exch58)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_2474.inc"
#endif
BENCH_END(exch58)

BENCH_START(comp63)
    call a_calc_mu_uv_1( config_flags,a_muts,a_muus,a_muvs,ids,ide,jds,jde,ims,ime,jms,jme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )
BENCH_END(comp63)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 63
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

  a_small_steps: do iteration = number_of_small_timesteps, 1, -1

BENCH_START(comp64)
#ifndef FAST_CPY
!------------------------------
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
#else

!------------------------------
  call fast_copy_lint( ww_m , ww_m_keep3 , n3d_elem )
  call fast_copy_lint( rv_m , rv_m_keep3 , n3d_elem )
  call fast_copy_lint( ru_m , ru_m_keep3 , n3d_elem )
  call fast_copy_lint( a , a_keep3 , n3d_elem )
  call fast_copy_lint( alpha , alpha_keep3 , n3d_elem )
  call fast_copy_lint( gamma , gamma_keep3 , n3d_elem )
!------------------------------

  call fast_copy_lint( xkmhd , xkmhdh , n3d_elem )
  call fast_copy_lint( w_2 , w_2h , n3d_elem )
  call fast_copy_lint( w_1 , w_1h , n3d_elem )
  call fast_copy_lint( v_2 , v_2h , n3d_elem )
  call fast_copy_lint( v_1 , v_1h , n3d_elem )
  call fast_copy_lint( u_2 , u_2h , n3d_elem )
  call fast_copy_lint( u_1 , u_1h , n3d_elem )
  call fast_copy_lint( t_tendf , t_tendfh , n3d_elem )
  call fast_copy_lint( t_2 , t_2h , n3d_elem )
  call fast_copy_lint( t_1 , t_1h , n3d_elem )
  call fast_copy_lint( rw_tendf , rw_tendfh , n3d_elem )
  call fast_copy_lint( rv_tendf , rv_tendfh , n3d_elem )
  call fast_copy_lint( ru_tendf , ru_tendfh , n3d_elem )
  call fast_copy_lint( pm1 , pm1h , n3d_elem )
  call fast_copy_lint( ph_tendf , ph_tendfh , n3d_elem )
  call fast_copy_lint( ph_2 , ph_2h , n3d_elem )
  call fast_copy_lint( ph_1 , ph_1h , n3d_elem )
  call fast_copy_lint( p , ph , n3d_elem )
  call fast_copy_lint( mu_2 , mu_2h , n2d_elem )
  call fast_copy_lint( mu_1 , mu_1h , n2d_elem )
  call fast_copy_lint( moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2) , n3d_elem * (num_moist - 1) )
  call fast_copy_lint( moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem  * (num_moist - 1) )
  call fast_copy_lint( moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2) , n3d_elem  * (num_moist - 1) )
  call fast_copy_lint( dnw , dnwh, kme-kms+1 )
  call fast_copy_lint( al , alh , n3d_elem )

#endif
BENCH_END(comp64)

BENCH_START(exch59)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2527.inc"





#endif
BENCH_END(exch59)

BENCH_START(comp65)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
BENCH_END(comp65)

BENCH_START(exch60)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch60)

BENCH_START(comp66)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp66)
BENCH_START(exch61)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2588.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2593.inc"
#endif
BENCH_END(exch61)

  rk_step_is_onzd: if (rk_step .eq. 1) then

BENCH_START(comp67)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp67)

BENCH_START(exch62)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2605.inc"
#endif
BENCH_END(exch62)

BENCH_START(comp68)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp68)

    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

BENCH_START(exch63)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch63)
BENCH_START(comp69)
        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp69)

    endif
  endif rk_step_is_onzd

BENCH_START(exch64)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2636.inc"



#endif
BENCH_END(exch64)

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendzr: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendzr:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendzr

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_small_stepzr, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7776)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7776)

 endif restore_rktendzr

BENCH_START(comp70_relax_bdy_dry)
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp70_relax_bdy_dry)
BENCH_START(comp70_rk_addtend_dry)
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp70_rk_addtend_dry)
BENCH_START(comp70_spec_bdy_dry)
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp70_spec_bdy_dry)

BENCH_START(comp70_small_step_prep)
    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp70_small_step_prep)
BENCH_START(comp70_calc_p_rho)
    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp70_calc_p_rho)
BENCH_START(comp70_calc_coef_w)
    if (non_hydrostatic) then
      call calc_coef_w( a,alpha,gamma,mut,cqw,rdn,rdnw,c2a,dts,g,epssm,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%&
&i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp70_calc_coef_w)

BENCH_START(exch65)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2676.inc"

#endif
BENCH_END(exch65)

    small_stepzr: do iteration1 = 1, iteration-1
WRITE(wrf_err_message,*) 'DEBUG:  begin small_stepzr, iteration1 = ',iteration1
CALL wrf_debug( 10, TRIM(wrf_err_message) )

BENCH_START(comp71)
        call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif
BENCH_END(comp71)

BENCH_START(exch66)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2696.inc"
#endif
BENCH_END(exch66)

BENCH_START(comp72)
        call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration1,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        if (config_flags%specified .or. config_flags%nested) then
          call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,&
&ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
          call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        endif
BENCH_END(comp72)

BENCH_START(exch67)
#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_2715.inc"




#endif
BENCH_END(exch67)

BENCH_START(comp73)
      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration1,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

        if (non_hydrostatic) then
          call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,&
&alb,a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        endif

        if (config_flags%specified .or. config_flags%nested) then
          if (non_hydrostatic) then
            call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            if (config_flags%specified) then

               CALL zero_grad_bdy ( w_2,                        &
                                    'w'         , config_flags, &
                                    spec_zone,                  &
                                    ids,ide, jds,jde, kds,kde,  & ! domain dims
                                    ims,ime, jms,jme, kms,kme,  & ! memory dims
                                    ips,ipe, jps,jpe, kps,kpe,  & ! patch  dims
                                    grid%i_start(ij), grid%i_end(ij),         &
                                    grid%j_start(ij), grid%j_end(ij),         &
                                    k_start    , k_end             )

            else
              call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
            endif
          endif
        endif

        call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,iteration1,ids,ide,jds,&
&jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp73)


BENCH_START(exch68)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2762.inc"

#endif
BENCH_END(exch68)

    end do small_stepzr

!----------------------------------------
BENCH_START(exch69)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2773.inc"
#endif
BENCH_END(exch69)
BENCH_START(comp74)
#ifndef FAST_CPY
alq(:,:,:) = al(:,:,:)
mu_2q(:,:) = mu_2(:,:)
pq(:,:,:) = p(:,:,:)
ph_2q(:,:,:) = ph_2(:,:,:)
#else
 call fast_copy_lint ( alq , al , n3d_elem ) 
 call fast_copy_lint ( mu_2q , mu_2 , n2d_elem ) 
 call fast_copy_lint ( pq , p , n3d_elem ) 
 call fast_copy_lint ( ph_2q , ph_2 , n3d_elem ) 
#endif
BENCH_END(comp74)

BENCH_START(exch70)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_2784.inc"
#endif
BENCH_END(exch70)

BENCH_START(comp75)
      call advance_uv( u_2,ru_tend,v_2,rv_tend,p,pb,ph_2,php,alt,al,mu_2,muu,cqu,muv,cqv,mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,&
&emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( u_2,ru_tend,dts_rk,'u',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( v_2,rv_tend,dts_rk,'v',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
BENCH_END(comp75)

!----------------------------------------
BENCH_START(exch71)
#ifdef DM_PARALLEL
lineno = __LINE__
#       include "HALO_2802.inc"
#endif
BENCH_END(exch71)
BENCH_START(comp76)
#ifndef FAST_CPY
wwr(:,:,:) = ww(:,:,:)
u_2r(:,:,:) = u_2(:,:,:)
v_2r(:,:,:) = v_2(:,:,:)
#else
  call fast_copy_lint ( wwr , ww , n3d_elem )
  call fast_copy_lint ( u_2r , u_2 , n3d_elem )
  call fast_copy_lint ( v_2r , v_2 , n3d_elem )
#endif
BENCH_END(comp76)

BENCH_START(exch71b)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_2810.inc"
#endif
BENCH_END(exch71b)

BENCH_START(comp77)
      call advance_mu_t( ww,ww1,u_2,u_save,v_2,v_save,mu_2,mut,muave,muts,muu,muv,mudf,ru_m,rv_m,ww_m,t_2,t_save,t_2save,t_tend,&
&mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,msfv,msft,iteration,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp77)

BENCH_START(exch72)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2821.inc"




#endif
BENCH_END(exch72)

BENCH_START(comp78)
      if (config_flags%specified .or. config_flags%nested) then
        call spec_bdyupdate( t_2,t_tend,dts_rk,'t',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,&
&jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call spec_bdyupdate( mu_2,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call spec_bdyupdate( muts,mu_tend,dts_rk,'m',config_flags,spec_zone,ids,ide,jds,jde,1,1,ims,ime,jms,jme,1,1,ips,ipe,jps,&
&jpe,1,1,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
      endif

      call sumflux( u_2,v_2,ww,u_save,v_save,ww1,muu,muv,ru_m,rv_m,ww_m,epssm,msfu,msfv,iteration,number_of_small_timesteps,ids,&
&ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp78)

BENCH_START(exch73)
#ifdef DM_PARALLEL
lineno = __LINE__
#       include "HALO_2844.inc"
#endif
BENCH_END(exch73)
!----------------------------------------
#ifndef FAST_CPY
w_2s(:,:,:) = w_2(:,:,:)
wws(:,:,:) = ww(:,:,:)
u_2s(:,:,:) = u_2(:,:,:)
v_2s(:,:,:) = v_2(:,:,:)
mu_2s(:,:) = mu_2(:,:)
t_2s(:,:,:) = t_2(:,:,:)
ph_2s(:,:,:) = ph_2(:,:,:)
as(:,:,:) = a(:,:,:)
t_2saves(:,:,:) = t_2save(:,:,:) 
#else
  call fast_copy_lint( w_2s , w_2 , n3d_elem )
  call fast_copy_lint( wws , ww , n3d_elem )
  call fast_copy_lint( u_2s , u_2 , n3d_elem )
  call fast_copy_lint( v_2s , v_2 , n3d_elem )
  call fast_copy_lint( mu_2s , mu_2 , n2d_elem )
  call fast_copy_lint( t_2s , t_2 , n3d_elem )
  call fast_copy_lint( ph_2s , ph_2 , n3d_elem )
  call fast_copy_lint( as , a , n3d_elem )
  call fast_copy_lint( t_2saves , t_2save , n3d_elem )
#endif

BENCH_START(comp79)
      if (non_hydrostatic) then
        call advance_w( w_2,rw_tend,ww,u_2,v_2,mu_2,mut,muave,muts,t_2save,t_2,t_save,ph_2,ph_save,phb,ph_tend,ht,c2a,cqw,alt,alb,&
&a,alpha,gamma,rdx,rdy,dts,t0,epssm,dnw,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,&
&jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then

          call spec_bdyupdate_ph( ph_save,ph_2,ph_tend,mu_tend,muts,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,&
&ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          if (config_flags%specified) then
            call zero_grad_bdy( w_2,'w',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,&
&kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          else
            call spec_bdyupdate( w_2,rw_tend,dts_rk,'h',config_flags,spec_zone,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
&ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
          endif
        endif
      endif
BENCH_END(comp79)

BENCH_START(exch74)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2881.inc"








#endif
BENCH_END(exch74)

BENCH_START(comp80)
      call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,iteration,ide,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp80)

BENCH_START(exch75)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_2903.inc"








#endif
BENCH_END(exch75)

BENCH_START(comp81)
      if (config_flags%specified .or. config_flags%nested) then
        if (non_hydrostatic) then
          if (config_flags%specified) then
            call a_zero_grad_bdy( a_w_2,'w',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start)
          else
            call a_spec_bdyupdate( a_w_2,a_rw_tend,dts_rk,'h',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
          endif

          call a_spec_bdyupdate_ph( ph_save,a_ph_save,ph_2,a_ph_2,ph_tend,a_ph_tend,mu_tend,a_mu_tend,muts,a_muts,dts_rk,'h',&
&spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
        endif
      endif

!----------------------------------------
#ifndef FAST_CPY
w_2(:,:,:) = w_2s(:,:,:)
ww(:,:,:) = wws(:,:,:)
u_2(:,:,:) = u_2s(:,:,:)
v_2(:,:,:) = v_2s(:,:,:)
mu_2(:,:) = mu_2s(:,:)
t_2(:,:,:) = t_2s(:,:,:)
ph_2(:,:,:) = ph_2s(:,:,:)
a(:,:,:) = as(:,:,:)
t_2save(:,:,:) = t_2saves(:,:,:) 
#else
  call fast_copy_lint( w_2 , w_2s , n3d_elem )
  call fast_copy_lint( ww , wws , n3d_elem )
  call fast_copy_lint( u_2 , u_2s , n3d_elem )
  call fast_copy_lint( v_2 , v_2s , n3d_elem )
  call fast_copy_lint( mu_2 , mu_2s , n2d_elem )
  call fast_copy_lint( t_2 , t_2s , n3d_elem )
  call fast_copy_lint( ph_2 , ph_2s , n3d_elem )
  call fast_copy_lint( a , as , n3d_elem )
  call fast_copy_lint( t_2save , t_2saves , n3d_elem )
#endif
BENCH_END(comp81)


BENCH_START(exch76)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_2955.inc"









#endif
BENCH_END(exch76)

      if (non_hydrostatic) then

BENCH_START(exch77)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_2973.inc"
#endif
BENCH_END(exch77)

BENCH_START(comp82)
        call a_advance_w( w_2,a_w_2,rw_tend,a_rw_tend,ww,a_ww,u_2,a_u_2,v_2,a_v_2,mu_2,a_mu_2,mut,a_mut,muave,a_muave,muts,a_muts,&
&t_2save,a_t_2save,t_2,a_t_2,t_save,a_t_save,ph_2,a_ph_2,ph_save,a_ph_save,phb,ph_tend,a_ph_tend,ht,c2a,a_c2a,cqw,a_cqw,&
&alt,a_alt,alb,a,a_a,alpha,a_alpha,gamma,a_gamma,rdx,rdy,dts,t0,epssm,fnm,fnp,rdnw,rdn,cf1,cf2,cf3,msft,config_flags,ids,&
&ide,jds,jde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp82)

      endif

BENCH_START(exch78)
#ifdef DM_PARALLEL
lineno = __LINE__
# include "HALO_2991.inc"








#endif
BENCH_END(exch78)

BENCH_START(comp83)
      call a_sumflux( a_u_2,a_v_2,a_ww,u_save,a_u_save,v_save,a_v_save,a_ww1,muu,a_muu,muv,a_muv,a_ru_m,a_rv_m,a_ww_m,msfu,msfv,&
&iteration,number_of_small_timesteps,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp83)

BENCH_START(exch79)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3013.inc"








#endif
BENCH_END(exch79)

BENCH_START(comp84)
      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_muts,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_mu_2,a_mu_tend,dts_rk,'m',spec_zone,ids,ide,jds,jde,1,ims,ime,jms,jme,1,1,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),1,1 )
        call a_spec_bdyupdate( a_t_2,a_t_tend,dts_rk,'t',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
      endif

!----------------------------------------
#ifndef FAST_CPY
u_2(:,:,:) = u_2r(:,:,:)
v_2(:,:,:) = v_2r(:,:,:)
ww(:,:,:) = wwr(:,:,:)
#else
  call fast_copy_lint( u_2 , u_2r , n3d_elem )
  call fast_copy_lint( v_2 , v_2r , n3d_elem )
  call fast_copy_lint( ww , wwr , n3d_elem )
#endif
BENCH_END(comp84)

BENCH_START(exch80)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3042.inc"









#endif
BENCH_END(exch80)

BENCH_START(comp85_a_advance_mu_t)
      call a_advance_mu_t( ww,a_ww,ww1,a_ww1,u_2,a_u_2,u_save,a_u_save,v_2,a_v_2,v_save,a_v_save,a_mu_2,a_mut,a_muave,a_muts,muu,&
&a_muu,muv,a_muv,a_mudf,a_t_2,t_save,a_t_save,a_t_2save,a_t_tend,mu_tend,a_mu_tend,rdx,rdy,dts,epssm,dnw,fnm,fnp,rdnw,msfu,&
&msfv,msft,config_flags,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-2,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
BENCH_END(comp85_a_advance_mu_t)

BENCH_START(comp85)
!----------------------------------------
#ifndef FAST_CPY
    al(:,:,:) = alq(:,:,:)
    mu_2(:,:) = mu_2q(:,:)
    p(:,:,:) = pq(:,:,:)
    ph_2(:,:,:) = ph_2q(:,:,:)
#else
    call fast_copy_lint ( al , alq , n3d_elem )
    call fast_copy_lint ( mu_2 , mu_2q , n2d_elem )
    call fast_copy_lint ( p , pq , n3d_elem )
    call fast_copy_lint ( ph_2 , ph_2q , n3d_elem )
#endif
BENCH_END(comp85)

BENCH_START(exch81)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3072.inc"








#endif
BENCH_END(exch81)

BENCH_START(comp86)
      if (config_flags%specified .or. config_flags%nested) then
        call a_spec_bdyupdate( a_v_2,a_rv_tend,dts_rk,'v',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
        call a_spec_bdyupdate( a_u_2,a_ru_tend,dts_rk,'u',spec_zone,ids,ide,jds,jde,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),&
&grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

      endif
BENCH_END(comp86)







BENCH_START(exch82)



















#ifdef DM_PARALLEL
lineno = __LINE__
#include "HALO_3120.inc"
#endif

BENCH_END(exch82)
BENCH_START(comp87)
      call a_advance_uv( a_u_2,a_ru_tend,a_v_2,a_rv_tend,p,a_p,pb,ph_2,a_ph_2,php,a_php,alt,a_alt,al,a_al,mu_2,a_mu_2,muu,a_muu,&
&cqu,a_cqu,muv,a_muv,cqv,a_cqv,a_mudf,rdx,rdy,dts,cf1,cf2,cf3,fnm,fnp,emdiv,rdnw,config_flags,spec_zone,non_hydrostatic,ids,&
&ide,jds,jde,kde,ims,ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-2,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
BENCH_END(comp87)

  end do a_small_steps

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 87
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

BENCH_START(comp88)
#ifndef FAST_CPY
  ww_m(:,:,:) = ww_m_keep3(:,:,:)
  rv_m(:,:,:) = rv_m_keep3(:,:,:)
  ru_m(:,:,:) = ru_m_keep3(:,:,:)
  a(:,:,:) = a_keep3(:,:,:)
  alpha(:,:,:) = alpha_keep3(:,:,:)
  gamma(:,:,:) = gamma_keep3(:,:,:)
!------------------------------

  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
!----------------------------------------
  mudf(:,:) = mudf_ma(:,:)
!----------------------------------------
#else
  call fast_copy_lint(  ww_m , ww_m_keep3 , n3d_elem )
  call fast_copy_lint(  rv_m , rv_m_keep3 , n3d_elem )
  call fast_copy_lint(  ru_m , ru_m_keep3 , n3d_elem )
  call fast_copy_lint(  a , a_keep3 , n3d_elem )
  call fast_copy_lint(  alpha , alpha_keep3 , n3d_elem )
  call fast_copy_lint(  gamma , gamma_keep3 , n3d_elem )
!------------------------------

  call fast_copy_lint(  xkmhd , xkmhdh , n3d_elem )
  call fast_copy_lint(  w_2 , w_2h , n3d_elem )
  call fast_copy_lint(  w_1 , w_1h , n3d_elem )
  call fast_copy_lint(  v_2 , v_2h , n3d_elem )
  call fast_copy_lint(  v_1 , v_1h , n3d_elem )
  call fast_copy_lint(  u_2 , u_2h , n3d_elem )
  call fast_copy_lint(  u_1 , u_1h , n3d_elem )
  call fast_copy_lint(  t_tendf , t_tendfh , n3d_elem )
  call fast_copy_lint(  t_2 , t_2h , n3d_elem )
  call fast_copy_lint(  t_1 , t_1h , n3d_elem )
  call fast_copy_lint(  rw_tendf , rw_tendfh , n3d_elem )
  call fast_copy_lint(  rv_tendf , rv_tendfh , n3d_elem )
  call fast_copy_lint(  ru_tendf , ru_tendfh , n3d_elem )
  call fast_copy_lint(  pm1 , pm1h , n3d_elem )
  call fast_copy_lint(  ph_tendf , ph_tendfh , n3d_elem )
  call fast_copy_lint(  ph_2 , ph_2h , n3d_elem )
  call fast_copy_lint(  ph_1 , ph_1h , n3d_elem )
  call fast_copy_lint(  p , ph , n3d_elem )
  call fast_copy_lint(  mu_2 , mu_2h , n2d_elem )
  call fast_copy_lint(  mu_1 , mu_1h , n2d_elem )
  call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  dnw , dnwh , kme-kms+1 )
  call fast_copy_lint(  al , alh , n3d_elem )
!----------------------------------------
  call fast_copy_lint(  mudf , mudf_ma , n2d_elem )
!----------------------------------------
#endif
  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
BENCH_END(comp88)

BENCH_START(exch83)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3212.inc"
#endif
BENCH_END(exch83)

BENCH_START(comp89)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp89)
BENCH_START(exch84)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3222.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3227.inc"
#endif
BENCH_END(exch84)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

  rk_step_is_onzf: if (rk_step .eq. 1) then

BENCH_START(comp90)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp90)

BENCH_START(exch85)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch85)

BENCH_START(comp91)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp91)

BENCH_START(exch86)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch86)

BENCH_START(comp92)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
BENCH_END(comp92)
  endif rk_step_is_onzf

BENCH_START(exch87)
#ifdef DM_PARALLEL
lineno = __LINE__
#     include "HALO_3273.inc"



#endif
BENCH_END(exch87)

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendacc: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendacc:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendacc

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_a_calc_coef_w, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp7777)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp7777)

 endif restore_rktendacc

BENCH_START(comp93)
!  recompute : cqw,mu_tend,ph_save,ph_tend,ru_tend,ru_tendf,rv_tend,rv_t
! endf,rw_tend,rw_tendf,t_save,t_tend,t_tendf,u_save,v_save,w_save

    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
      call relax_bdy_dry( config_flags,u_save,v_save,ph_save,t_save,w_save,mu_tend,ru,rv,ph_2,t_2,w_2,mu_2,mut,u_b,v_b,ph_b,t_b,&
&w_b,mu_b,u_bt,v_bt,ph_bt,t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
    call rk_addtend_dry( ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,u_save,v_save,w_save,&
&ph_save,t_save,rk_step,h_diabatic,mut,msft,msfu,msfv,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    if (config_flags%specified .or. config_flags%nested) then
      call spec_bdy_dry( config_flags,ru_tend,rv_tend,ph_tend,t_tend,rw_tend,mu_tend,u_b,v_b,ph_b,t_b,w_b,mu_b,u_bt,v_bt,ph_bt,&
&t_bt,w_bt,mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,ips,ipe,jps,jpe,kps,kpe,&
&grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
    endif
BENCH_END(comp93)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 93
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

!----------------------------------------
BENCH_START(exch88)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_3313.inc"
#endif
BENCH_END(exch88)
BENCH_START(comp94)
#ifndef FAST_CPY
u_1o(:,:,:) = u_1(:,:,:)
u_2o(:,:,:) = u_2(:,:,:)
v_1o(:,:,:) = v_1(:,:,:)
v_2o(:,:,:) = v_2(:,:,:)
w_1o(:,:,:) = w_1(:,:,:)
w_2o(:,:,:) = w_2(:,:,:)
t_1o(:,:,:) = t_1(:,:,:)
t_2o(:,:,:) = t_2(:,:,:)
mu_1o(:,:) = mu_1(:,:)
mu_2o(:,:) = mu_2(:,:)
po(:,:,:) = p(:,:,:)
#else
 call fast_copy_lint(u_1o , u_1, n3d_elem )
 call fast_copy_lint(u_2o , u_2, n3d_elem )
 call fast_copy_lint(v_1o , v_1, n3d_elem )
 call fast_copy_lint(v_2o , v_2, n3d_elem )
 call fast_copy_lint(w_1o , w_1, n3d_elem )
 call fast_copy_lint(w_2o , w_2, n3d_elem )
 call fast_copy_lint(t_1o , t_1, n3d_elem )
 call fast_copy_lint(t_2o , t_2, n3d_elem )
 call fast_copy_lint(mu_1o , mu_1, n2d_elem )
 call fast_copy_lint(mu_2o , mu_2, n2d_elem )
 call fast_copy_lint(po , p, n3d_elem )
#endif

    call small_step_prep( u_1,u_2,v_1,v_2,w_1,w_2,t_1,t_2,ph_1,ph_2,mub,mu_1,mu_2,muu,muus,muv,muvs,mut,muts,mudf,u_save,v_save,&
&w_save,t_save,ph_save,mu_save,ww,ww1,dnw,c2a,pb,p,alt,msfu,msfv,msft,rk_step,leapfrog,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp94)

BENCH_START(exch89)
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_3335.inc"
#endif

!----------------------------------------
#ifdef DM_PARALLEL
lineno = __LINE__
#      include "HALO_3341.inc"
#endif
BENCH_END(exch89)
BENCH_START(comp95)

#ifndef FAST_CPY
alp(:,:,:) = al(:,:,:)
pp(:,:,:) = p(:,:,:)
ph_2p(:,:,:) = ph_2(:,:,:)
t_2p(:,:,:) = t_2(:,:,:)
mu_2p(:,:) = mu_2(:,:)
#else
  call fast_copy_lint( alp , al, n3d_elem )
  call fast_copy_lint( pp , p, n3d_elem )
  call fast_copy_lint( ph_2p , ph_2, n3d_elem )
  call fast_copy_lint( t_2p , t_2, n3d_elem )
  call fast_copy_lint( mu_2p , mu_2, n2d_elem )
#endif

    call calc_p_rho( al,p,ph_2,alt,t_2,t_save,c2a,pm1,mu_2,muts,znu,t0,rdnw,dnw,smdiv,non_hydrostatic,0,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp95)

BENCH_START(exch90)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3356.inc"







#endif
BENCH_END(exch90)

BENCH_START(comp96)
    if (non_hydrostatic) then
      call a_calc_coef_w( a,a_a,alpha,a_alpha,gamma,a_gamma,mut,a_mut,cqw,a_cqw,rdn,rdnw,c2a,a_c2a,dts,g,epssm,ide,jde,kde,ims,ime,&
&jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde) )
    endif

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 96
#include <a_debug_halo.h>
#endif

!----------------------------------------
#ifndef FAST_CPY
al(:,:,:) = alp(:,:,:)
p(:,:,:) = pp(:,:,:)
ph_2(:,:,:) = ph_2p(:,:,:)
t_2(:,:,:) = t_2p(:,:,:)
mu_2(:,:) = mu_2p(:,:)
#else
  call fast_copy_lint( al , alp , n3d_elem )
  call fast_copy_lint( p , pp , n3d_elem )
  call fast_copy_lint( ph_2 , ph_2p , n3d_elem )
  call fast_copy_lint( t_2 , t_2p , n3d_elem )
  call fast_copy_lint( mu_2 , mu_2p , n2d_elem )
#endif
BENCH_END(comp96)

BENCH_START(exch91)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3386.inc"





#endif
BENCH_END(exch91)

BENCH_START(comp97)
    call a_calc_p_rho( al,a_al,p,a_p,ph_2,a_ph_2,alt,a_alt,t_2,a_t_2,t_save,a_t_save,c2a,a_c2a,a_pm1,mu_2,a_mu_2,muts,a_muts,znu,&
&t0,rdnw,dnw,smdiv,non_hydrostatic,0,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 97
#include <a_debug_halo.h>
#endif

!----------------------------------------
#ifndef FAST_CPY
u_1(:,:,:) = u_1o(:,:,:)
u_2(:,:,:) = u_2o(:,:,:)
v_1(:,:,:) = v_1o(:,:,:)
v_2(:,:,:) = v_2o(:,:,:)
w_1(:,:,:) = w_1o(:,:,:)
w_2(:,:,:) = w_2o(:,:,:)
t_1(:,:,:) = t_1o(:,:,:)
t_2(:,:,:) = t_2o(:,:,:)
mu_1(:,:) = mu_1o(:,:)
mu_2(:,:) = mu_2o(:,:)
p(:,:,:) = po(:,:,:)
#else
  call fast_copy_lint ( u_1 , u_1o , n3d_elem )
  call fast_copy_lint ( u_2 , u_2o , n3d_elem )
  call fast_copy_lint ( v_1 , v_1o , n3d_elem )
  call fast_copy_lint ( v_2 , v_2o , n3d_elem )
  call fast_copy_lint ( w_1 , w_1o , n3d_elem )
  call fast_copy_lint ( w_2 , w_2o , n3d_elem )
  call fast_copy_lint ( t_1 , t_1o , n3d_elem )
  call fast_copy_lint ( t_2 , t_2o , n3d_elem )
  call fast_copy_lint ( mu_1 , mu_1o , n2d_elem )
  call fast_copy_lint ( mu_2 , mu_2o , n2d_elem )
  call fast_copy_lint ( p , po , n3d_elem )
#endif
BENCH_END(comp97)


BENCH_START(exch92)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3419.inc"
#endif
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3423.inc"





#endif
BENCH_END(exch92)

BENCH_START(comp98_a_small_step_prep)
    call a_small_step_prep( u_1,a_u_1,u_2,a_u_2,v_1,a_v_1,v_2,a_v_2,w_1,a_w_1,w_2,a_w_2,t_1,a_t_1,t_2,a_t_2,a_ph_1,a_ph_2,mub,mu_1,&
&a_mu_1,mu_2,a_mu_2,muu,a_muu,muus,a_muus,muv,a_muv,muvs,a_muvs,mut,a_mut,muts,a_muts,a_mudf,a_u_save,a_v_save,a_w_save,&
&a_t_save,a_ph_save,a_mu_save,a_ww,a_ww1,a_c2a,pb,p,a_p,alt,a_alt,msfu,msfv,msft,rk_step,leapfrog,ide,jde,kde,ims,ime,jms,jme,&
&kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp98_a_small_step_prep)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 98
#include <a_debug_halo.h>
#endif

BENCH_START(comp98)
!------------------------------
!------------------------------

#ifndef FAST_CPY
  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
#else
  call fast_copy_lint ( xkmhd , xkmhdh , n3d_elem ) 
  call fast_copy_lint ( w_2 , w_2h , n3d_elem ) 
  call fast_copy_lint ( w_1 , w_1h , n3d_elem ) 
  call fast_copy_lint ( v_2 , v_2h , n3d_elem ) 
  call fast_copy_lint ( v_1 , v_1h , n3d_elem ) 
  call fast_copy_lint ( u_2 , u_2h , n3d_elem ) 
  call fast_copy_lint ( u_1 , u_1h , n3d_elem ) 
  call fast_copy_lint ( t_tendf , t_tendfh , n3d_elem ) 
  call fast_copy_lint ( t_2 , t_2h , n3d_elem ) 
  call fast_copy_lint ( t_1 , t_1h , n3d_elem ) 
  call fast_copy_lint ( rw_tendf , rw_tendfh , n3d_elem ) 
  call fast_copy_lint ( rv_tendf , rv_tendfh , n3d_elem ) 
  call fast_copy_lint ( ru_tendf , ru_tendfh , n3d_elem ) 
  call fast_copy_lint ( pm1 , pm1h , n3d_elem ) 
  call fast_copy_lint ( ph_tendf , ph_tendfh , n3d_elem ) 
  call fast_copy_lint ( ph_2 , ph_2h , n3d_elem ) 
  call fast_copy_lint ( ph_1 , ph_1h , n3d_elem ) 
  call fast_copy_lint ( p , ph , n3d_elem ) 
  call fast_copy_lint ( mu_2 , mu_2h , n2d_elem ) 
  call fast_copy_lint ( mu_1 , mu_1h , n2d_elem ) 
  call fast_copy_lint ( moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2) , n3d_elem*(num_moist-1) ) 
  call fast_copy_lint ( moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem*(num_moist-1) ) 
  call fast_copy_lint ( moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2) , n3d_elem*(num_moist-1) ) 
  call fast_copy_lint ( dnw , dnwh , kme-kms+1 ) 
  call fast_copy_lint ( al , alh , n3d_elem ) 
#endif
!----------------------------------------
!---------- added by zzma for recomputing basic states -------------
  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
       dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
BENCH_END(comp98)

BENCH_START(exch93)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3510.inc"
#endif
BENCH_END(exch93)

BENCH_START(comp99)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp99)
BENCH_START(exch94)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3520.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3525.inc"
#endif
BENCH_END(exch94)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

BENCH_START(comp100)
  rk_step_is_onzs: if (rk_step .eq. 1) then

      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp100)

BENCH_START(exch95)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch95)

BENCH_START(comp101)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp101)

BENCH_START(exch96)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch96)

BENCH_START(comp102)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
BENCH_END(comp102)
  endif rk_step_is_onzs

BENCH_START(exch97)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch97)

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

! TBH:  Trade redundant computation for memory.  
! TBH:  Restore fields computed earlier by calls to rk_tendency.  
 restore_rktendasbd: if ( config_flags%remove_rktend ) then
BENCH_START(comprestore_rktend_tim)
   WRITE(wrf_err_message,*)'DEBUG:  restore_rktendasbd:  rk_step, rk_order = ',rk_step,rk_order
   CALL wrf_debug ( 10 , TRIM(wrf_err_message) )
   ! store fields
   CALL select_frame(rk_step, BUF_RKTEND)
#include "restore_rktend.h"
BENCH_END(comprestore_rktend_tim)
 else  ! restore_rktendasbd

WRITE(wrf_err_message,*) 'DEBUG:  calling rk_tendency before_a_spec_bdy_dry, rk_step = ',rk_step
CALL wrf_debug( 10, TRIM(wrf_err_message) )
BENCH_START(comp103)
    call rk_tendency( config_flags,rk_step,ru_tend,rv_tend,rw_tend,ph_tend,t_tend,ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,&
&mu_tend,u_save,v_save,w_save,ph_save,t_save,mu_save,rthften,ru,rv,rw,ww,u_2,v_2,w_2,t_2,ph_2,u_1,v_1,w_1,t_1,ph_1,h_diabatic,&
&phb,t_init,mu_2,mut,muu,muv,mub,al,alt,p,pb,php,cqu,cqv,cqw,u_base,v_base,t_base,qv_base,z_base,msfu,msfv,msft,f,e,sina,cosa,&
&fnm,fnp,rdn,rdnw,dt,rdx,rdy,khdif,kvdif,xkmhd,cf1,cf2,cf3,cfn,cfn1,num_3d_m,non_hydrostatic,leapfrog,ids,ide,jds,jde,kds,kde,&
&ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp103)

 endif restore_rktendasbd

!------------------------------
!------------------------------

BENCH_START(exch98)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3593.inc"





#endif
BENCH_END(exch98)

    if (config_flags%specified .or. config_flags%nested) then
BENCH_START(exch99)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3606.inc"
#endif
BENCH_END(exch99)
BENCH_START(comp104)
      call a_spec_bdy_dry( config_flags,a_ru_tend,a_rv_tend,a_ph_tend,a_t_tend,a_rw_tend,a_mu_tend,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,&
&a_w_bt,a_mu_bt,spec_bdy_width,spec_zone,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
BENCH_END(comp104)
    endif
BENCH_START(exch100)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3619.inc"
#endif
BENCH_END(exch100)
BENCH_START(comp105)
    call a_rk_addtend_dry( a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,&
&a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,rk_step,h_diabatic,a_mut,msft,msfu,msfv,ide,jde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
BENCH_END(comp105)
    if ((config_flags%specified .or. config_flags%nested) .and. rk_step .eq. 1) then
BENCH_START(exch101)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3632.inc"
#endif
BENCH_END(exch101)
BENCH_START(comp106)
      call a_relax_bdy_dry( config_flags,a_u_save,a_v_save,a_ph_save,a_t_save,a_w_save,a_mu_tend,a_ru,a_rv,ph_2,a_ph_2,t_2,a_t_2,&
&w_2,a_w_2,a_mu_2,mut,a_mut,a_u_b,a_v_b,a_ph_b,a_t_b,a_w_b,a_mu_b,a_u_bt,a_v_bt,a_ph_bt,a_t_bt,a_w_bt,a_mu_bt,spec_bdy_width,&
&spec_zone,relax_zone,dtbc,fcx,gcx,ijds,ijde,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-2,ids),  &
        min(grid%i_end(ij)+2,ide),    &
        max(grid%j_start(ij)-2,jds),  &
        min(grid%j_end(ij)+2,jde),k_start,k_end )
BENCH_END(comp106)
    endif

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 106
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

BENCH_START(comp107)
#ifndef FAST_CPY
  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
#else
  call fast_copy_lint(  xkmhd , xkmhdh, n3d_elem )
  call fast_copy_lint(  w_2 , w_2h, n3d_elem )
  call fast_copy_lint(  w_1 , w_1h, n3d_elem )
  call fast_copy_lint(  v_2 , v_2h, n3d_elem )
  call fast_copy_lint(  v_1 , v_1h, n3d_elem )
  call fast_copy_lint(  u_2 , u_2h, n3d_elem )
  call fast_copy_lint(  u_1 , u_1h, n3d_elem )
  call fast_copy_lint(  t_tendf , t_tendfh, n3d_elem )
  call fast_copy_lint(  t_2 , t_2h, n3d_elem )
  call fast_copy_lint(  t_1 , t_1h, n3d_elem )
  call fast_copy_lint(  rw_tendf , rw_tendfh, n3d_elem )
  call fast_copy_lint(  rv_tendf , rv_tendfh, n3d_elem )
  call fast_copy_lint(  ru_tendf , ru_tendfh, n3d_elem )
  call fast_copy_lint(  pm1 , pm1h, n3d_elem )
  call fast_copy_lint(  ph_tendf , ph_tendfh, n3d_elem )
  call fast_copy_lint(  ph_2 , ph_2h, n3d_elem )
  call fast_copy_lint(  ph_1 , ph_1h, n3d_elem )
  call fast_copy_lint(  p , ph, n3d_elem )
  call fast_copy_lint(  mu_2 , mu_2h, n2d_elem )
  call fast_copy_lint(  mu_1 , mu_1h, n2d_elem )
  call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2), n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2), n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2), n3d_elem*(num_moist-1) )
  call fast_copy_lint(  dnw , dnwh, kme-kms+1 )
  call fast_copy_lint(  al , alh, n3d_elem )
#endif
!----------------------------------------

  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
! recompute : dt_rk,dts_rk,number_of_small_timesteps
BENCH_END(comp107)

BENCH_START(exch102)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_ADJ_A1.inc"
#endif
BENCH_END(exch102)

BENCH_START(comp108)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp108)
BENCH_START(exch103)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3723.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3728.inc"
#endif
BENCH_END(exch103)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww
  rk_step_is_onzr: if (rk_step .eq. 1) then

BENCH_START(comp109)
      call init_zero_tendency( ru_tendf,rv_tendf,rw_tendf,ph_tendf,t_tendf,tke_tend,moist_tend,chem_tend,num_3d_m,num_3d_c,rk_step,&
&ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp109)

BENCH_START(exch104)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch104)

BENCH_START(comp110)
      call phy_prep( config_flags,mut,u_2,v_2,p,pb,alt,ph_2,phb,t_2,tsk,moist_2,num_3d_m,mu_3d,rho,th_phy,p_phy,pi_phy,u_phy,v_phy,&
&p8w,t_phy,t8w,z,z_at_w,dz8w,fnm,fnp,rthraten,rthblten,rublten,rvblten,rqvblten,rqcblten,rqiblten,rthcuten,rqvcuten,rqccuten,&
&rqrcuten,rqicuten,rqscuten,rthften,rqvften,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%i_end(ij),&
&grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp110)

BENCH_START(exch105)
#ifdef DM_PARALLEL
lineno = __LINE__




#endif
BENCH_END(exch105)

BENCH_START(comp111)
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then

        call calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,xkmv,xkhh,xkhv,bn2,khdif,kvdif,div,defor11,&
&defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,t8w,th_phy,t_phy,p_phy,moist_2,dn,dnw,dx,dy,rdz,rdzw,&
&mix_cr_len,num_3d_m,cf1,cf2,cf3,warm_rain,kh_tke_upper_bound,kv_tke_upper_bound,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,&
&kms,kme,grid%i_start(ij),grid%i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )

    endif
BENCH_END(comp111)
  endif rk_step_is_onzr

#ifdef DM_PARALLEL
lineno = __LINE__




#endif

!  recompute : moist_tend,ph_tendf,ru_tendf,rv_tendf,rw_tendf,t_tendf,xk
! mhd

BENCH_START(exch106)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3784.inc"

#endif
BENCH_END(exch106)

BENCH_START(comp_a_surface_drag)
!---------------------------------------------------------------------------------------------
!Zhang Xiaoyan add the AD of surface_drag on 12/05/2006
!---------------------------------------------------------------------------------------------
  IF (rk_step == 1 ) then

 call a_surface_drag(ru_tendf, a_ru_tendf, rv_tendf, a_rv_tendf, u_2, a_u_2, v_2, a_v_2, xland, muu, a_muu, muv, a_muv, z, &
&a_z, z_at_w, a_z_at_w, ide, jde, ims, ime, jms, jme, kms, kme,&
  grid%i_start(ij), grid%i_end(ij),                &
  grid%j_start(ij), grid%j_end(ij),                &
  k_start, k_end                                  )
  ENDIF
BENCH_END(comp_a_surface_drag)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 107
#include <a_debug_halo.h>
#endif

!---------------------------------------------------------------------------------------------
!                 END
!---------------------------------------------------------------------------------------------

BENCH_START(comp_a_rk_tendency1)
    call a_rk_tendency1( config_flags,rk_step,a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,&
&a_t_tendf,a_mu_tend,a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,ru,a_ru,rv,a_rv,rw,a_rw,ww,a_ww,u_2,a_u_2,v_2,a_v_2,w_2,&
&a_w_2,t_2,a_t_2,ph_2,a_ph_2,u_1,a_u_1,v_1,a_v_1,w_1,a_w_1,t_1,a_t_1,ph_1,a_ph_1,phb,t_init,mu_2,a_mu_2,mut,a_mut,muu,a_muu,&
&muv,a_muv,mub,al,a_al,alt,a_alt,p,a_p,pb,php,a_php,cqu,a_cqu,cqv,a_cqv,cqw,a_cqw,u_base,v_base,z_base,msfu,msfv,msft,f,e,sina,&
&cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,kvdif,xkmhd,a_xkmhd,cf1,cf2,cf3,cfn,cfn1,non_hydrostatic,leapfrog,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )
BENCH_END(comp_a_rk_tendency1)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 108
#include <a_debug_halo.h>
#endif

BENCH_START(exch107)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3803.inc"

#endif
BENCH_END(exch107)

BENCH_START(comp_a_rk_tendency2)
    call a_rk_tendency2( config_flags,rk_step,a_ru_tend,a_rv_tend,a_rw_tend,a_ph_tend,a_t_tend,a_ru_tendf,a_rv_tendf,a_rw_tendf,&
&a_t_tendf,a_mu_tend,a_u_save,a_v_save,a_w_save,a_ph_save,a_t_save,ru,a_ru,rv,a_rv,rw,a_rw,ww,a_ww,u_2,a_u_2,v_2,a_v_2,w_2,&
&a_w_2,t_2,a_t_2,ph_2,a_ph_2,u_1,a_u_1,v_1,a_v_1,w_1,a_w_1,t_1,a_t_1,ph_1,a_ph_1,phb,t_init,mu_2,a_mu_2,mut,a_mut,muu,a_muu,&
&muv,a_muv,mub,al,a_al,alt,a_alt,p,a_p,pb,php,a_php,cqu,a_cqu,cqv,a_cqv,cqw,a_cqw,u_base,v_base,z_base,msfu,msfv,msft,f,e,sina,&
&cosa,fnm,fnp,rdn,rdnw,dt,rdx,rdy,kvdif,xkmhd,a_xkmhd,cf1,cf2,cf3,cfn,cfn1,non_hydrostatic,leapfrog,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-3,ids),  &
        min(grid%i_end(ij)+3,ide),    &
        max(grid%j_start(ij)-3,jds),  &
        min(grid%j_end(ij)+3,jde),k_start,k_end )
BENCH_END(comp_a_rk_tendency2)
BENCH_START(comp113)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 113
#include <a_debug_halo.h>
#endif

!------------------------------
!------------------------------

#ifndef FAST_CPY
  xkmhd(:,:,:) = xkmhdh(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
  w_1(:,:,:) = w_1h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  v_1(:,:,:) = v_1h(:,:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  u_1(:,:,:) = u_1h(:,:,:)
  t_tendf(:,:,:) = t_tendfh(:,:,:)
  t_2(:,:,:) = t_2h(:,:,:)
  t_1(:,:,:) = t_1h(:,:,:)
  rw_tendf(:,:,:) = rw_tendfh(:,:,:)
  rv_tendf(:,:,:) = rv_tendfh(:,:,:)
  ru_tendf(:,:,:) = ru_tendfh(:,:,:)
  pm1(:,:,:) = pm1h(:,:,:)
  ph_tendf(:,:,:) = ph_tendfh(:,:,:)
  ph_2(:,:,:) = ph_2h(:,:,:)
  ph_1(:,:,:) = ph_1h(:,:,:)
  p(:,:,:) = ph(:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  mu_1(:,:) = mu_1h(:,:)
  moist_tend(:,:,:,:) = moist_tendh(:,:,:,:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  moist_1(:,:,:,:) = moist_1h(:,:,:,:)
  dnw(:) = dnwh(:)
  al(:,:,:) = alh(:,:,:)
#else
  call fast_copy_lint(  xkmhd , xkmhdh , n3d_elem )
  call fast_copy_lint(  w_2 , w_2h , n3d_elem )
  call fast_copy_lint(  w_1 , w_1h , n3d_elem )
  call fast_copy_lint(  v_2 , v_2h , n3d_elem )
  call fast_copy_lint(  v_1 , v_1h , n3d_elem )
  call fast_copy_lint(  u_2 , u_2h , n3d_elem )
  call fast_copy_lint(  u_1 , u_1h , n3d_elem )
  call fast_copy_lint(  t_tendf , t_tendfh , n3d_elem )
  call fast_copy_lint(  t_2 , t_2h , n3d_elem )
  call fast_copy_lint(  t_1 , t_1h , n3d_elem )
  call fast_copy_lint(  rw_tendf , rw_tendfh , n3d_elem )
  call fast_copy_lint(  rv_tendf , rv_tendfh , n3d_elem )
  call fast_copy_lint(  ru_tendf , ru_tendfh , n3d_elem )
  call fast_copy_lint(  pm1 , pm1h , n3d_elem )
  call fast_copy_lint(  ph_tendf , ph_tendfh , n3d_elem )
  call fast_copy_lint(  ph_2 , ph_2h , n3d_elem )
  call fast_copy_lint(  ph_1 , ph_1h , n3d_elem )
  call fast_copy_lint(  p , ph , n3d_elem )
  call fast_copy_lint(  mu_2 , mu_2h , n2d_elem )
  call fast_copy_lint(  mu_1 , mu_1h , n2d_elem )
  call fast_copy_lint(  moist_tend(ims,kms,jms,2) , moist_tendh(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  moist_1(ims,kms,jms,2) , moist_1h(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint(  dnw , dnwh , kme-kms+1 )
  call fast_copy_lint(  al , alh , n3d_elem )
#endif
!----------------------------------------
  dtm = dt
  if (rk_order .eq. 1) then
    if (step_number .ne. 1) then
      number_of_small_timesteps = 2*time_step_sound
      dt_rk = dt
      dtm = 2*dt
    else
      number_of_small_timesteps = time_step_sound
      dt_rk = dt/2.
      dtm = dt
    endif
    dts_rk = dts
  else if (rk_order .eq. 2) then
    if (rk_step .eq. 1) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  else if (rk_order .eq. 3) then
    if (rk_step .eq. 1) then
      dt_rk = dt/3.
      dts_rk = dt_rk
      number_of_small_timesteps = 1
    else if (rk_step .eq. 2) then
      dt_rk = 0.5*dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound/2
    else
      dt_rk = dt
      dts_rk = dts
      number_of_small_timesteps = time_step_sound
    endif
  endif
BENCH_END(comp113)

BENCH_START(exch108)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3886.inc"
#endif
BENCH_END(exch108)

! recompute : dt_rk,dts_rk,number_of_small_timesteps

BENCH_START(comp114)
    call rk_step_prep( config_flags,rk_step,u_2,v_2,w_2,t_2,ph_2,mu_2,moist_2,ru,rv,rw,ww,php,alt,muu,muv,mub,mut,phb,pb,p,al,alb,&
&cqu,cqv,cqw,msfu,msfv,msft,fnm,fnp,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,grid%i_start(ij),grid%&
&i_end(ij),grid%j_start(ij),grid%j_end(ij),k_start,k_end )
BENCH_END(comp114)
BENCH_START(exch109)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3898.inc"
#endif

#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3903.inc"
#endif
BENCH_END(exch109)

! recompute : alt,cqu,cqv,cqw,mut,muu,muv,php,ru,rv,rw,ww

  a_rk_step_is_one: if (rk_step .eq. 1) then
! recompute : p8w,p_phy,t8w,t_phy,th_phy
    if (diff_opt .eq. 2 .or. diff_opt .eq. 1) then


BENCH_START(exch110)
#ifdef DM_PARALLEL
lineno = __LINE__

#endif
BENCH_END(exch110)

BENCH_START(comp115)
        call a_calculate_km_kh( config_flags,dt,dampcoef,zdamp,damp_opt,xkmh,xkmhd,a_xkmhd,xkmv,xkhh,xkhv,bn2,a_bn2h,khdif,div,&
&defor11,defor22,defor33,defor12,defor13,defor23,tke_2(ims,kms,jms),p8w,a_p8w,t8w,a_t8w,th_phy,a_th_phy,t_phy,a_t_phy,&
&p_phy,a_p_phy,moist_2,a_moist_2,dn,dnw,dx,dy,rdz,rdzw,num_3d_m,cf1,cf2,cf3,kh_tke_upper_bound,ids,ide,jds,jde,kde,ims,ime,&
&jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp115)

    endif

BENCH_START(exch111)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3935.inc"




#endif
BENCH_END(exch111)

BENCH_START(comp116)
      call a_phy_prep( p,a_p,pb,ph_2,a_ph_2,phb,t_2,a_t_2,th_phy,a_th_phy,p_phy,a_p_phy,pi_phy,a_pi_phyh,a_p8w,t_phy,a_t_phy,a_t8w,&
&z,a_z,z_at_w,a_z_at_wh,fnm,fnp,ide,jde,kde,ims,ime,jms,jme,kms,kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )

      call a_init_zero_tendency( a_ru_tendf,a_rv_tendf,a_rw_tendf,a_ph_tendf,a_t_tendf,a_moist_tend,num_3d_m,ims,ime,jms,jme,kms,&
&kme,&
        max(grid%i_start(ij)-1,ids),  &
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp116)

  endif a_rk_step_is_one

BENCH_START(exch112)
#ifdef DM_PARALLEL
lineno = __LINE__
#    include "HALO_3963.inc"






#endif
BENCH_END(exch112)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 116
#include <a_debug_halo.h>
#endif

BENCH_START(comp117)
#ifndef FAST_CPY
  dnw(:) = dnwh(:)
  moist_2(:,:,:,:) = moist_2h(:,:,:,:)
  mu_2(:,:) = mu_2h(:,:)
  u_2(:,:,:) = u_2h(:,:,:)
  v_2(:,:,:) = v_2h(:,:,:)
  w_2(:,:,:) = w_2h(:,:,:)
#else
  call fast_copy_lint( dnw , dnwh , kme-kms+1 )
  call fast_copy_lint( moist_2(ims,kms,jms,2) , moist_2h(ims,kms,jms,2) , n3d_elem*(num_moist-1) )
  call fast_copy_lint( mu_2 , mu_2h , n2d_elem )
  call fast_copy_lint( u_2 , u_2h , n3d_elem )
  call fast_copy_lint( v_2 , v_2h , n3d_elem )
  call fast_copy_lint( w_2 , w_2h , n3d_elem )
#endif
BENCH_END(comp117)

BENCH_START(exch113)
#ifdef DM_PARALLEL
lineno = __LINE__
# include "HALO_3982.inc"
#endif
BENCH_END(exch113)

BENCH_START(comp118)
    call a_rk_step_prep( config_flags,u_2,a_u_2,v_2,a_v_2,w_2,a_w_2,a_ph_2,mu_2,a_mu_2,moist_2,a_moist_2,a_ru,a_rv,a_rw,a_ww,a_php,&
&a_alt,muu,a_muu,muv,a_muv,mub,mut,a_mut,a_al,a_cqu,a_cqv,a_cqw,msfu,msfv,msft,dnw,rdx,rdy,num_3d_m,ids,ide,jds,jde,kde,ims,&
&ime,jms,jme,kms,kme, &
        max(grid%i_start(ij)-1,ids),  &   ! compute out an extra row/col on halo
        min(grid%i_end(ij)+1,ide),    &
        max(grid%j_start(ij)-1,jds),  &
        min(grid%j_end(ij)+1,jde),k_start,k_end )
BENCH_END(comp118)

BENCH_START(exch114)
#ifdef DM_PARALLEL
lineno = __LINE__
#  include "HALO_3997.inc"
#endif
BENCH_END(exch114)

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = ((rk_order-rk_step+1)*1000) + 118
#include <a_debug_halo.h>
#endif

end do a_runge_kutta_loop

#include <bench_solve_em_a_end.h>

!----------------------------------------------
! FREE DYNAMIC MEMORY
!----------------------------------------------
#endif

! TBH:  turn this off once halo debugging is finished
#ifndef NO_HALO_FIX
  filecount = 9999
#include <a_debug_halo.h>
  call wrf_message ( 'DEBUG:  EARLY EXIT FOR HALO TESTS' )
  call wrf_shutdown
#endif

CALL module_4dvaropt_end
CALL wrf_debug ( 10 , 'DEBUG:  end solve_em_ad()' )

end subroutine solve_em_ad


