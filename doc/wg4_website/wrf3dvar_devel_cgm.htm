<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./wrf3dvar_devel_cgm_files/filelist.xml">
<title>MWR-734 Barker 2/3/03 </title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>syed rafat rizvi</o:Author>
  <o:LastAuthor>dmbarker</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2003-07-03T18:14:00Z</o:Created>
  <o:LastSaved>2003-07-03T18:14:00Z</o:LastSaved>
  <o:Pages>8</o:Pages>
  <o:Words>2934</o:Words>
  <o:Characters>16724</o:Characters>
  <o:Company>NCAR/UCAR</o:Company>
  <o:Lines>139</o:Lines>
  <o:Paragraphs>33</o:Paragraphs>
  <o:CharactersWithSpaces>20538</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DoNotHyphenateCaps/>
  <w:PunctuationKerning/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>3</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:DoNotShadeFormData/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:TimesNewRoman;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"TimesNewRoman\,Bold";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{mso-style-parent:Default;
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-parent:Default;
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-parent:Default;
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoBodyTextIndent3, li.MsoBodyTextIndent3, div.MsoBodyTextIndent3
	{mso-style-parent:Default;
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{mso-style-parent:Default;
	mso-style-next:Default;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Default, li.Default, div.Default
	{mso-style-name:Default;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"TimesNewRoman\,Bold";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:888759745;
	mso-list-type:hybrid;
	mso-list-template-ids:2077011502 1163683190 -1928939650 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"\(%1\)";
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level2
	{mso-level-number-format:roman-lower;
	mso-level-text:"\(%2\)";
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.5in;}
@list l1
	{mso-list-id:1770005853;
	mso-list-type:hybrid;
	mso-list-template-ids:651869954 67698703 67698713 923320032 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l1:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level3
	{mso-level-number-format:alpha-lower;
	mso-level-text:"\(%3\)";
	mso-level-tab-stop:120.0pt;
	mso-level-number-position:left;
	margin-left:120.0pt;
	text-indent:-21.0pt;}
@list l2
	{mso-list-id:1798526384;
	mso-list-type:hybrid;
	mso-list-template-ids:-1334518496 -1672558292 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l2:level1
	{mso-level-number-format:roman-lower;
	mso-level-text:"\(%1\)";
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in;text-justify-trim:punctuation'>

<div class=Section1>

<p class=Default align=center style='text-align:center'><b><span
style='font-size:14.0pt;mso-bidi-font-size:12.0pt'>Implementation of Conjugate
Gradient Minimization Procedure in the <o:p></o:p></span></b></p>

<p class=Default align=center style='text-align:center'><b><span
style='font-size:14.0pt;mso-bidi-font-size:12.0pt'>MM5-3DVAR data assimilation
analysis scheme<o:p></o:p></span></b></p>

<p class=Default><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt'>In MM5 three dimensional variational (MM5-3DVAR) data
assimilation the following cost function is minimized<span style="mso-spacerun:
yes">  </span>(Barker et al., 2003).<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt'>J(x) =<span style="mso-spacerun: yes">   </span><span
style="mso-spacerun: yes">    </span>J<sub>b</sub><span style="mso-spacerun:
yes">   </span>+<span style="mso-spacerun: yes">   </span>J<sub>o <o:p></o:p></sub></span></p>

<p class=Default style='text-align:justify;text-indent:6.0pt'><span
style='font-size:12.0pt'>or,<o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt'>J(x) = 1/2 [ (x – x<sub>b</sub> )<sup>T</sup> B<sup>–1</sup>
(x – x<sub>b</sub>)<span style="mso-spacerun: yes">  </span>+<span
style="mso-spacerun: yes">  </span>( y<sub>o</sub> - y)<sup>T</sup> (E + F ) <sup>–1</sup>
(y<sub>o </sub>– y) ]<span style='mso-tab-count:2'>                   </span><span
style="mso-spacerun: yes">       </span>(1)<span style='mso-tab-count:1'> </span><sub><o:p></o:p></sub></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>Where,<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>x<span
style="mso-spacerun: yes">  </span><span style='mso-tab-count:1'>        </span>-
analysis state vector,<span style='mso-tab-count:1'>   </span><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>x<sub>b</sub>
<span style='mso-tab-count:1'>        </span>-<span style="mso-spacerun: yes"> 
</span>Background vector,<span style='mso-tab-count:1'>   </span><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>y<sub>o</sub><span
style="mso-spacerun: yes">  </span><span style='mso-tab-count:1'>       </span>-<span
style="mso-spacerun: yes">  </span>observation vector,<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>y<span
style="mso-spacerun: yes">  </span>= Hx,<span style="mso-spacerun: yes"> 
</span>H is the operator transforming the grid-point field to the observation
locations. <o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>B<sup>–1</sup>
– background error covariance matrix,<span style='mso-tab-count:1'>        </span><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>(E+F)<sup>–1</sup>
- Observation error (combining both the instrument (E) and the
representativeness (F)) covariance matrix.<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><span
style="mso-spacerun: yes"> </span><span style='mso-tab-count:1'>           </span><span
style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style='mso-tab-count:1'>            </span>The
two terms in J namely,<span style="mso-spacerun: yes">  </span></span><span
style='font-size:12.0pt'>J<sub>b<span style="mso-spacerun: yes">  </span></sub><span
style="mso-spacerun: yes"> </span>and <sub><span style="mso-spacerun:
yes"> </span></sub>J<sub>b </sub></span><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes"> </span>are the contributions
of background and observations respectively towards the total cost function J.
In terms of control analysis variable v, defined as,<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes">  </span><span
style='mso-tab-count:1'>          </span>(</span><span style='font-size:12.0pt'>x
– x<sub>b</sub></span><span style='font-size:12.0pt;font-family:TimesNewRoman'>)
= U v , where<span style="mso-spacerun: yes">   </span>B = UU</span><sup><span
style='font-size:12.0pt'>T</span></sup><span style='font-size:12.0pt;
font-family:TimesNewRoman'> ,<span style='mso-tab-count:6'>                                                                    </span><span
style="mso-spacerun: yes">       </span>(2)<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'>the cost function J(v), can be written as,<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'>J(v)<span style="mso-spacerun: yes">  </span>=<span
style="mso-spacerun: yes">  </span></span><span style='font-size:12.0pt'>1/2 [
v <sup>T</sup> v<span style="mso-spacerun: yes">   </span>+<span
style="mso-spacerun: yes">  </span>(y<sub>o’</sub> – <b>H</b>Uv)<sup>T</sup> (E
+ F ) <sup>–1</sup> (y<sub>o’</sub> – <b>H</b>Uv) ]<span style='mso-tab-count:
4'>                                        </span><span style="mso-spacerun:
yes">       </span>(3)</span><span style='font-size:12.0pt;font-family:TimesNewRoman'><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'>Where, </span><span style='font-size:12.0pt'>y<sub>o’
</sub></span><span style='font-size:12.0pt;font-family:TimesNewRoman'><span
style="mso-spacerun: yes"> </span>= </span><span style='font-size:12.0pt'>y<sub>o
</sub></span><span style='font-size:12.0pt;font-family:TimesNewRoman'>– H(</span><span
style='font-size:12.0pt'>x<sub>b</sub></span><span style='font-size:12.0pt;
font-family:TimesNewRoman'> ), is the innovation vector and <b>H</b> is the
tangent linear operator corresponding to H-operator which is used in the
calculation of<span style="mso-spacerun: yes">  </span></span><span
style='font-size:12.0pt'>y<sub>o’. </sub></span><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=Default><span style='font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default><span style='font-size:12.0pt;font-family:TimesNewRoman'>The
minimization method involve choosing a staring point v<sub>o<span
style="mso-spacerun: yes">  </span></sub><span style="mso-spacerun:
yes"> </span>and generating d<sub>0</sub>,s<sub>0</sub>,v<sub>1</sub>,<o:p></o:p></span></p>

<p class=Default><span style='font-size:12.0pt;font-family:TimesNewRoman'>d<sub>1</sub>,s<sub>1</sub>,v<sub>2,<span
style="mso-spacerun: yes">  </span>-<span style="mso-spacerun: yes"> 
</span>-<span style="mso-spacerun: yes">  </span>-<span style="mso-spacerun:
yes">  </span>-<span style="mso-spacerun: yes">  </span>- </sub>, d<sub>i</sub>,s<sub>i</sub>,v<sub>i+1</sub>,
-<span style="mso-spacerun: yes">  </span>-<span style="mso-spacerun: yes"> 
</span>-<span style="mso-spacerun: yes">  </span>, where d<sub>i</sub> are the
descent directions, which should satisfy <o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes">              
</span>J(v<sub>i</sub> + sd<sub>i</sub>)<span style="mso-spacerun: yes"> 
</span>&lt;<span style="mso-spacerun: yes">  </span>J(v<sub>i</sub>)<span
style="mso-spacerun: yes">    </span>for<span style="mso-spacerun: yes"> 
</span>any small value of s &gt; 0,<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes"> </span>and s<sub>i</sub>
are the step lengths with<span style="mso-spacerun: yes">   </span>v<sub>i+1 </sub>=
v<sub>i</sub> + s<sub>i </sub>d<sub>i</sub></span><b><span style='font-size:
12.0pt'> .<o:p></o:p></span></b></p>

<p class=Default style='text-align:justify'><b><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt'>In practice, for large scales (dimension of the
control variable vector) problems, like in Meteorology, the {</span><span
style='font-size:12.0pt;font-family:TimesNewRoman'>d<sub>i</sub></span><span
style='font-size:12.0pt'>} are either chosen by a conjugate gradient method [2,
5] or a method based on the Quasi-Newton method [3]. Depending upon the search
direction vector </span><span style='font-size:12.0pt;font-family:TimesNewRoman'>d<sub>i
</sub></span><span style='font-size:12.0pt'><span style="mso-spacerun:
yes"> </span>the step size vector</span><span style='font-size:12.0pt;
font-family:TimesNewRoman'> s<sub>i</sub></span><span style='font-size:12.0pt'>,
is chosen so that J is suitably reduced satisfying mainly the following
criteria, which is generally known as<span style="mso-spacerun: yes"> 
</span>Wolfe conditions (Dennis et al., 1977).<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'><span
style='mso-tab-count:2'>                        </span><span
style="mso-spacerun: yes"> </span></span><span style='font-size:12.0pt;
font-family:TimesNewRoman'>J(v<sub>i</sub>)<span style="mso-spacerun: yes"> 
</span>+ </span><span style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:
TimesNewRoman;mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;
mso-symbol-font-family:Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:
Symbol'>a</span></span><span style='font-size:12.0pt;font-family:TimesNewRoman'>
s<sub>i</sub><span style="mso-spacerun: yes">  </span></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'>J(v<sub>i</sub>) , d<sub>i</sub></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'><span style="mso-spacerun:
yes">   </span></span><span style='font-size:12.0pt;font-family:Symbol;
mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:TimesNewRoman;
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>³</span></span><span style='font-size:
12.0pt;font-family:TimesNewRoman'><span style="mso-spacerun: yes">   </span>J(v<sub>i</sub>
+ s<sub>i</sub>d<sub>i</sub>)<span style='mso-tab-count:4'>                                             </span><span
style="mso-spacerun: yes">       </span>(4)<span style="mso-spacerun: yes"> 
</span><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='margin-left:.5in;text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'>J(v<sub>i</sub> + s<sub>i</sub>d<sub>i</sub>),
d<sub>i</sub></span><span style='font-size:12.0pt;font-family:Symbol;
mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:TimesNewRoman;
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span style='font-size:
12.0pt;font-family:TimesNewRoman'><span style="mso-spacerun: yes">   </span></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>³</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'><span style="mso-spacerun:
yes">  </span></span><span style='font-size:12.0pt;font-family:Symbol;
mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:TimesNewRoman;
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>b</span></span><span style='font-size:
12.0pt;font-family:TimesNewRoman'> s<sub>i </sub><span style="mso-spacerun:
yes"> </span></span><span style='font-size:12.0pt;font-family:Symbol;
mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:TimesNewRoman;
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>á</span></span><span style='font-size:
12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:
TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'>J(v<sub>i</sub>), d<sub>i</sub></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'><span style="mso-spacerun:
yes">   </span><span style='mso-tab-count:4'>                                               </span><span
style="mso-spacerun: yes">       </span>(5)<o:p></o:p></span></p>

<p class=Default style='margin-left:.5in;text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt'>Where,
0 </span><span style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:
"TimesNewRoman\,Bold";mso-hansi-font-family:"TimesNewRoman\,Bold";mso-char-type:
symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:symbol;
mso-symbol-font-family:Symbol'>&lt;</span></span><span style='font-size:12.0pt'>
</span><span style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:
TimesNewRoman;mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;
mso-symbol-font-family:Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:
Symbol'>a</span></span><span style='font-size:12.0pt;font-family:TimesNewRoman'>
</span><span style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:
"TimesNewRoman\,Bold";mso-hansi-font-family:"TimesNewRoman\,Bold";mso-char-type:
symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:symbol;
mso-symbol-font-family:Symbol'>&lt;</span></span><span style='font-size:12.0pt'>
</span><span style='font-size:12.0pt;font-family:TimesNewRoman'><span
style="mso-spacerun: yes"> </span>½,<span style="mso-spacerun: yes"> 
</span>and<span style="mso-spacerun: yes">   </span></span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>a</span></span><span
style='font-size:12.0pt'> </span><span style='font-size:12.0pt;font-family:
Symbol;mso-ascii-font-family:"TimesNewRoman\,Bold";mso-hansi-font-family:"TimesNewRoman\,Bold";
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>&lt;</span></span><span style='font-size:
12.0pt'><span style="mso-spacerun: yes">  </span></span><span style='font-size:
12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:
TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>b</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'> </span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:"TimesNewRoman\,Bold";
mso-hansi-font-family:"TimesNewRoman\,Bold";mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>&lt;</span></span><span
style='font-size:12.0pt'> </span><span style='font-size:12.0pt;font-family:
TimesNewRoman'>1.<o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:TimesNewRoman'>Thus we observe that the
cost of any large scale minimization problem is dominated by calls to the
program which evaluate J(v)<span style="mso-spacerun: yes">  </span>and<span
style="mso-spacerun: yes">  </span></span><span style='font-size:12.0pt;
font-family:Symbol;mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:
TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='font-size:12.0pt;font-family:TimesNewRoman'>J(v). The advantage of using
the Quasi-Newton’s methods lies with the fact that it generates a sequence of
descent direction d<sub>i</sub>, with the property that for sufficiently large
i, the Wolfe conditions are satisfied with “step” value s<sub>i</sub> = 1 </span><span
style='font-size:12.0pt'>(Dennis et al., 1977). </span><span style='font-size:
12.0pt;font-family:TimesNewRoman'>However, before starting the next iteration,
Wolfe conditions have to be checked to ensure the proper convergence. On the
other hand, the Conjugate Gradient Methods (Navon et al., 1987) compute the
descent direction by using the property of conjugate gradient and the “step” is
evaluated (in compliance with Wolfe conditions) by way of generating a special
sequence of orthogonal vectors as a part of the minimizing procedure. Thus
there is no need to store the past history of gradient information as well
checking the Wolfe conditions to ensure the proper convergence in the Conjugate
Gradient method. <o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:TimesNewRoman'>In the present MM5-3DVAR
cost function minimization procedure is based on the program originally
developed at Argonne National Laboratory in June 1983. It is basically a
modified version of the limited memory Quasi-Newton Method (QNM). To begin
with, it starts with the gradient of the cost function and assigns the initial
guess “step” value as 1. The cost function and the gradient are evaluated at
the new point and the validity of the Wolfe conditions is examined. If it
fails, the step is re-computed and the iteration procedure is repeated.
Subsequently the evaluation of search direction is based on the past gradient
history. Thus the availability of the number of past gradient vectors is one of
key factor deciding the accuracy of descent direction and thus controlling the
convergence. <o:p></o:p></span></p>

<p class=Default style='text-align:justify'><span style='font-size:12.0pt;
font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:TimesNewRoman'>Keeping in view the
dimension of the analysis vector, which is typically of the order of 10<sup>6</sup>,
it was visualized that it might be a good idea to attempt the Conjugate
Gradient Method (CGM) in the present 3DVAR system. This work was also motivated
by the fact that in case of incremental analysis, the analysis procedure works
in two loops, the outer and the inner loop. In the inner loop the cost function
remains nearly quadratic and so the CGM will definitely have an upper hand both
in terms of memory requirement and computation cost over the QNM. This will
also be due to the fact that in 3DVAR, generally we deal with the positive
semi-definite matrices, heavily loaded with its mass around its diagonal
(Lakshmivarahan et al., 2002). For such matrices, the Conjugate Gradient
methods are ideally suited for achieving convergence faster than any
traditional methods including the NQM (Chandra, 1978). Thus it was expected
that the cost of running inner loop might decrease considerably with CGM. This
may allow to run more number of outer loops, which gives more freedom for
regulating the inclusion of data in the subsequent inner loop analysis
procedure, like the typical scan mechanism of traditional (Cressman, 1959)
technique. Special observations, like TPWC, SSMI retrievals, radiance etc.
which represent a different scale and for which the H-operator is highly
nonlinear, might be assimilated in the 3DVAR system in a simple way. <o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=Default style='text-align:justify;text-indent:.5in'><span
style='font-size:12.0pt;font-family:"Times New Roman"'>Before going further
into the details of the procedure for implementing the CGM in the present
MM5-3DVAR, let us try to visualize the 3DVAR minimization problem with a
different angle as follows. Following the standard procedure for solving the
minimization problem, the first derivative </span><span style='font-size:12.0pt;
font-family:Symbol;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>¶</span></span><span
style='font-size:12.0pt;font-family:"Times New Roman"'>J/</span><span
style='font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>¶</span></span><span
style='font-size:12.0pt;font-family:"Times New Roman"'>v is equated to zero.
Thus using (3), it leads to the following equation.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>v<span
style="mso-spacerun: yes">  </span>- </span><span style='mso-bidi-font-size:
12.0pt'>U<sup>T</sup> <b>H</b><sup>T</sup> (E + F ) <sup>–1</sup> (y<sub>o’</sub>
– <b>H</b>Uv ) = 0<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>or,<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><span
style='mso-tab-count:1'>            </span>[ I<span style="mso-spacerun: yes"> 
</span>+<span style="mso-spacerun: yes">  </span></span><span style='mso-bidi-font-size:
12.0pt'>U<sup>T</sup> <b>H</b><sup>T</sup> (E + F ) <sup>–1 </sup></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><span
style="mso-spacerun: yes"> </span></span><b><span style='mso-bidi-font-size:
12.0pt'>H</span></b><span style='mso-bidi-font-size:12.0pt'>U ] v<span
style="mso-spacerun: yes">  </span>=<span style="mso-spacerun: yes">  </span>U<sup>T</sup>
<b>H</b><sup>T</sup> (E + F ) <sup>–1</sup> y<sub>o’</sub><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>or,<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun:
yes">                  </span>A v<span style="mso-spacerun: yes"> 
</span>=<span style="mso-spacerun: yes">  </span>B<span style='mso-tab-count:
9'>                                                                                                    </span><span
style="mso-spacerun: yes">       </span>(6)<span style="mso-spacerun: yes"> 
</span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Where,<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><span
style='mso-tab-count:1'>            </span>A =<span style="mso-spacerun: yes"> 
</span>[ I<span style="mso-spacerun: yes">  </span>+<span style="mso-spacerun:
yes">  </span></span><span style='mso-bidi-font-size:12.0pt'>U<sup>T</sup> <b>H</b><sup>T</sup>
(E + F ) <sup>–1 </sup></span><span style='mso-bidi-font-size:12.0pt;
font-family:TimesNewRoman'><span style="mso-spacerun: yes"> </span></span><b><span
style='mso-bidi-font-size:12.0pt'>H</span></b><span style='mso-bidi-font-size:
12.0pt'>U ]<span style="mso-spacerun: yes">   </span>and<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style='mso-tab-count:1'>            </span>B
=<span style="mso-spacerun: yes">  </span>U<sup>T</sup> <b>H</b><sup>T</sup> (E
+ F ) <sup>–1</sup> y<sub>o’</sub><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Thus, we see that the 3DVAR cost function
minimization problem has finally converged to solving a set of non-linear
equations for the control variable v.<span style="mso-spacerun: yes"> 
</span>Once, v is determined using (2), the analysis state vector x can easily
be obtained. Since the degree of freedom for the control variable (number of
grid point times the number of independent variables) is very large, direct
solution is absolutely prohibitive. One practical solution to this problem is
to approximate the solution in a sequence by employing a double iteration
technique as follows.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Set x = x</span><sub><span style='mso-bidi-font-size:
12.0pt;font-family:Times;mso-hansi-font-family:"Times New Roman"'>b ,<span
style="mso-spacerun: yes">   </span></span></sub><span style='mso-bidi-font-size:
12.0pt'>so that v = 0<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Start of outer iteration <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.25in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes">      
</span>x</span><span style="mso-spacerun: yes">   </span>=<span
style="mso-spacerun: yes">  </span><span style='mso-bidi-font-size:12.0pt'>x</span><sub><span
style='mso-bidi-font-size:12.0pt;font-family:Times;mso-hansi-font-family:"Times New Roman"'>b</span></sub>
+ U v <span style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Start of inner iteration<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:.5in;
tab-stops:.5in'><span style='mso-bidi-font-size:12.0pt'>1. Compute B,<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:.5in;
tab-stops:.5in'><span style='mso-bidi-font-size:12.0pt'>2. Solve A &#948; =
B<span style="mso-spacerun: yes">   </span>for &#948;, using any standard
method<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:.5in;
tab-stops:.5in'><span style='mso-bidi-font-size:12.0pt'>3. Update </span>v<span
style="mso-spacerun: yes">  </span>= v + &#948;</p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-tab-count:1'>            </span>End of inner loop</p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>End of outer loop<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Here one observes that the design of the
analysis control variable is such that the matrix A, is a symmetric positive
definite matrix with its mass mainly concentrated around its diagonal.
Therefore as mentioned before, the standard CGM will be the most ideally suited
method for solving the equation A &#948; = B, involved in the inner loop of the
above procedure and the same has been coded in the present MM5-3DVAR. The CG
algorithm implemented in the MM5-3DVAR data assimilation system is based on
(Chandra, 1978), and the same works as follows. <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Set, v<sub>0<span style="mso-spacerun: yes"> 
</span>= 0, </sub><span style="mso-spacerun: yes"> </span>r<sub>0</sub><span
style="mso-spacerun: yes">  </span>= - B,<span style="mso-spacerun: yes"> 
</span>p<sub>1 </sub>= - r<sub>0<span style="mso-spacerun: yes">  </span></sub>and
subsequently for k </span><span style='mso-bidi-font-size:12.0pt;font-family:
Symbol;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman";
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>³</span></span><span style='mso-bidi-font-size:
12.0pt'> 1, iterate the following sequence till the convergence is
achieved.<span style="mso-spacerun: yes">  </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>f<sub>k</sub><span style="mso-spacerun:
yes">      </span>=<span style="mso-spacerun: yes">   </span>A p<sub>k</sub><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>s<span style="mso-spacerun: yes">      
</span>=<span style="mso-spacerun: yes">   </span></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k-1</sub> , r<sub>k-1</sub></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> / </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>p<sub>k</sub> , f<sub>k</sub></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>v<sub>k</sub><span
style="mso-spacerun: yes">     </span>=<span style="mso-spacerun: yes">  
</span>v<sub>k-1</sub><span style="mso-spacerun: yes">  </span>+ s </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>*</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> p<sub>k</sub><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k</sub><span
style="mso-spacerun: yes">     </span>=<span style="mso-spacerun: yes">   
</span>r<sub>k-1</sub><span style="mso-spacerun: yes">  </span>+ s </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>*</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> f<sub>k<span
style='mso-tab-count:1'>      </span></sub></span><span style='mso-bidi-font-size:
12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>p<sub>k+1</sub>
=<span style="mso-spacerun: yes">  </span>- r<sub>k</sub><span
style="mso-spacerun: yes">  </span>+<span style="mso-spacerun: yes">  </span>[</span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k</sub> , r<sub>k</sub></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> / </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k-1 </sub>, r<sub>k-1</sub></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> ] </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>*</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> p<sub>k</sub></span><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes">    </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Here it can be seen that there are mainly
three work-aarays (f, p &amp; g), each of cv_size dimension and each iterations
involve the computation of two dot products and a matrix (A) operation on a
cv_size vector (v). The importance of these arrays lies with the fact that<span
style="mso-spacerun: yes">  </span>at any stage k,<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k, - </sub></span><span
style='mso-bidi-font-size:12.0pt'>is the residual vector and so the size of </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>á</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>r<sub>k</sub> , r<sub>k</sub></span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'> can be monitored
to end the minimization procedure to exit the inner loop. It is a set of
orthogonal vectors representing the conjugate gradient directions.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>p<sub>k</sub> – is
the search direction, and the same is updated in the conjugate gradient
direction. This ensures that in the subsequent iterations, no search is made in
the same direction in which it has already done in all its past (k-1)
iterations. <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>s – is the optimum
“step”<span style="mso-spacerun: yes">  </span>in the search direction<span
style="mso-spacerun: yes">  </span>p<sub>k</sub><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>f<sub>k</sub> –
facilitates the generation of the sequence of vectors r<sub>k</sub></span><span
style='mso-bidi-font-size:12.0pt'> , </span><span style='mso-bidi-font-size:
12.0pt;font-family:TimesNewRoman'>p<sub>k+1</sub></span><span style='mso-bidi-font-size:
12.0pt'> and in updating the control variable </span><span style='mso-bidi-font-size:
12.0pt;font-family:TimesNewRoman'>v<sub>k </sub>.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>The above CGM algorithm has been coded
(“DA_CG_Minimise.inc”) and it resides in the “DA_Minimisation” directory. This
subroutine can be invoked via a parameter namelist (Record 12) named,
“DA_Minimisation_Option” by setting its value as “2”. While setting its value
as “1”, the current QNM minimization procedure is activated. Accordingly, the
main program (“da_solve_v3d.inc”) activating the inner loop procedure has also
been modified. To support, “DA_CG_Minimise.inc”, there is one more program
which is added to the “DA_Minimise” directory, named as
“DA_Calculate_GradY.inc”. When this subroutine called from “DA_CG_Minimise.inc”
program, it invokes a sequence of new procedures like
“DA_Calculate_GradY_Synop.inc”, “DA_Calculate_GradY_Sound.inc” etc. in the
respective data-type directory, including the Buoy and Profiler data-types,
which has been recently added in the 3DVAR system. The purpose of these
programs is to calculate the conjugate gradient for the respective data-type in
which they are residing. <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Although, the CGM algorithm doesn’t need
evaluation of the cost function and its gradient during the minimization procedure
(inner loop), for diagnostic purposes, a program named “DA_Calculate_J_CG.inc”
has been added in the “DA_Minimisation” directory to calculate the cost
function and its gradient during each iteration of the CGM. If desired, the
same could be activated through the parameter namelist (Record 10) named,
“DA_IN_CG_COST_FUNCTION_NEEDED” by setting its value as .TRUE. <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>In the present 3DVAR, the constant “EPS” in
the parameter namelist, basically controls the termination of the minimization
procedure in the inner loop by checking the reduction of the cost function
gradient. To allow a different cut off limit in various outer loop iterations,
the parameter “EPS” has been made declared as an array to allow different
values for “EPS”. Foe each outer iteration, the different “EPS” values may be
assigned via the parameter name list file (Record 6). <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Finally, the CGM has been successfully
integrated with the present MM5-3DVAR data assimilation scheme and its correct
implementation has been verified with different angles. The results are
compared with the corresponding parallel run made with the present QNM scheme
as well. The important observations are as follows.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo3;tab-stops:list .5in'><![if !supportLists]><span
style='font-family:TimesNewRoman'>(a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><![endif]>The convergence (reduction in the cost function as well
as its gradient) is achieved must faster in CGM as compared to QNM. It is
observed that the reduction in the cost function achieved in about 15-20
CGM-iterations is equivalent to about more than 50 QNM-iterations and the same
is true for the gradient as well. However, finally both these methods converge
to the same cost function value. <span style='font-family:TimesNewRoman'><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo3;tab-stops:list .5in'><![if !supportLists]><span
style='font-family:TimesNewRoman'>(b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><![endif]>The memory requirement for CGM is much less than in
QNM. <span style='font-family:TimesNewRoman'>The present 3DVAR scheme makes use
of the past four (NSAVE = 4) gradients to fix up the new line search direction.
To implement this, the program (“da_lmdir.inc”) needs ten work arrays each of
size, same as the control variable dimension (cv_size). In addition to this the
subroutine (“da_vd05ad.inc”), which basically updates the control variable
increment after verifying the Wolfe conditions, needs additional two work
arrays of equivalent size. Here important point to note is that the logic of
the program is such that these arrays have to be saved all the time, even if
this program is not active. On the other hand CGM needs just three work arrays
of equivalent size.<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo3;tab-stops:list .5in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'><span
style="mso-spacerun: yes"> </span>The number of floating point operation
performed in QNM is also very large as compared to CGM. There is almost 50%
reduction in the CPU cost while running CGM as compared to QNM. There are
mainly two reasons. Firstly, since the convergence is slower in QNM and so it
needs more number of iterations as compared to CGM to achieve the same
minimization target. Secondly, in every iteration, QNM does some additional
computations and the same is summarized as follows:</span><span
style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.25in;text-align:justify;tab-stops:.5in'><span
style='font-family:TimesNewRoman'><span style="mso-spacerun: yes">      </span></span><span
style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:1.25in;text-align:justify;text-indent:
-.5in;mso-list:l0 level2 lfo3;tab-stops:list 1.25in'><![if !supportLists]><span
style='font-family:TimesNewRoman'>(i)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'>In each
iteration QNM needs the computation of the cost function </span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>J(v)<span
style="mso-spacerun: yes">  </span></span><span style='font-family:TimesNewRoman'>and
its gradient </span><span style='mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-ascii-font-family:TimesNewRoman;mso-hansi-font-family:TimesNewRoman;
mso-char-type:symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:
symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span style='mso-bidi-font-size:
12.0pt;font-family:TimesNewRoman'>J(v). Equivalently, the CGM computes Av and
the same needs less number of computations. One call for computing J and </span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>J is equivalent to
calling “vtox tranform”, “xtoy tranform”, “computing residuals”, “computing J
and applying (E+F)<sup>-1</sup> to y-vector”, “adjoint of xtoy transform” and
finally the “adjoint of vtox transform” for the final computation of “</span><span
style='mso-bidi-font-size:12.0pt;font-family:Symbol;mso-ascii-font-family:TimesNewRoman;
mso-hansi-font-family:TimesNewRoman;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>Ñ</span></span><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'>J”. While the
operation “Av” in CGM is equivalent to “vtox tranform”, “xtoy tranform”,
“applying (E+F)<sup>-1</sup> on y-vector”, “adjoint of xtoy transform” and
“adjoint of vtox tranform”. Thus we see that in each iteration QNM, performs
two additional operations as compared to CGM.</span><span style='font-family:
TimesNewRoman'><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.75in;text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt;font-family:TimesNewRoman'><span
style="mso-spacerun: yes">  </span></span><span style='font-family:TimesNewRoman'><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:1.25in;text-align:justify;text-indent:
-.5in;mso-list:l0 level2 lfo3;tab-stops:list 1.25in'><![if !supportLists]><span
style='font-family:TimesNewRoman'>(ii)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'>In QNM, each
call for line search direction program computes ten dot products for the
cv_size-dimensined vectors.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='font-family:TimesNewRoman'><span style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:1.25in;text-align:justify;text-indent:
-.5in;mso-list:l0 level2 lfo3;tab-stops:list 1.25in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(iii)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'>The Wolfe
condition criteria needs two dot product computations of cv_size-dimesioned
vectors.</span><span style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:1.25in;text-align:justify;text-indent:
-.5in;mso-list:l0 level2 lfo3;tab-stops:list 1.25in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(iv)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'>If the Wolfe
condition is not satisfied with the initial guess value of the “step”, it needs
to be recomputed. Due to change in the “step” value, the cost function and its
gradient needs to be computed again. This is equivalent to having an additional
iteration. Since in almost 10% of the cases the Wolfe condition fails in NQM,
it makes straightway increase the computation cost by 10%.</span><span
style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:1.25in;text-align:justify;text-indent:
-.5in;mso-list:l0 level2 lfo3;tab-stops:list 1.25in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(v)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-family:TimesNewRoman'>In case of CGM,
the computation of descent direction and the step size is computed using just
two dot product operations of cv_size-dimensioned vectors and there is no need
to check the Wolfe condition criteria.</span><span style='mso-bidi-font-size:
12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='font-family:TimesNewRoman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='font-family:TimesNewRoman'>Thus we see that apart from saving the
computations listed under item (i) above (which will depend upon on the number
of data points used), apparently there are about 10 additional calls for the
dot product computation in QNM as compared to CGM. Slower convergence rate thus
needing more number of iterations combined with 10% additional number of
iterations required due to failure of Wolfe conditions in QNM makes forces it
to make about 50% extra computations as compared to CGM. </span><span
style='mso-bidi-font-size:12.0pt'>Following table gives an idea about the CPU
timings of 3DVAR run on “blackforest” using only one processor.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='font-family:TimesNewRoman'><span style="mso-spacerun: yes">     </span></span><span
style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>

<p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Table: “blackforest” CPU timings requirement
for MM5-3DVAR<o:p></o:p></span></p>

<p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><b><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<table border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;
 border:none;mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=337 valign=top style='width:252.9pt;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader style='text-align:justify;tab-stops:.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><span
  style='mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>
  </td>
  <td width=132 valign=top style='width:99.0pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>QNM <o:p></o:p></span></p>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>(Seconds)<o:p></o:p></span></p>
  </td>
  <td width=121 valign=top style='width:90.9pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>CGM<span style="mso-spacerun: yes"> 
  </span><o:p></o:p></span></p>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>(Seconds)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=337 valign=top style='width:252.9pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>One outer (200 inner iterations)<o:p></o:p></span></p>
  </td>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>295<o:p></o:p></span></p>
  </td>
  <td width=121 valign=top style='width:90.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>155<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=337 valign=top style='width:252.9pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>Three outer iterations <o:p></o:p></span></p>
  </td>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>325<o:p></o:p></span></p>
  </td>
  <td width=121 valign=top style='width:90.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>188<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=337 valign=top style='width:252.9pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>One outer iteration (200 inner iterations)
  with quality check on<o:p></o:p></span></p>
  </td>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>326<o:p></o:p></span></p>
  </td>
  <td width=121 valign=top style='width:90.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>169<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=337 valign=top style='width:252.9pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>Three outer iterations with quality check
  on<o:p></o:p></span></p>
  </td>
  <td width=132 valign=top style='width:99.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>425<o:p></o:p></span></p>
  </td>
  <td width=121 valign=top style='width:90.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><span
  style='mso-bidi-font-size:12.0pt'>263<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Apart from this there are couple of
observations, which are worth mentioning at this stage and the same are
discussed below.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style='mso-tab-count:1'>            </span>Looking
into the CPU timings, one observes that when quality check was on the CPU
requirement is more. However, generally is expected that less data points
(which is case when quality control check on) should need less calculations but
here it is just opposite. This is due to the fact that for all inner iteration,
calculations are done for all the data points irrespective of whether it is
good or bad, except that for bad data the calculation is done with residual
value as zero. To avoid this the logic should be such that once the data is
identified, about which the information is available before entering into the
inner loop, there is no need to perform calculations on such data points within
the inner loop. <o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes">     </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>It was noticed that when “DA_Check_Max_IV”
check is on, which basically filters the data points which do not pass the
maximum innovation check, the rejections of data in the second outer loop is
reduced by about 30%. It is mainly the temperature and pressure data passed the
quality check and entered into the system in the subsequent outer iterations.
It was also noticed that without this check, when we allow all the data to
enter into the system, the cost function is about 16-times higher, though the
rejected data points, hardly contribute to less than 1%. Almost all the “satob”
winds data points are accepted in the system. This is due to the fact that the
obs-error for “satob” is highest (4.5 mps) as compared to any other winds data
type. This suggests that 3DVAR system needs tuning of its obs-error statistics.<span
style="mso-spacerun: yes">   </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>While running 3DVAR code on “blackforest”
(using just one processor) and “walnut” machines, the output one gets is very
different. After careful examination of the two log files, I learnt that the
parameter “DA_VERT_VAR1” and DA_VERT_VAR2”, which controls the number of EOF’s
to be used for “psi” and “chi” control variable, which were set to 99.0,
allowed one less number of EOF’s on the “blackforest” machine as compared to
“walnut”.<span style="mso-spacerun: yes">  </span>It computed 9 and 10 on
“blackforest” while on “walnut” these numbers were 10 and 11 respectively. It
was realized that it might be due to this reason, the two outputs are not
matching. Thus, on “blackforest” I experimented with this parameter value and
finally discovered that “99.116” and “99.162” were giving me the same number of
EOF’s for “psi” and “chi” variables as I got on “walnut” by assigning
“DA_VERT_VAR1” and DA_VERT_VAR2” parameter as “99.0”. Thus, the code was run
again with this new set of values to ensure that on “blackforest” machine the
same number of EOF’s are taken as it was on “walnut” machine run. The two
outputs were still not matching. Even the cost function started deviating just
after the first iteration itself and by the time iteration number reached to
100, the cost function out by about 100 units.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><span style="mso-spacerun: yes"> </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;text-indent:.5in;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>While implementing, CGM in the present
MM5-3DAVR, some of the shortfalls of the present 3DVAR code were identified and
the same has been corrected. These are listed as follows.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l2 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(i)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='mso-bidi-font-size:12.0pt'>An additional
variable “xhat”, has been introduced which keeps track of the increment control
variable. This was desired to properly activate the outer loop in the present
code. Otherwise, the outer loop was not functioning properly.<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l2 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(ii)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='mso-bidi-font-size:12.0pt'>The data was
flagged as bad, if it failed the innovation vector check in the first iteration
and thus depriving its chance to participate in the subsequent outer
iterations. Since the subsequent outer iteration works with an updated new
background, it was decided to give an equal opportunity to all the observations
in each outer iterations and thus the original data flag is always retained.
However, a diagnostics, if desired, is always generated for all the
observations failing the “quality test” if it fails in any iteration.<o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l2 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(iii)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><![endif]><span style='mso-bidi-font-size:12.0pt'>The detailed
analysis diagnostic was written towards the end. This<span style="mso-spacerun:
yes">  </span>procedure has been put within the outer loop. The idea is to
monitor the failed observations and the innovation error statistics
corresponding to all the outer iterations. This will help in tuning the various
statistical parameters used in 3DVAR, mainly the error statistics.<span
style="mso-spacerun: yes">      </span><o:p></o:p></span></p>

<p class=MsoHeader style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l2 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span
style='mso-bidi-font-size:12.0pt'>(iv)<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]><span style='mso-bidi-font-size:12.0pt'><span
style="mso-spacerun: yes"> </span>The recursive filter operator was implemented
in the reverse order along with its adjoint. The same has been corrected.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader align=center style='text-align:center;tab-stops:.5in'><b><span
style='font-size:14.0pt;mso-bidi-font-size:12.0pt'>References<o:p></o:p></span></b></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Cressmen, G. P. (1959): An Operational
objective analysis system.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><i><span
style='mso-bidi-font-size:12.0pt'>Mon. Wea. Rev.</span></i><span
style='mso-bidi-font-size:12.0pt'>, <b>87</b>, pp. 367-374.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Chandra, R. (1978): Conjugate Gradient
Methods for partial Differential Equations.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Research report 129, January 1978, Department
of Computer Science, Yale University.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Barker D. M., W. Huang, Y.-R. Guo and Q. N.
Xio (2003): A three dimensional Variational (2DVAR) data Assimilation Syatem with
MM5: Implementation and Initial results. <i>Mon. Wea. Rev.,</i> Submitted<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Dennis J. E. and J. J. More (1977): Quasi
Newton Methods, Motivations and Theory, SIAM Review Vol. <b>19</b>, pp. 46-89,
Jan. 1977.<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Lakshmivarahan, S. Yuki Honda, J. M. Lewis
(2002): The second order approximation for the 3DVAR cost function –
Application to analysis/forecast. School of Computer Science, University of
Oklahoma, Norman, OK<o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'>Navon, I. M. and Legler, David M (1987):
Conjugate Gradient Methods for Large-Scale Minimization in Meteorology. <i>Mon.
Wea. Rev</i>,<b>115</b>, pp 1479-1502, August, 1987.<span style="mso-spacerun:
yes">  </span><o:p></o:p></span></p>

<p class=MsoHeader style='text-align:justify;tab-stops:.5in'><span
style='mso-bidi-font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

</div>

</body>

</html>
