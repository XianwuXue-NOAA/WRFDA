SUBROUTINE da_write_obs( ob, iv, re )
!----------------------------------------------------------------------------   
!  History:
!  Purpose: Writes out components of iv=O-B structure.
!  Additions:
!           07/08/2003 - Profiler and Buoy Obs             Syed  RH  Rizvi
!           03/04/2005 - AMV's from Geostationary and      Syed  RH  Rizvi
!                        Polar orbiting satellite are
!                        seperated & used as profile
!

!----------------------------------------------------------------------------   
   IMPLICIT NONE
   type (y_type), intent(in)     :: ob      ! Observation structure.
   TYPE (ob_type), INTENT(IN)    :: iv      ! O-B structure.
   type (y_type), intent(inout)  :: re      ! residual vector.
      
   integer                       :: n, k
   real                          :: f1, f2, f3, f4, f5
   logical, external             :: wrf_dm_on_monitor

#ifdef DM_PARALLEL
   INCLUDE 'mpif.h'
   integer			 :: myrank,all_size,root,ierr,stat,isum,iccn,lmax,length,ilev
   integer			 :: i,j,nu
   real                          :: lon_tmp
   integer,pointer               :: icc(:),icn(:),icn5(:),lcn(:),iilev(:),icnt(:),ict(:)
   character(LEN=5),pointer      :: iv_glo_id(:) 
   integer,pointer               :: iv_glo_lev(:)
   real,pointer                  :: iv_glo_lat(:),iv_glo_lon(:),lon(:)
   integer,pointer               :: iv_glo_u_qc(:,:),iv_glo_v_qc(:,:),iv_glo_t_qc(:,:),iv_glo_p_qc(:,:),iv_glo_q_qc(:,:)
   real,pointer                  :: iv_glo_u_inv(:,:),iv_glo_v_inv(:,:),iv_glo_t_inv(:,:),iv_glo_p_inv(:,:),iv_glo_q_inv(:,:), &
                                    iv_glo_u_err(:,:),iv_glo_v_err(:,:),iv_glo_t_err(:,:),iv_glo_p_err(:,:),iv_glo_q_err(:,:), &
                                    ob_glo_u(:,:),ob_glo_v(:,:),ob_glo_t(:,:),ob_glo_p(:,:),ob_glo_q(:,:), &
                                    re_glo_u(:,:),re_glo_v(:,:),re_glo_t(:,:),re_glo_p(:,:),re_glo_q(:,:),miss_glo_r(:,:)
   integer,pointer               :: iv_glo_speed_qc(:,:),iv_glo_tpw_qc(:,:) 
   real,pointer                  :: ob_glo_speed(:,:),ob_glo_tpw(:,:), &
                                    iv_glo_speed_inv(:,:),iv_glo_tpw_inv(:,:),iv_glo_speed_err(:,:),iv_glo_tpw_err(:,:),&
                                    re_glo_speed(:,:),re_glo_tpw(:,:)
   integer,pointer               :: iv_glo_tb19h_qc(:,:),iv_glo_tb19v_qc(:,:),iv_glo_tb22v_qc(:,:),iv_glo_tb37h_qc(:,:)
   real,pointer                  :: ob_glo_tb19h(:,:),ob_glo_tb19v(:,:),ob_glo_tb22v(:,:),ob_glo_tb37h(:,:), &
                                    ob_glo_tb37v(:,:),ob_glo_tb85h(:,:),ob_glo_tb85v(:,:), &
                                    iv_glo_tb19h_inv(:,:),iv_glo_tb19v_inv(:,:),iv_glo_tb22v_inv(:,:),iv_glo_tb37h_inv(:,:), &
                                    iv_glo_tb37v_inv(:,:),iv_glo_tb85h_inv(:,:),iv_glo_tb85v_inv(:,:), &
                                    iv_glo_tb19h_err(:,:),iv_glo_tb19v_err(:,:),iv_glo_tb22v_err(:,:),iv_glo_tb37h_err(:,:), &
                                    iv_glo_tb37v_err(:,:),iv_glo_tb85h_err(:,:),iv_glo_tb85v_err(:,:), &
                                    re_glo_tb19h(:,:),re_glo_tb19v(:,:),re_glo_tb22v(:,:),re_glo_tb37h(:,:), &
                                    re_glo_tb37v(:,:),re_glo_tb85h(:,:),re_glo_tb85v(:,:),& 
                                    iv_glo_tb37v_qc(:,:),iv_glo_tb85h_qc(:,:),iv_glo_tb85v_qc(:,:)
   integer,pointer               :: iv_loc_u_qc(:,:),iv_loc_v_qc(:,:),iv_loc_t_qc(:,:),iv_loc_p_qc(:,:),iv_loc_q_qc(:,:)
   real,pointer                  :: ob_loc(:,:)
   integer,pointer               :: ob_loc_int(:,:)
   real,pointer                  :: ob_glo_slp(:),iv_glo_slp_inv(:),iv_glo_slp_err(:),re_glo_slp(:)
   integer,pointer               :: iv_glo_slp_qc(:)

   call MPI_COMM_RANK( MPI_COMM_WORLD, myrank, ierr )
   call MPI_COMM_SIZE( MPI_COMM_WORLD, all_size, ierr )

   root = 0

   allocate(icc(1:all_size),STAT=stat)
   allocate(icn(1:all_size),STAT=stat)
   allocate(icn5(1:all_size),STAT=stat)

   icc = 0
   icn = 0
   icn5 = 0

#endif

!  [1] Transfer surface obs:

#ifdef DM_PARALLEL

  IF ( iv % num_synop_glo > 0 ) THEN

   iccn = iv%num_synop

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size 
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_synop_glo),STAT=stat)
   allocate(ict (0:iv % num_synop_glo),STAT=stat)
   allocate(lon (1:iv % num_synop_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_synop_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_synop_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_synop_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( ob_glo_q(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_p_inv(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_p_qc(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_p_err(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( re_glo_p(1:1,1:iv % num_synop_glo)   , STAT=stat )
   allocate( re_glo_q(1:1,1:iv % num_synop_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   ob_glo_q = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_p_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_p_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_p_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_p = 0.
   re_glo_q = 0.

   call MPI_GATHERV(iv%synop%info%id , iv%num_synop*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%info%lat, iv%num_synop, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%info%lon, iv%num_synop, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%synop%u       , iv%num_synop, MPI_REAL    , ob_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%synop%v       , iv%num_synop, MPI_REAL    , ob_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%synop%t       , iv%num_synop, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%synop%p       , iv%num_synop, MPI_REAL    , ob_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%synop%q       , iv%num_synop, MPI_REAL    , ob_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%synop%u%inv   , iv%num_synop, MPI_REAL    , iv_glo_u_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%v%inv   , iv%num_synop, MPI_REAL    , iv_glo_v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%t%inv   , iv%num_synop, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%p%inv   , iv%num_synop, MPI_REAL    , iv_glo_p_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%q%inv   , iv%num_synop, MPI_REAL    , iv_glo_q_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%synop%u%qc    , iv%num_synop, MPI_INTEGER  , iv_glo_u_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%v%qc    , iv%num_synop, MPI_INTEGER  , iv_glo_v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%t%qc    , iv%num_synop, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%p%qc    , iv%num_synop, MPI_INTEGER  , iv_glo_p_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%q%qc    , iv%num_synop, MPI_INTEGER  , iv_glo_q_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%synop%u%error , iv%num_synop, MPI_REAL    , iv_glo_u_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%v%error , iv%num_synop, MPI_REAL    , iv_glo_v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%t%error , iv%num_synop, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%p%error , iv%num_synop, MPI_REAL    , iv_glo_p_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%synop%q%error , iv%num_synop, MPI_REAL    , iv_glo_q_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%synop%u       , iv%num_synop, MPI_REAL    , re_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%synop%v       , iv%num_synop, MPI_REAL    , re_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%synop%t       , iv%num_synop, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%synop%p       , iv%num_synop, MPI_REAL    , re_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%synop%q       , iv%num_synop, MPI_REAL    , re_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0
       lon = iv_glo_lon
       do i = 1, iv % num_synop_glo
         do j = i+1 , iv % num_synop_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_synop_glo
         do j = 1, iv % num_synop_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 110
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 110
               else
                 goto 120
               endif
             endif
           endif
  120    enddo
  110  enddo 

       nu = 0
       DO i = 1, iv % num_synop_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

       write(omb_unit,'(a5,i8)')'synop', nu 
        i= 0
        DO j = 1, iv % num_synop_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs Pressure
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A u
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n), &! O, O-B, O-A v
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n), &! O, O-B, O-A t
                         ob_glo_p(1,n), iv_glo_p_inv(1,n), iv_glo_p_qc(1,n), iv_glo_p_err(1,n), re_glo_p(1,n), &! O, O-B, O-A p
                         ob_glo_q(1,n), iv_glo_q_inv(1,n), iv_glo_q_qc(1,n), iv_glo_q_err(1,n), re_glo_q(1,n)   ! O, O-B, O-A q
          endif
        END DO

    end if

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_p_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_p_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_p_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_p     )
   deallocate( re_glo_q     )

  ENDIF

#else
 if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_synop > 0 ) THEN
      write(omb_unit,'(a,i8)')'synop', iv % num_synop
      DO n = 1, iv % num_synop  
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % synop(n) % info % id, &  ! Station
                         iv % synop(n) % info % lat, &       ! Latitude
                         iv % synop(n) % info % lon, &       ! Longitude
                         ob % synop(n) % p, &                ! Obs Pressure
                         ob%synop(n)%u, iv%synop(n)%u, re%synop(n)%u, &! O, O-B, O-A u
                         ob%synop(n)%v, iv%synop(n)%v, re%synop(n)%v, &! O, O-B, O-A v
                         ob%synop(n)%t, iv%synop(n)%t, re%synop(n)%t, &! O, O-B, O-A t
                         ob%synop(n)%p, iv%synop(n)%p, re%synop(n)%p, &! O, O-B, O-A p
                         ob%synop(n)%q, iv%synop(n)%q, re%synop(n)%q   ! O, O-B, O-A q
      END DO
   ENDIF
 end if
#endif

!  [2] Transfer metar obs:
#ifdef DM_PARALLEL

  IF ( iv % num_metar_glo > 0 ) THEN

   iccn = iv%num_metar

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_metar_glo),STAT=stat)
   allocate(ict (0:iv % num_metar_glo),STAT=stat)
   allocate(lon (1:iv % num_metar_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_metar_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_metar_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_metar_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( ob_glo_q(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_p_inv(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_p_qc(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_p_err(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( re_glo_p(1:1,1:iv % num_metar_glo)   , STAT=stat )
   allocate( re_glo_q(1:1,1:iv % num_metar_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   ob_glo_q = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_p_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_p_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_p_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_p = 0.
   re_glo_q = 0.

   call MPI_GATHERV(iv%metar%info%id , iv%num_metar*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%info%lat, iv%num_metar, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%info%lon, iv%num_metar, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%metar%u       , iv%num_metar, MPI_REAL    , ob_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%metar%v       , iv%num_metar, MPI_REAL    , ob_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%metar%t       , iv%num_metar, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%metar%p       , iv%num_metar, MPI_REAL    , ob_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%metar%q       , iv%num_metar, MPI_REAL    , ob_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%metar%u%inv   , iv%num_metar, MPI_REAL    , iv_glo_u_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%v%inv   , iv%num_metar, MPI_REAL    , iv_glo_v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%t%inv   , iv%num_metar, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%p%inv   , iv%num_metar, MPI_REAL    , iv_glo_p_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%q%inv   , iv%num_metar, MPI_REAL    , iv_glo_q_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%metar%u%qc    , iv%num_metar, MPI_INTEGER  , iv_glo_u_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%v%qc    , iv%num_metar, MPI_INTEGER  , iv_glo_v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%t%qc    , iv%num_metar, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%p%qc    , iv%num_metar, MPI_INTEGER  , iv_glo_p_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%q%qc    , iv%num_metar, MPI_INTEGER  , iv_glo_q_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%metar%u%error , iv%num_metar, MPI_REAL    , iv_glo_u_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%v%error , iv%num_metar, MPI_REAL    , iv_glo_v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%t%error , iv%num_metar, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%p%error , iv%num_metar, MPI_REAL    , iv_glo_p_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%metar%q%error , iv%num_metar, MPI_REAL    , iv_glo_q_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%metar%u       , iv%num_metar, MPI_REAL    , re_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%metar%v       , iv%num_metar, MPI_REAL    , re_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%metar%t       , iv%num_metar, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%metar%p       , iv%num_metar, MPI_REAL    , re_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%metar%q       , iv%num_metar, MPI_REAL    , re_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0
       lon = iv_glo_lon
       do i = 1, iv % num_metar_glo
         do j = i+1 , iv % num_metar_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
                 if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                   nu = nu + 1
                   icnt(i) = -999 
                 endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_metar_glo
         do j = 1, iv % num_metar_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 111
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 111
               else
                 goto 121
               endif
             endif
           endif
  121    enddo
  111  enddo 
       
       nu = 0
       DO i = 1, iv % num_metar_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

        write(omb_unit,'(a5,i8)')'metar', nu
        i= 0
        DO j = 1, iv % num_metar_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs Pressure
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A u
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n), &! O, O-B, O-A v
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n), &! O, O-B, O-A t
                         ob_glo_p(1,n), iv_glo_p_inv(1,n), iv_glo_p_qc(1,n), iv_glo_p_err(1,n), re_glo_p(1,n), &! O, O-B, O-A p
                         ob_glo_q(1,n), iv_glo_q_inv(1,n), iv_glo_q_qc(1,n), iv_glo_q_err(1,n), re_glo_q(1,n)   ! O, O-B, O-A q
          endif
        END DO
    end if

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_p_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_p_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_p_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_p     )
   deallocate( re_glo_q     )

  ENDIF

#else
  if ( wrf_dm_on_monitor() ) then

   IF ( iv % num_metar > 0 ) THEN
      write(omb_unit,'(a,i8)')'metar', iv % num_metar
      DO n = 1, iv % num_metar 
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % metar(n) % info % id, &  ! Station
                         iv % metar(n) % info % lat, &       ! Latitude
                         iv % metar(n) % info % lon, &       ! Longitude
                         ob % metar(n) % p, &                ! Obs Pressure
                         ob%metar(n)%u, iv%metar(n)%u, re%metar(n)%u, &! O, O-B, O-A u
                         ob%metar(n)%v, iv%metar(n)%v, re%metar(n)%v, &! O, O-B, O-A v
                         ob%metar(n)%t, iv%metar(n)%t, re%metar(n)%t, &! O, O-B, O-A t
                         ob%metar(n)%p, iv%metar(n)%p, re%metar(n)%p, &! O, O-B, O-A p
                         ob%metar(n)%q, iv%metar(n)%q, re%metar(n)%q   ! O, O-B, O-A q
      END DO
   ENDIF

  end if
#endif

!  [3] Transfer ships obs:
#ifdef DM_PARALLEL

  IF ( iv % num_ships_glo > 0 ) THEN

   iccn = iv%num_ships

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_ships_glo),STAT=stat)
   allocate(ict (0:iv % num_ships_glo),STAT=stat)
   allocate(lon (1:iv % num_ships_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_ships_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_ships_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_ships_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( ob_glo_q(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_p_inv(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_p_qc(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_p_err(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( re_glo_p(1:1,1:iv % num_ships_glo)   , STAT=stat )
   allocate( re_glo_q(1:1,1:iv % num_ships_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   ob_glo_q = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_p_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_p_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_p_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_p = 0.
   re_glo_q = 0.

   call MPI_GATHERV(iv%ships%info%id , iv%num_ships*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%info%lat, iv%num_ships, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%info%lon, iv%num_ships, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%ships%u       , iv%num_ships, MPI_REAL    , ob_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ships%v       , iv%num_ships, MPI_REAL    , ob_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ships%t       , iv%num_ships, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ships%p       , iv%num_ships, MPI_REAL    , ob_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ships%q       , iv%num_ships, MPI_REAL    , ob_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ships%u%inv   , iv%num_ships, MPI_REAL    , iv_glo_u_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%v%inv   , iv%num_ships, MPI_REAL    , iv_glo_v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%t%inv   , iv%num_ships, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%p%inv   , iv%num_ships, MPI_REAL    , iv_glo_p_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%q%inv   , iv%num_ships, MPI_REAL    , iv_glo_q_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ships%u%qc    , iv%num_ships, MPI_INTEGER  , iv_glo_u_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%v%qc    , iv%num_ships, MPI_INTEGER  , iv_glo_v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%t%qc    , iv%num_ships, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%p%qc    , iv%num_ships, MPI_INTEGER  , iv_glo_p_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%q%qc    , iv%num_ships, MPI_INTEGER  , iv_glo_q_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ships%u%error , iv%num_ships, MPI_REAL    , iv_glo_u_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%v%error , iv%num_ships, MPI_REAL    , iv_glo_v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%t%error , iv%num_ships, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%p%error , iv%num_ships, MPI_REAL    , iv_glo_p_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ships%q%error , iv%num_ships, MPI_REAL    , iv_glo_q_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%ships%u       , iv%num_ships, MPI_REAL    , re_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ships%v       , iv%num_ships, MPI_REAL    , re_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ships%t       , iv%num_ships, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ships%p       , iv%num_ships, MPI_REAL    , re_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ships%q       , iv%num_ships, MPI_REAL    , re_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0
       lon = iv_glo_lon
       do i = 1, iv % num_ships_glo
         do j = i+1 , iv % num_ships_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_ships_glo
         do j = 1, iv % num_ships_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 112
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 112
               else
                 goto 122
               endif
             endif
           endif
  122    enddo
  112  enddo 
        
        nu = 0
        DO i = 1, iv % num_ships_glo
          if( icnt(i).ge.0 ) nu = nu + 1
        ENDDO
 
        write(omb_unit,'(a5,i8)')'ships', nu
        i= 0
        DO j = 1, iv % num_ships_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs Pressure
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A u
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n), &! O, O-B, O-A v
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n), &! O, O-B, O-A t
                         ob_glo_p(1,n), iv_glo_p_inv(1,n), iv_glo_p_qc(1,n), iv_glo_p_err(1,n), re_glo_p(1,n), &! O, O-B, O-A p
                         ob_glo_q(1,n), iv_glo_q_inv(1,n), iv_glo_q_qc(1,n), iv_glo_q_err(1,n), re_glo_q(1,n)   ! O, O-B, O-A q
          endif
        END DO
    end if

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_p_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_p_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_p_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_p     )
   deallocate( re_glo_q     )

  ENDIF

#else
  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_ships > 0 ) THEN
      write(omb_unit,'(a,i8)')'ships', iv % num_ships
      DO n = 1, iv % num_ships  
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % ships(n) % info % id, &  ! Station
                         iv % ships(n) % info % lat, &       ! Latitude
                         iv % ships(n) % info % lon, &       ! Longitude
                         ob % ships(n) % p, &                ! Obs Pressure
                         ob%ships(n)%u, iv%ships(n)%u, re%ships(n)%u, &! O, O-B, O-A u
                         ob%ships(n)%v, iv%ships(n)%v, re%ships(n)%v, &! O, O-B, O-A v
                         ob%ships(n)%t, iv%ships(n)%t, re%ships(n)%t, &! O, O-B, O-A t
                         ob%ships(n)%p, iv%ships(n)%p, re%ships(n)%p, &! O, O-B, O-A p
                         ob%ships(n)%q, iv%ships(n)%q, re%ships(n)%q   ! O, O-B, O-A q
      END DO
   ENDIF
  end if
#endif

!  [4.1] Transfer Geo   AMVs Obs:
!
#ifdef DM_PARALLEL

  IF ( iv % num_geoamv_glo > 0 ) THEN

   iccn = iv%num_geoamv

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % geoamv(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif


     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_geoamv_glo),STAT=stat)
   allocate(ict (0:iv % num_geoamv_glo),STAT=stat)
   allocate(lon (1:iv % num_geoamv_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_geoamv_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_geoamv_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_geoamv_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_geoamv_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_geoamv_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_geoamv), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_geoamv), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%geoamv%info%id , iv%num_geoamv*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%geoamv%info%levels, iv%num_geoamv, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%geoamv%info%lat, iv%num_geoamv, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%geoamv%info%lon, iv%num_geoamv, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = ob%geoamv(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = ob%geoamv(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = iv%geoamv(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = iv%geoamv(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = iv%geoamv(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc_int(j,i) = iv%geoamv(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_geoamv*n, MPI_INTEGER  , iv_glo_u_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc_int(j,i) = iv%geoamv(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_geoamv*n, MPI_INTEGER  , iv_glo_v_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = iv%geoamv(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = iv%geoamv(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = re%geoamv(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   do i = 1, iv % num_geoamv
      do j = 1, iv % geoamv(i) % info % levels
         ob_loc(j,i) = re%geoamv(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_geoamv*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_geoamv_glo
         do j = i+1 , iv % num_geoamv_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,j).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,j).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_geoamv_glo
         do j = 1, iv % num_geoamv_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 113
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 113
               else
                 goto 123
               endif
             endif
           endif
  123    enddo
  113  enddo 

      nu = 0
      DO i = 1, iv % num_gpspw_glo
        if( icnt(i).ge.0 ) nu = nu + 1
      ENDDO

      write(omb_unit,'(a6,i8)')'geoamv', nu
      i= 0
      DO j = 1, iv % num_geoamv_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
             i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n)   ! O, O-B, O-A v
          END DO
        endif
      END DO
    end if

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate(ob_loc        )
   deallocate(ob_loc_int    )

   deallocate( iilev        )
   deallocate( lcn          )
   


 ENDIF

#else

  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_geoamv > 0 ) THEN
      write(omb_unit,'(a,i8)')'geoamv', iv % num_geoamv
      DO n = 1, iv % num_geoamv
        write(omb_unit,'(i8)')iv % geoamv(n) % info % levels
        DO k = 1, iv % geoamv(n) % info % levels
          write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                 n, 1, iv % geoamv(n) % info % id, &  ! Station
                 iv % geoamv(n) % info % lat, &       ! Latitude
                 iv % geoamv(n) % info % lon, &       ! Longitude
                 iv % geoamv(n) % p(k), &                ! Obs Pressure
                 ob%geoamv(n)%u(k), iv%geoamv(n)%u(k), re%geoamv(n)%u(k), &! O, O-B, O-A u
                 ob%geoamv(n)%v(k), iv%geoamv(n)%v(k), re%geoamv(n)%v(k)
        END DO
      END DO
   ENDIF
  end if
#endif
!  [4.2] Transfer Polar AMVs Obs:
!
#ifdef DM_PARALLEL

  IF ( iv % num_polaramv_glo > 0 ) THEN

   iccn = iv%num_polaramv

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % polaramv(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_polaramv_glo),STAT=stat)
   allocate(ict (0:iv % num_polaramv_glo),STAT=stat)
   allocate(lon (1:iv % num_polaramv_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_polaramv_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_polaramv_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_polaramv_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_polaramv_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_polaramv_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_geoamv), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_geoamv), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%polaramv%info%id , iv%num_polaramv*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%polaramv%info%levels, iv%num_polaramv, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%polaramv%info%lat, iv%num_polaramv, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%polaramv%info%lon, iv%num_polaramv, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = ob%polaramv(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = ob%polaramv(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = iv%polaramv(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = iv%polaramv(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = iv%polaramv(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc_int(j,i) = iv%polaramv(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_polaramv*n, MPI_INTEGER  , iv_glo_u_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc_int(j,i) = iv%polaramv(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_polaramv*n, MPI_INTEGER  , iv_glo_v_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = iv%polaramv(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = iv%polaramv(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = re%polaramv(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_polaramv
      do j = 1, iv % polaramv(i) % info % levels
         ob_loc(j,i) = re%polaramv(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_polaramv*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_polaramv_glo
         do j = i+1 , iv % num_polaramv_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_polaramv_glo
         do j = 1, iv % num_polaramv_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 151
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 151
               else
                 goto 161
               endif
             endif
           endif
  161    enddo
  151    enddo

      nu = 0
      DO i = 1, iv % num_gpspw_glo
        if( icnt(i).ge.0 ) nu = nu + 1
      ENDDO

      write(omb_unit,'(a8,i8)')'polaramv', nu

      i= 0
      DO j = 1, iv % num_polaramv_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         n, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n)   ! O, O-B, O-A v
          END DO
        endif
      END DO
    end if

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate(ob_loc        )
   deallocate(ob_loc_int    )

   deallocate( iilev        )
   deallocate( lcn          )

  ENDIF

#else

  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_polaramv > 0 ) THEN
      write(omb_unit,'(a,i8)')'polaramv', iv % num_polaramv
      DO n = 1, iv % num_polaramv
        write(omb_unit,'(i8)')iv % polaramv(n) % info % levels
        DO k = 1, iv % polaramv(n) % info % levels
          write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                 n, 1, iv % polaramv(n) % info % id, &  ! Station
                 iv % polaramv(n) % info % lat, &       ! Latitude
                 iv % polaramv(n) % info % lon, &       ! Longitude
                 iv % polaramv(n) % p(k), &                ! Obs Pressure
                 ob%polaramv(n)%u(k), iv%polaramv(n)%u(k), re%polaramv(n)%u(k), &! O, O-B, O-A u
                 ob%polaramv(n)%v(k), iv%polaramv(n)%v(k), re%polaramv(n)%v(k)
        END DO
      END DO
   ENDIF
  end if
#endif

!  [5] Transfer gpspw obs:
#ifdef DM_PARALLEL

  IF ( iv % num_gpspw_glo > 0 ) THEN

   iccn = iv%num_gpspw

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_gpspw_glo),STAT=stat)
   allocate(ict (0:iv % num_gpspw_glo),STAT=stat)
   allocate(lon (1:iv % num_gpspw_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_gpspw_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_gpspw_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_gpspw_glo) , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( miss_glo_r(1:1,1:iv % num_gpspw_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_t = 0.
   iv_glo_t_inv = 0.
   iv_glo_t_qc = 0
   iv_glo_t_err = 0.
   re_glo_t = 0.
   miss_glo_r = 0

   call MPI_GATHERV(iv%gpspw%info%id , iv%num_gpspw*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%info%lat, iv%num_gpspw, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%info%lon, iv%num_gpspw, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%gpspw%tpw       , iv%num_gpspw, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%inv   , iv%num_gpspw, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%qc    , iv%num_gpspw, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%error , iv%num_gpspw, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%gpspw%tpw       , iv%num_gpspw, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(missing_r          , iv%num_gpspw, MPI_REAL    , miss_glo_r     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0
       lon = iv_glo_lon
       do i = 1, iv % num_gpspw_glo
         do j = i+1 , iv % num_gpspw_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_gpspw_glo
         do j = 1, iv % num_gpspw_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 114
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 114
               else
                 goto 124
               endif
             endif
           endif
  124    enddo
  114  enddo 

        nu = 0
        DO i = 1, iv % num_gpspw_glo
          if( icnt(i).ge.0 ) nu = nu + 1
        ENDDO
 
        write(omb_unit,'(a5,i8)')'gpspw', nu
        i= 0
        DO j = 1, iv % num_gpspw_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         miss_glo_r(1,n), &                ! Obs Pressure
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n)   ! O, O-B, O-A t
          endif
        END DO
    end if
   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_t     )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_t_err )
   deallocate( re_glo_t     )
   deallocate( miss_glo_r   )

  ENDIF

#else

  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_gpspw > 0 ) THEN
      write(omb_unit,'(a,i8)')'gpspw', iv % num_gpspw
      DO n = 1, iv % num_gpspw
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % gpspw(n) % info % id, &  ! Station
                         iv % gpspw(n) % info % lat, &       ! Latitude
                         iv % gpspw(n) % info % lon, &       ! Longitude
                         missing_r, &
                         ob%gpspw(n)%tpw, iv%gpspw(n)%tpw, re%gpspw(n)%tpw ! O, O-B, O-A u
      END DO
   ENDIF
  endif
#endif

!  [5] Transfer gpspw obs:
#ifdef DM_PARALLEL

  IF ( iv % num_gpspw_glo > 0 ) THEN

   iccn = iv%num_gpspw

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
   isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_gpspw_glo),STAT=stat)
   allocate(ict (0:iv % num_gpspw_glo),STAT=stat)
   allocate(lon (1:iv % num_gpspw_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_gpspw_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_gpspw_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_gpspw_glo) , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_gpspw_glo)   , STAT=stat )
   allocate( miss_glo_r(1:1,1:iv % num_gpspw_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_t = 0.
   iv_glo_t_inv = 0.
   iv_glo_t_qc = 0
   iv_glo_t_err = 0.
   re_glo_t = 0.
   miss_glo_r = 0

   call MPI_GATHERV(iv%gpspw%info%id , iv%num_gpspw*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%info%lat, iv%num_gpspw, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%info%lon, iv%num_gpspw, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%gpspw%tpw       , iv%num_gpspw, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%inv   , iv%num_gpspw, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%qc    , iv%num_gpspw, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%gpspw%tpw%error , iv%num_gpspw, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%gpspw%tpw       , iv%num_gpspw, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(missing_r          , iv%num_gpspw, MPI_REAL    , miss_glo_r     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0
       lon = iv_glo_lon
       do i = 1, iv % num_gpspw_glo
         do j = i+1 , iv % num_gpspw_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_gpspw_glo
         do j = 1, iv % num_gpspw_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 115
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 115
               else
                 goto 125
               endif
             endif
           endif
  125    enddo
  115  enddo 

        nu = 0
        DO i = 1, iv % num_gpspw_glo
          if( icnt(i).ge.0 ) nu = nu + 1
        ENDDO
 
        write(omb_unit,'(a5,i8)')'gpspw', nu
        i= 0
        DO j = 1, iv % num_gpspw_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         miss_glo_r(1,n), &                ! Obs Pressure
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n)   ! O, O-B, O-A t
          endif
        END DO
    end if
   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_t     )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_t_err )
   deallocate( re_glo_t     )
   deallocate( miss_glo_r   )

  ENDIF

#else
  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_gpspw > 0 ) THEN
      write(omb_unit,'(a,i8)')'gpspw', iv % num_gpspw
      DO n = 1, iv % num_gpspw  
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % gpspw(n) % info % id, &  ! Station
                         iv % gpspw(n) % info % lat, &       ! Latitude
                         iv % gpspw(n) % info % lon, &       ! Longitude
                         missing_r, &          
                         ob%gpspw(n)%tpw, iv%gpspw(n)%tpw, re%gpspw(n)%tpw ! O, O-B, O-A u
      END DO
   ENDIF
  endif
#endif

!  [6] Transfer sonde obs:
#ifdef DM_PARALLEL

  IF ( iv % num_sound_glo > 0 ) THEN

   iccn = iv%num_sound

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % sound(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_sound_glo),STAT=stat)
   allocate(ict (0:iv % num_sound_glo),STAT=stat)
   allocate(lon (1:iv % num_sound_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_sound_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_sound_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_sound_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_sound_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_t(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_q(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_t(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_q(1:n,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_sound), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_sound), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_q = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_q = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%sound%info%id , iv%num_sound*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sound%info%levels, iv%num_sound, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sound%info%lat, iv%num_sound, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sound%info%lon, iv%num_sound, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = ob%sound(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = ob%sound(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = ob%sound(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , ob_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = ob%sound(i)%q(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , ob_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%t(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_t_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%q(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_q_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc_int(j,i) = iv%sound(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_sound*n, MPI_INTEGER  , iv_glo_u_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc_int(j,i) = iv%sound(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_sound*n, MPI_INTEGER  , iv_glo_v_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc_int(j,i) = iv%sound(i)%t(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_sound*n, MPI_INTEGER  , iv_glo_t_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc_int(j,i) = iv%sound(i)%q(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_sound*n, MPI_INTEGER  , iv_glo_q_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%t(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_t_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = iv%sound(i)%q(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , iv_glo_q_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = re%sound(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = re%sound(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = re%sound(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , re_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_sound
      do j = 1, iv % sound(i) % info % levels
         ob_loc(j,i) = re%sound(i)%q(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_sound*n, MPI_REAL    , re_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_sound_glo
         do j = i+1 , iv % num_sound_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_sound_glo
         do j = 1, iv % num_sound_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 152
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 152
               else
                 goto 162
               endif
             endif
           endif
  162    enddo
  152  enddo 

       nu = 0
       DO i = 1, iv % num_sound_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'sound', nu

      i= 0
      DO j = 1, iv % num_sound_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,4(2f17.7,i8,2f17.7))')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n), &! O, O-B, O-A v
                         ob_glo_t(k,n), iv_glo_t_inv(k,n), iv_glo_t_qc(k,n), iv_glo_t_err(k,n), re_glo_t(k,n), &! O, O-B, O-A u
                         ob_glo_q(k,n), iv_glo_q_inv(k,n), iv_glo_q_qc(k,n), iv_glo_q_err(k,n), re_glo_q(k,n)   ! O, O-B, O-A v
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_q     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF

#else

  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_sound > 0 ) THEN
      write(omb_unit,'(a,i8)')'sound', iv % num_sound
      DO n = 1, iv % num_sound
         write(omb_unit,'(i8)')iv % sound(n) % info % levels
         DO k = 1, iv % sound(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % sound(n) % info % id, &  ! Station
                         iv % sound(n) % info % lat, &       ! Latitude
                         iv % sound(n) % info % lon, &       ! Longitude
                         iv % sound(n) % p(k), &             ! Obs Pressure
                         ob%sound(n)%u(k), iv%sound(n)%u(k), re%sound(n)%u(k), &! O,O-B,O-A u
                         ob%sound(n)%v(k), iv%sound(n)%v(k), re%sound(n)%v(k), &! O,O-B,O-A v
                         ob%sound(n)%t(k), iv%sound(n)%t(k), re%sound(n)%t(k), &! O,O-B,O-A t
                         ob%sound(n)%q(k), iv%sound(n)%q(k), re%sound(n)%q(k)   ! O,O-B,O-A q
         END DO
      END DO
   ENDIF
  endif
#endif

#ifdef DM_PARALLEL

  IF ( iv % num_sound_glo > 0 ) THEN

   iccn = iv%num_sound

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_sound_glo),STAT=stat)
   allocate(ict (0:iv % num_sound_glo),STAT=stat)
   allocate(lon (1:iv % num_sound_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_sound_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_sound_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_sound_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( ob_glo_q(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_p_inv(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_p_qc(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_p_err(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_p(1:1,1:iv % num_sound_glo)   , STAT=stat )
   allocate( re_glo_q(1:1,1:iv % num_sound_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_q = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_p_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_p_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_p_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_p = 0.
   re_glo_q = 0.

   call MPI_GATHERV(iv%sonde_sfc%info%id , iv%num_sound*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%info%lat, iv%num_sound, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%info%lon, iv%num_sound, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%sonde_sfc%u       , iv%num_sound, MPI_REAL    , ob_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%sonde_sfc%v       , iv%num_sound, MPI_REAL    , ob_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%sonde_sfc%t       , iv%num_sound, MPI_REAL    , ob_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%sonde_sfc%p       , iv%num_sound, MPI_REAL    , ob_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%sonde_sfc%q       , iv%num_sound, MPI_REAL    , ob_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%sonde_sfc%u%inv   , iv%num_sound, MPI_REAL    , iv_glo_u_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%v%inv   , iv%num_sound, MPI_REAL    , iv_glo_v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%t%inv   , iv%num_sound, MPI_REAL    , iv_glo_t_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%p%inv   , iv%num_sound, MPI_REAL    , iv_glo_p_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%q%inv   , iv%num_sound, MPI_REAL    , iv_glo_q_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%sonde_sfc%u%qc    , iv%num_sound, MPI_INTEGER  , iv_glo_u_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%v%qc    , iv%num_sound, MPI_INTEGER  , iv_glo_v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%t%qc    , iv%num_sound, MPI_INTEGER  , iv_glo_t_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%p%qc    , iv%num_sound, MPI_INTEGER  , iv_glo_p_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%q%qc    , iv%num_sound, MPI_INTEGER  , iv_glo_q_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%sonde_sfc%u%error , iv%num_sound, MPI_REAL    , iv_glo_u_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%v%error , iv%num_sound, MPI_REAL    , iv_glo_v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%t%error , iv%num_sound, MPI_REAL    , iv_glo_t_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%p%error , iv%num_sound, MPI_REAL    , iv_glo_p_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%sonde_sfc%q%error , iv%num_sound, MPI_REAL    , iv_glo_q_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%sonde_sfc%u       , iv%num_sound, MPI_REAL    , re_glo_u       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%sonde_sfc%v       , iv%num_sound, MPI_REAL    , re_glo_v       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%sonde_sfc%t       , iv%num_sound, MPI_REAL    , re_glo_t       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%sonde_sfc%p       , iv%num_sound, MPI_REAL    , re_glo_p       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%sonde_sfc%q       , iv%num_sound, MPI_REAL    , re_glo_q       , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_sound_glo
         do j = i+1 , iv % num_sound_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_sound_glo
         do j = 1, iv % num_sound_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 116
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 116
               else
                 goto 126
               endif
             endif
           endif
  126    enddo
  116  enddo 
       nu = 0
       DO i = 1, iv % num_sound_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO
       write(omb_unit,'(a9,i8)')'sonde_sfc', nu

        i= 0
        DO j = 1, iv % num_sound_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs Pressure
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A u
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n), &! O, O-B, O-A v
                         ob_glo_t(1,n), iv_glo_t_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n), &! O, O-B, O-A t
                         ob_glo_p(1,n), iv_glo_p_inv(1,n), iv_glo_p_qc(1,n), iv_glo_p_err(1,n), re_glo_p(1,n), &! O, O-B, O-A p
                         ob_glo_q(1,n), iv_glo_q_inv(1,n), iv_glo_q_qc(1,n), iv_glo_q_err(1,n), re_glo_q(1,n)   ! O, O-B, O-A q
          endif
        END DO

    endif

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_p_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_p_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_p_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_p     )
   deallocate( re_glo_q     )

  ENDIF

#else
  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_sound > 0 ) THEN
      write(omb_unit,'(a,i8)')'sonde_sfc', iv % num_sound
      DO n = 1, iv % num_sound
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % sonde_sfc(n) % info % id, &  ! Station
                         iv % sonde_sfc(n) % info % lat, &       ! Latitude
                         iv % sonde_sfc(n) % info % lon, &       ! Longitude
                         ob % sonde_sfc(n) % p, &                ! Obs Pressure
                         ob%sonde_sfc(n)%u, iv%sonde_sfc(n)%u, re%sonde_sfc(n)%u, &! O, O-B, O-A u
                         ob%sonde_sfc(n)%v, iv%sonde_sfc(n)%v, re%sonde_sfc(n)%v, &! O, O-B, O-A v
                         ob%sonde_sfc(n)%t, iv%sonde_sfc(n)%t, re%sonde_sfc(n)%t, &! O, O-B, O-A t
                         ob%sonde_sfc(n)%p, iv%sonde_sfc(n)%p, re%sonde_sfc(n)%p, &! O, O-B, O-A p
                         ob%sonde_sfc(n)%q, iv%sonde_sfc(n)%q, re%sonde_sfc(n)%q   ! O, O-B, O-A q
      END DO
   ENDIF
  endif
#endif

!  [7] Transfer airep obs:
#ifdef DM_PARALLEL

  IF ( iv % num_airep_glo > 0 ) THEN

   iccn = iv%num_airep

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % airep(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_airep_glo),STAT=stat)
   allocate(ict (0:iv % num_airep_glo),STAT=stat)
   allocate(lon (1:iv % num_airep_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_airep_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_airep_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_airep_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_airep_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( ob_glo_t(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( re_glo_t(1:n,1:iv % num_airep_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_airep), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_airep), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%airep%info%id , iv%num_airep*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%airep%info%levels, iv%num_airep, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%airep%info%lat, iv%num_airep, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%airep%info%lon, iv%num_airep, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = ob%airep(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = ob%airep(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = ob%airep(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , ob_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%u(j)%inv
      enddo
   enddo

   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%t(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_t_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc_int(j,i) = iv%airep(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_airep*n, MPI_INTEGER  , iv_glo_u_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc_int(j,i) = iv%airep(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_airep*n, MPI_INTEGER  , iv_glo_v_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc_int(j,i) = iv%airep(i)%t(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_airep*n, MPI_INTEGER  , iv_glo_t_qc , icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = iv%airep(i)%t(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , iv_glo_t_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)




   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = re%airep(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = re%airep(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_airep
      do j = 1, iv % airep(i) % info % levels
         ob_loc(j,i) = re%airep(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_airep*n, MPI_REAL    , re_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_airep_glo
         do j = i+1 , iv % num_airep_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_u(1,i).eq.ob_glo_u(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_airep_glo
         do j = 1, iv % num_airep_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 153
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 153
               else
                 goto 163
               endif
             endif
           endif
  163    enddo
  153  enddo 

       nu = 0
       DO i = 1, iv % num_airep_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'airep',nu

      i= 0
      DO j = 1, iv % num_airep_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,3(2f17.7,i8,2f17.7))')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n), &! O, O-B, O-A v
                         ob_glo_t(k,n), iv_glo_t_inv(k,n), iv_glo_t_qc(k,n), iv_glo_t_err(k,n), re_glo_t(k,n)
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_t     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )
  ENDIF

#else
  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_airep > 0 ) THEN
      write(omb_unit,'(a,i8)')'airep', iv % num_airep
      DO n = 1, iv % num_airep
         write(omb_unit,'(i8)')iv % airep(n) % info % levels
         DO k = 1, iv % airep(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % airep(n) % info % id, &  ! Station
                         iv % airep(n) % info % lat, &       ! Latitude
                         iv % airep(n) % info % lon, &       ! Longitude
                         iv % airep(n) % p(k), &             ! Obs pressure
                         ob%airep(n)%u(k), iv%airep(n)%u(k), re%airep(n)%u(k), &! O,O-B,O-A u
                         ob%airep(n)%v(k), iv%airep(n)%v(k), re%airep(n)%v(k), &! O,O-B,O-A v
                         ob%airep(n)%t(k), iv%airep(n)%t(k), re%airep(n)%t(k)
         END DO
      END DO
   ENDIF
  endif

#endif

!  [8] Transfer pilot obs:
#ifdef DM_PARALLEL

  IF ( iv % num_pilot_glo > 0 ) THEN

   iccn = iv%num_pilot

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % pilot(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( wrf_dm_on_monitor() ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_pilot_glo),STAT=stat)
   allocate(ict (0:iv % num_pilot_glo),STAT=stat)
   allocate(lon (1:iv % num_pilot_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_pilot_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_pilot_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_pilot_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_pilot_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_pilot_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_pilot), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_pilot), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ''
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%pilot%info%id , iv%num_pilot*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%pilot%info%levels, iv%num_pilot, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%pilot%info%lat, iv%num_pilot, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%pilot%info%lon, iv%num_pilot, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = ob%pilot(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = ob%pilot(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = iv%pilot(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = iv%pilot(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = iv%pilot(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc_int(j,i) = iv%pilot(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_pilot*n, MPI_INTEGER  , iv_glo_u_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc_int(j,i) = iv%pilot(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_pilot*n, MPI_INTEGER  , iv_glo_v_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = iv%pilot(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = iv%pilot(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = re%pilot(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_pilot
      do j = 1, iv % pilot(i) % info % levels
         ob_loc(j,i) = re%pilot(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_pilot*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_pilot_glo
         do j = i+1 , iv % num_pilot_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_u(1,i).eq.ob_glo_u(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_pilot_glo
         do j = 1, iv % num_pilot_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 154
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 154
               else
                 goto 164
               endif
             endif
           endif
  164    enddo
  154  enddo 

       nu = 0
       DO i = 1, iv % num_pilot_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a,i8)')'pilot', nu

      i= 0
      DO j = 1, iv % num_pilot_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n)
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF
     
#else
  if ( wrf_dm_on_monitor() ) then
   IF ( iv % num_pilot > 0 ) THEN
      write(omb_unit,'(a,i8)')'pilot', iv % num_pilot
      DO n = 1, iv % num_pilot
         write(omb_unit,'(i8)')iv % pilot(n) % info % levels
         DO k = 1, iv % pilot(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % pilot(n) % info % id, &  ! Station
                         iv % pilot(n) % info % lat, &       ! Latitude
                         iv % pilot(n) % info % lon, &       ! Longitude
                         iv % pilot(n) % p(k), &             ! Obs Pressure
                         ob%pilot(n)%u(k), iv%pilot(n)%u(k), re%pilot(n)%u(k), &! O,O-B,O-A u
                         ob%pilot(n)%v(k), iv%pilot(n)%v(k), re%pilot(n)%v(k) ! O,O-B,O-A v
 
         END DO
      END DO
   ENDIF
  endif
#endif

!  [9] Transfer SSM/I obs:SSMI:
#ifdef DM_PARALLEL

  IF ( iv % num_ssmi_retrieval_glo > 0 ) THEN

   iccn = iv%num_ssmi_retrieval

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_ssmi_retrieval_glo),STAT=stat)
   allocate(ict (0:iv % num_ssmi_retrieval_glo),STAT=stat)
   allocate(lon (1:iv % num_ssmi_retrieval_glo),STAT=stat)
   allocate( iv_glo_lat(1:iv % num_ssmi_retrieval_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_ssmi_retrieval_glo) , STAT=stat )
   allocate( ob_glo_speed(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( ob_glo_tpw(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_speed_inv(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_tpw_inv(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_speed_qc(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_tpw_qc(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_speed_err(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( iv_glo_tpw_err(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( re_glo_speed(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( re_glo_tpw(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )
   allocate( miss_glo_r(1:1,1:iv % num_ssmi_retrieval_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_speed = 0.
   ob_glo_tpw = 0.
   iv_glo_speed_inv = 0.
   iv_glo_tpw_inv = 0.
   iv_glo_speed_qc = 0
   iv_glo_tpw_qc = 0
   iv_glo_speed_err = 0.
   iv_glo_tpw_err = 0.
   re_glo_speed = 0.
   re_glo_tpw = 0.
   miss_glo_r = 0

   call MPI_GATHERV(iv%ssmi_retrieval%info%lat, iv%num_ssmi_retrieval, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_retrieval%info%lon, iv%num_ssmi_retrieval, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%ssmi_retrieval%speed   , iv%num_ssmi_retrieval, MPI_REAL    , ob_glo_speed   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_retrieval%tpw     , iv%num_ssmi_retrieval, MPI_REAL    , ob_glo_tpw     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_retrieval%speed%inv, iv%num_ssmi_retrieval, MPI_REAL   , iv_glo_speed_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_retrieval%tpw%inv , iv%num_ssmi_retrieval, MPI_REAL    , iv_glo_tpw_inv , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_retrieval%speed%qc, iv%num_ssmi_retrieval, MPI_INTEGER  , iv_glo_speed_qc, icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_retrieval%tpw%qc  , iv%num_ssmi_retrieval, MPI_INTEGER  , iv_glo_tpw_qc  , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_retrieval%speed%error, iv%num_ssmi_retrieval, MPI_REAL , iv_glo_speed_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_retrieval%tpw%error , iv%num_ssmi_retrieval, MPI_REAL  , iv_glo_tpw_err , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%ssmi_retrieval%speed   , iv%num_ssmi_retrieval, MPI_REAL    , re_glo_speed   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_retrieval%tpw     , iv%num_ssmi_retrieval, MPI_REAL    , re_glo_tpw     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(missing_r                 , iv%num_ssmi_retrieval, MPI_REAL    , miss_glo_r     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_ssmi_retrieval_glo
         do j = i+1 , iv % num_ssmi_retrieval_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_speed(1,i).eq.ob_glo_speed(1,j)) then
               if(ob_glo_tpw(1,i).eq.ob_glo_tpw(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_ssmi_retrieval_glo
         do j = 1, iv % num_ssmi_retrieval_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 117
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 117
               else
                 goto 127
               endif
             endif
           endif
  127    enddo
  117  enddo 

       nu = 0
       DO i = 1, iv % num_ssmi_retrieval_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO
       write(omb_unit,'(a5,i8)')'ssmir', nu

        i= 0
        DO j = 1, iv % num_ssmi_retrieval_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         i, 1, 'SSMIR', &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         miss_glo_r(1,n), &                ! 
                         ob_glo_speed(1,n), iv_glo_speed_inv(1,n), iv_glo_speed_qc(1,n), iv_glo_speed_err(1,n), re_glo_speed(1,n), &! O, O-B, O-A speed
                         ob_glo_tpw(1,n), iv_glo_tpw_inv(1,n), iv_glo_tpw_qc(1,n), iv_glo_tpw_err(1,n), re_glo_tpw(1,n)   ! O, O-B, O-A tpw
          endif
        END DO

    endif

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )

   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_speed)
   deallocate( ob_glo_tpw  )
   deallocate( iv_glo_speed_inv )
   deallocate( iv_glo_tpw_inv)
   deallocate( iv_glo_speed_qc)
   deallocate( iv_glo_tpw_qc)
   deallocate( iv_glo_speed_err)
   deallocate( iv_glo_tpw_err)
   deallocate( re_glo_speed)
   deallocate( re_glo_tpw  )
   deallocate( miss_glo_r  )

  ENDIF

#else
   IF ( iv % num_ssmi_retrieval > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'ssmir', iv % num_ssmi_retrieval
      DO n = 1, iv % num_ssmi_retrieval
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, 'SSMIR',              &       ! Station
                         iv % ssmi_retrieval(n) % info % lat, &! Latitude
                         iv % ssmi_retrieval(n) % info % lon, &! Longitude
                         missing_r,                  &       ! Obs height
                         ob%ssmi_retrieval(n)%speed, iv%ssmi_retrieval(n)%speed, re%ssmi_retrieval(n)%speed, & ! O, O-B, O-A speed
                         ob%ssmi_retrieval(n)%tpw, iv%ssmi_retrieval(n)%tpw, re%ssmi_retrieval(n)%tpw ! O, O-B, O-A tpw
      END DO
     endif
   ENDIF
#endif

#ifdef DM_PARALLEL

  IF ( iv % num_ssmi_tb_glo > 0 ) THEN

   iccn = iv%num_ssmi_tb

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_ssmi_tb_glo),STAT=stat)
   allocate(ict (0:iv % num_ssmi_tb_glo),STAT=stat)
   allocate(lon (1:iv % num_ssmi_tb_glo),STAT=stat)
   allocate( iv_glo_lat(1:iv % num_ssmi_tb_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_ssmi_tb_glo) , STAT=stat )
   allocate( ob_glo_tb19v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb19h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb22v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb37v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb37h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb85v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( ob_glo_tb85h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19v_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19h_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb22v_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37v_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37h_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85v_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85h_inv(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19v_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19h_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb22v_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37v_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37h_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85v_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85h_qc (1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19v_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb19h_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb22v_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37v_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb37h_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85v_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( iv_glo_tb85h_err(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb19v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb19h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb22v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb37v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb37h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb85v(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( re_glo_tb85h(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )
   allocate( miss_glo_r(1:1,1:iv % num_ssmi_tb_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_tb19v = 0.
   ob_glo_tb19h = 0.
   ob_glo_tb22v = 0.
   ob_glo_tb37v = 0.
   ob_glo_tb37h = 0.
   ob_glo_tb85v = 0.
   ob_glo_tb85h = 0.
   iv_glo_tb19v_inv = 0.
   iv_glo_tb19h_inv = 0.
   iv_glo_tb22v_inv = 0.
   iv_glo_tb37v_inv = 0.
   iv_glo_tb37h_inv = 0.
   iv_glo_tb85v_inv = 0.
   iv_glo_tb85h_inv = 0.
   iv_glo_tb19v_qc = 0
   iv_glo_tb19h_qc = 0 
   iv_glo_tb22v_qc = 0 
   iv_glo_tb37v_qc = 0 
   iv_glo_tb37h_qc = 0 
   iv_glo_tb85v_qc = 0 
   iv_glo_tb85h_qc = 0 
   iv_glo_tb19v_err = 0.
   iv_glo_tb19h_err = 0.
   iv_glo_tb22v_err = 0.
   iv_glo_tb37v_err = 0.
   iv_glo_tb37h_err = 0.
   iv_glo_tb85v_err = 0.
   iv_glo_tb85h_err = 0.
   re_glo_tb19v = 0.
   re_glo_tb19h = 0.
   re_glo_tb22v = 0.
   re_glo_tb37v = 0.
   re_glo_tb37h = 0.
   re_glo_tb85v = 0.
   re_glo_tb85h = 0.
   miss_glo_r = 0

   call MPI_GATHERV(iv%ssmi_tb%info%lat, iv%num_ssmi_tb, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%info%lon, iv%num_ssmi_tb, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%ssmi_tb%tb19v   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb19v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb19h   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb19h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb22v   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb22v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb37v   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb37v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb37h   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb37h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb85v   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb85v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%ssmi_tb%tb85h   , iv%num_ssmi_tb, MPI_REAL    , ob_glo_tb85h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_tb%tb19v%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb19v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb19h%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb19h_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb22v%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb22v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37v%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb37v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37h%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb37h_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85v%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb85v_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85h%inv   , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb85h_inv   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_tb%tb19v%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb19v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb19h%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb19h_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb22v%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb22v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37v%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb37v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37h%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb37h_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85v%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb85v_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85h%qc    , iv%num_ssmi_tb, MPI_INTEGER  , iv_glo_tb85h_qc    , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%ssmi_tb%tb19v%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb19v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb19h%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb19h_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb22v%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb22v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37v%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb37v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb37h%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb37h_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85v%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb85v_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmi_tb%tb85h%error , iv%num_ssmi_tb, MPI_REAL    , iv_glo_tb85h_err   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%ssmi_tb%tb19v   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb19v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb19h   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb19h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb22v   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb22v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb37v   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb37v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb37h   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb37h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb85v   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb85v   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%ssmi_tb%tb85h   , iv%num_ssmi_tb, MPI_REAL    , re_glo_tb85h   , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(missing_r          , iv%num_ssmi_tb, MPI_REAL    , miss_glo_r     , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_ssmi_tb_glo
         do j = i+1 , iv % num_ssmi_tb_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_tb19v(1,i).eq.ob_glo_tb19v(1,j)) then
               if(ob_glo_tb22v(1,i).eq.ob_glo_tb22v(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_ssmi_tb_glo
         do j = 1, iv % num_ssmi_tb_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 118
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 118
               else
                 goto 128
               endif
             endif
           endif
  128    enddo
  118  enddo 

       nu = 0
       DO i = 1, iv % num_ssmi_tb_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO
       write(omb_unit,'(a5,i8)')'ssmiT', nu

        i= 0
        DO j = 1, iv % num_ssmi_tb_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,*)' SSMI radiance output not yet coded.'
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,7(2f17.7,i8,2f17.7))')&
                         i, 1, 'SSMIT', &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         miss_glo_r(1,n), &                ! Obs height
                         ob_glo_tb19v(1,n), iv_glo_tb19v_inv(1,n), iv_glo_tb19v_qc(1,n), iv_glo_tb19v_err(1,n), re_glo_tb19v(1,n), &! O, O-B, O-A Tb19v
                         ob_glo_tb19h(1,n), iv_glo_tb19h_inv(1,n), iv_glo_tb19h_qc(1,n), iv_glo_tb19h_err(1,n), re_glo_tb19h(1,n), &! O, O-B, O-A Tb19h
                         ob_glo_tb22v(1,n), iv_glo_tb22v_inv(1,n), iv_glo_tb22v_qc(1,n), iv_glo_tb22v_err(1,n), re_glo_tb22v(1,n), &! O, O-B, O-A Tb22v
                         ob_glo_tb37v(1,n), iv_glo_tb37v_inv(1,n), iv_glo_tb37v_qc(1,n), iv_glo_tb37v_err(1,n), re_glo_tb37v(1,n), &! O, O-B, O-A Tb37v
                         ob_glo_tb37h(1,n), iv_glo_tb37h_inv(1,n), iv_glo_tb37h_qc(1,n), iv_glo_tb37h_err(1,n), re_glo_tb37h(1,n), &! O, O-B, O-A Tb37h
                         ob_glo_tb85v(1,n), iv_glo_tb85v_inv(1,n), iv_glo_tb85v_qc(1,n), iv_glo_tb85v_err(1,n), re_glo_tb85v(1,n), &! O, O-B, O-A Tb85v
                         ob_glo_tb85h(1,n), iv_glo_tb85h_inv(1,n), iv_glo_tb85h_qc(1,n), iv_glo_tb85h_err(1,n), re_glo_tb85h(1,n)   ! O, O-B, O-A Tb85h
          endif
        END DO

    endif

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )

   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_tb19v)
   deallocate( ob_glo_tb19h)
   deallocate( ob_glo_tb22v)
   deallocate( ob_glo_tb37v)
   deallocate( ob_glo_tb37h)
   deallocate( ob_glo_tb85v)
   deallocate( ob_glo_tb85h)
   deallocate( iv_glo_tb19v_inv )
   deallocate( iv_glo_tb19h_inv )
   deallocate( iv_glo_tb22v_inv )
   deallocate( iv_glo_tb37v_inv )
   deallocate( iv_glo_tb37h_inv )
   deallocate( iv_glo_tb85v_inv )
   deallocate( iv_glo_tb85h_inv )
   deallocate( iv_glo_tb19v_qc)
   deallocate( iv_glo_tb19h_qc)
   deallocate( iv_glo_tb22v_qc)
   deallocate( iv_glo_tb37v_qc)
   deallocate( iv_glo_tb37h_qc)
   deallocate( iv_glo_tb85v_qc)
   deallocate( iv_glo_tb85h_qc)
   deallocate( iv_glo_tb19v_err)
   deallocate( iv_glo_tb19h_err)
   deallocate( iv_glo_tb22v_err)
   deallocate( iv_glo_tb37v_err)
   deallocate( iv_glo_tb37h_err)
   deallocate( iv_glo_tb85h_err)
   deallocate( iv_glo_tb85v_err)
   deallocate( re_glo_tb19v)
   deallocate( re_glo_tb19h)
   deallocate( re_glo_tb22v)
   deallocate( re_glo_tb37v)
   deallocate( re_glo_tb37h)
   deallocate( re_glo_tb85v)
   deallocate( re_glo_tb85h)
   deallocate( miss_glo_r  )

  ENDIF

#else
   IF ( iv % num_ssmi_tb > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'ssmiT', iv % num_ssmi_tb
      DO n = 1, iv % num_ssmi_tb
         write(omb_unit,*)' SSMI radiance output not yet coded.'
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,7(2f17.7,i8,2f17.7))')&
                         n, 1, 'SSMIT',              &        ! Station
                         iv % ssmi_tb(n) % info % lat, &! Latitude
                         iv % ssmi_tb(n) % info % lon, &! Longitude
                         missing_r,                  &       ! Obs height
                         ob%ssmi_tb(n)%tb19h, iv%ssmi_tb(n)%tb19h, re%ssmi_tb(n)%tb19h, & ! O, O-B, O-A Tb19h
                         ob%ssmi_tb(n)%tb19v, iv%ssmi_tb(n)%tb19v, re%ssmi_tb(n)%tb19v, & ! O, O-B, O-A Tb19v
                         ob%ssmi_tb(n)%tb22v, iv%ssmi_tb(n)%tb22v, re%ssmi_tb(n)%tb22v, & ! O, O-B, O-A Tb22v
                         ob%ssmi_tb(n)%tb37h, iv%ssmi_tb(n)%tb37h, re%ssmi_tb(n)%tb37h, & ! O, O-B, O-A Tb37h
                         ob%ssmi_tb(n)%tb37v, iv%ssmi_tb(n)%tb37v, re%ssmi_tb(n)%tb37v, & ! O, O-B, O-A Tb37v
                         ob%ssmi_tb(n)%tb85h, iv%ssmi_tb(n)%tb85h, re%ssmi_tb(n)%tb85h, & ! O, O-B, O-A Tb85h
                         ob%ssmi_tb(n)%tb85v, iv%ssmi_tb(n)%tb85v, re%ssmi_tb(n)%tb85v    ! O, O-B, O-A Tb85v
      END DO
     endif
   ENDIF
#endif

!  [10] Transfer satem obs:
#ifdef DM_PARALLEL

  IF ( iv % num_satem_glo > 0 ) THEN

   iccn = iv%num_satem

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % satem(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_satem_glo),STAT=stat)
   allocate(ict (0:iv % num_satem_glo),STAT=stat)
   allocate(lon (1:iv % num_satem_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_satem_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_satem_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_satem_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_satem_glo) , STAT=stat )
   allocate( ob_glo_t(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( re_glo_t(1:n,1:iv % num_satem_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_satem), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_satem), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   iv_glo_t_inv = 0.
   iv_glo_t_qc = 0
   iv_glo_t_err = 0.
   re_glo_t = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%satem%info%id , iv%num_satem*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%satem%info%levels, iv%num_satem, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%satem%info%lat, iv%num_satem, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%satem%info%lon, iv%num_satem, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc(j,i) = ob%satem(i)%thickness(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_satem*n, MPI_REAL    , ob_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc(j,i) = iv%satem(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_satem*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc(j,i) = iv%satem(i)%thickness(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_satem*n, MPI_REAL    , iv_glo_t_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc_int(j,i) = iv%satem(i)%thickness(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_satem*n, MPI_INTEGER  , iv_glo_t_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc(j,i) = iv%satem(i)%thickness(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_satem*n, MPI_REAL    , iv_glo_t_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_satem
      do j = 1, iv % satem(i) % info % levels
         ob_loc(j,i) = re%satem(i)%thickness(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_satem*n, MPI_REAL    , re_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_satem_glo
         do j = i+1 , iv % num_satem_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_t(1,i).eq.ob_glo_t(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_satem_glo
         do j = 1, iv % num_satem_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 155
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 155
               else
                 goto 165
               endif
             endif
           endif
  165    enddo
  155  enddo 

       nu = 0
       DO i = 1, iv % num_satem_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'satem', nu

      i= 0
      DO j = 1, iv % num_satem_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_t(k,n), iv_glo_t_inv(k,n), iv_glo_t_qc(k,n), iv_glo_t_err(k,n), re_glo_t(k,n)   ! O, O-B, O-A  
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_t_err )
   deallocate( re_glo_t     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF
     
#else
   IF ( iv % num_satem > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'satem', iv % num_satem
      DO n = 1, iv % num_satem
         write(omb_unit,'(i8)')iv % satem(n) % info % levels
         DO k = 1, iv % satem(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % satem(n) % info % id, &  ! Station
                         iv % satem(n) % info % lat, &       ! Latitude
                         iv % satem(n) % info % lon, &       ! Longitude
                         iv % satem(n) % p(k), &             ! Obs Pressure
                         ob%satem(n)%thickness(k), &
                         iv%satem(n)%thickness(k), &
                         re%satem(n)%thickness(k)            ! O,O-B,O-A
 
         END DO
      END DO
     endif
   ENDIF
#endif   

!  [11] Transfer ssmt1 obs:
#ifdef DM_PARALLEL

  IF ( iv % num_ssmt1_glo > 0 ) THEN

   iccn = iv%num_ssmt1

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % ssmt1(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_ssmt1_glo),STAT=stat)
   allocate(ict (0:iv % num_ssmt1_glo),STAT=stat)
   allocate(lon (1:iv % num_ssmt1_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_ssmt1_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_ssmt1_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_ssmt1_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_ssmt1_glo) , STAT=stat )
   allocate( ob_glo_t(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( re_glo_t(1:n,1:iv % num_ssmt1_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_ssmt1), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_ssmt1), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   iv_glo_t_inv = 0.
   iv_glo_t_qc = 0
   iv_glo_t_err = 0.
   re_glo_t = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%ssmt1%info%id , iv%num_ssmt1*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt1%info%levels, iv%num_ssmt1, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt1%info%lat, iv%num_ssmt1, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt1%info%lon, iv%num_ssmt1, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc(j,i) = ob%ssmt1(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt1*n, MPI_REAL    , ob_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc(j,i) = iv%ssmt1(i)%h(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt1*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc(j,i) = iv%ssmt1(i)%t(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt1*n, MPI_REAL    , iv_glo_t_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc_int(j,i) = iv%ssmt1(i)%t(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_ssmt1*n, MPI_INTEGER  , iv_glo_t_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc(j,i) = iv%ssmt1(i)%t(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt1*n, MPI_REAL    , iv_glo_t_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt1
      do j = 1, iv % ssmt1(i) % info % levels
         ob_loc(j,i) = re%ssmt1(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt1*n, MPI_REAL    , re_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_ssmt1_glo
         do j = i+1 , iv % num_ssmt1_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_t(1,i).eq.ob_glo_t(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_ssmt1_glo
         do j = 1, iv % num_ssmt1_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 156
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 156
               else
                 goto 166
               endif
             endif
           endif
  166    enddo
  156  enddo 

       nu = 0
       DO i = 1, iv % num_ssmt1_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'ssmt1', nu

      i= 0
      DO j = 1, iv % num_ssmt1_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs height
                         ob_glo_t(k,n), iv_glo_t_inv(k,n), iv_glo_t_qc(k,n), iv_glo_t_err(k,n), re_glo_t(k,n)   ! O, O-B, O-A  
          END DO
        endif
      END DO

    endif

   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_t_err )
   deallocate( re_glo_t     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )
   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF

#else
   IF ( iv % num_ssmt1 > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'ssmt1', iv % num_ssmt1
      DO n = 1, iv % num_ssmt1
         write(omb_unit,'(i8)')iv % ssmt1(n) % info % levels
         DO k = 1, iv % ssmt1(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % ssmt1(n) % info % id, &  ! Station
                         iv % ssmt1(n) % info % lat, &       ! Latitude
                         iv % ssmt1(n) % info % lon, &       ! Longitude
                         iv % ssmt1(n) % h(k), &             ! Obs height
                         ob%ssmt1(n)%t(k), &
                         iv%ssmt1(n)%t(k), &
                         re%ssmt1(n)%t(k)                    ! O,O-B,O-A u
         END DO
      END DO
     endif
   ENDIF
#endif

!  [12] Transfer ssmt2 obs:
#ifdef DM_PARALLEL

  IF ( iv % num_ssmt2_glo > 0 ) THEN

   iccn = iv%num_ssmt2

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % ssmt2(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_ssmt2_glo),STAT=stat)
   allocate(ict (0:iv % num_ssmt2_glo),STAT=stat)
   allocate(lon (1:iv % num_ssmt2_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_ssmt2_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_ssmt2_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_ssmt2_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_ssmt2_glo) , STAT=stat )
   allocate( ob_glo_q(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( re_glo_q(1:n,1:iv % num_ssmt2_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_ssmt2), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_ssmt2), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_q = 0.
   ob_glo_p = 0.
   iv_glo_q_inv = 0.
   iv_glo_q_qc = 0
   iv_glo_q_err = 0.
   re_glo_q = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%ssmt2%info%id , iv%num_ssmt2*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt2%info%levels, iv%num_ssmt2, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt2%info%lat, iv%num_ssmt2, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%ssmt2%info%lon, iv%num_ssmt2, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc(j,i) = ob%ssmt2(i)%rh(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt2*n, MPI_REAL    , ob_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc(j,i) = iv%ssmt2(i)%h(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt2*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc(j,i) = iv%ssmt2(i)%rh(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt2*n, MPI_REAL    , iv_glo_q_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc_int(j,i) = iv%ssmt2(i)%rh(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_ssmt2*n, MPI_INTEGER  , iv_glo_q_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc(j,i) = iv%ssmt2(i)%rh(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt2*n, MPI_REAL    , iv_glo_q_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_ssmt2
      do j = 1, iv % ssmt2(i) % info % levels
         ob_loc(j,i) = re%ssmt2(i)%rh(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_ssmt2*n, MPI_REAL    , re_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_ssmt2_glo
         do j = i+1 , iv % num_ssmt2_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_ssmt2_glo
         do j = 1, iv % num_ssmt2_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 157
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 157
               else
                 goto 167
               endif
             endif
           endif
  167    enddo
  157  enddo 

       nu = 0
       DO i = 1, iv % num_ssmt2_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'ssmt2', nu

      i= 0
      DO j = 1, iv % num_ssmt2_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs height
                         ob_glo_q(k,n), iv_glo_q_inv(k,n), iv_glo_q_qc(k,n), iv_glo_q_err(k,n), re_glo_q(k,n)   ! O, O-B, O-A  
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_q     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_q     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF

#else
   IF ( iv % num_ssmt2 > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'ssmt2', iv % num_ssmt2
      DO n = 1, iv % num_ssmt2
         write(omb_unit,'(i8)')iv % ssmt2(n) % info % levels
         DO k = 1, iv % ssmt2(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % ssmt2(n) % info % id, &  ! Station
                         iv % ssmt2(n) % info % lat, &       ! Latitude
                         iv % ssmt2(n) % info % lon, &       ! Longitude
                         iv % ssmt2(n) % h(k), &             ! Obs height
                         ob%ssmt2(n)%rh(k), &
                         iv%ssmt2(n)%rh(k), &
                         re%ssmt2(n)%rh(k)                   ! O,O-B,O-A u
         END DO
      END DO
     endif
   ENDIF
#endif
   
!  [3] Transfer scatterometer obs:
#ifdef DM_PARALLEL

  IF ( iv % num_qscat_glo > 0 ) THEN

   iccn = iv%num_qscat

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_qscat_glo),STAT=stat)
   allocate(ict (0:iv % num_qscat_glo),STAT=stat)
   allocate(lon (1:iv % num_qscat_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_qscat_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_qscat_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_qscat_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_qscat_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_qscat_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.

   call MPI_GATHERV(iv%qscat%info%id , iv%num_qscat*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%info%lat, iv%num_qscat, MPI_REAL    , iv_glo_lat  , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%info%lon, iv%num_qscat, MPI_REAL    , iv_glo_lon  , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%qscat%u       , iv%num_qscat, MPI_REAL    , ob_glo_u    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%qscat%v       , iv%num_qscat, MPI_REAL    , ob_glo_v    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%h       , iv%num_qscat, MPI_REAL    , ob_glo_p    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%qscat%u%inv   , iv%num_qscat, MPI_REAL    , iv_glo_u_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%v%inv   , iv%num_qscat, MPI_REAL    , iv_glo_v_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%qscat%u%qc    , iv%num_qscat, MPI_INTEGER  , iv_glo_u_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%v%qc    , iv%num_qscat, MPI_INTEGER  , iv_glo_v_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%qscat%u%error , iv%num_qscat, MPI_REAL    , iv_glo_u_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%qscat%v%error , iv%num_qscat, MPI_REAL    , iv_glo_v_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%qscat%u       , iv%num_qscat, MPI_REAL    , re_glo_u    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%qscat%v       , iv%num_qscat, MPI_REAL    , re_glo_v    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_qscat_glo
         do j = i+1 , iv % num_qscat_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_u(1,i).eq.ob_glo_u(1,j)) then
               if(ob_glo_v(1,i).eq.ob_glo_v(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_qscat_glo
         do j = 1, iv % num_qscat_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 119
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 119
               else
                 goto 129
               endif
             endif
           endif
  129    enddo
  119  enddo 

       nu = 0
       DO i = 1, iv % num_qscat_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO
       write(omb_unit,'(a5,i8)')'qscat', nu

        i= 0
        DO j = 1, iv % num_qscat_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs height
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A speed
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n)   ! O, O-B, O-A tpw
          endif
        END DO

    endif

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )

  ENDIF

#else
   IF ( iv % num_qscat > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'qscat', iv % num_qscat
      DO n = 1, iv % num_qscat  
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % qscat(n) % info % id, &  ! Station
                         iv % qscat(n) % info % lat, &       ! Latitude
                         iv % qscat(n) % info % lon, &       ! Longitude
                         iv % qscat(n) % h, &                ! Obs height
                         ob%qscat(n)%u, iv%qscat(n)%u, re%qscat(n)%u, &! O, O-B, O-A u
                         ob%qscat(n)%v, iv%qscat(n)%v, re%qscat(n)%v   ! O, O-B, O-A v
      END DO
     endif
   ENDIF
#endif

!   Transfer profiler obs:
#ifdef DM_PARALLEL

  IF ( iv % num_profiler_glo > 0 ) THEN

   iccn = iv%num_profiler

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)


   ilev = 0

     do i = 1, iccn
       ilev = max(iv % profiler(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_profiler_glo),STAT=stat)
   allocate(ict (0:iv % num_profiler_glo),STAT=stat)
   allocate(lon (1:iv % num_profiler_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_profiler_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_profiler_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_profiler_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_profiler_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_profiler_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_profiler), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_profiler), STAT=stat )
   
   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_p = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%profiler%info%id , iv%num_profiler*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%profiler%info%levels, iv%num_profiler, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%profiler%info%lat, iv%num_profiler, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%profiler%info%lon, iv%num_profiler, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = ob%profiler(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = ob%profiler(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = iv%profiler(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = iv%profiler(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = iv%profiler(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc_int(j,i) = iv%profiler(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_profiler*n, MPI_INTEGER  , iv_glo_u_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc_int(j,i) = iv%profiler(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_profiler*n, MPI_INTEGER  , iv_glo_v_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = iv%profiler(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = iv%profiler(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = re%profiler(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_profiler
      do j = 1, iv % profiler(i) % info % levels
         ob_loc(j,i) = re%profiler(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_profiler*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_profiler_glo
         do j = i+1 , iv % num_profiler_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_u(1,i).eq.ob_glo_u(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_profiler_glo
         do j = 1, iv % num_profiler_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 158
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 158
               else
                 goto 168
               endif
             endif
           endif
  168    enddo
  158  enddo 

       nu = 0
       DO i = 1, iv % num_profiler_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

 

      write(omb_unit,'(a8,i8)')'profiler', nu

      i= 0
      DO j = 1, iv % num_profiler_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,2(2f17.7,i8,2f17.7))')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n)   ! O, O-B, O-A v
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lev   )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_p     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF

#else
   IF ( iv % num_profiler > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'profiler', iv % num_profiler
      DO n = 1, iv % num_profiler
         write(omb_unit,'(i8)')iv % profiler(n) % info % levels
         DO k = 1, iv % profiler(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % profiler(n) % info % id, &  ! Station
                         iv % profiler(n) % info % lat, &       ! Latitude
                         iv % profiler(n) % info % lon, &       ! Longitude
                         iv % profiler(n) % p(k), &             ! Obs Pressure
                         ob%profiler(n)%u(k), iv%profiler(n)%u(k), re%profiler(n)%u(k), &! O,O-B,O-A u
                         ob%profiler(n)%v(k), iv%profiler(n)%v(k), re%profiler(n)%v(k) ! O,O-B,O-A v
 
         END DO
      END DO
     endif
   ENDIF
#endif

!   Transfer Buoy obs:
#ifdef DM_PARALLEL

  IF ( iv % num_buoy_glo > 0 ) THEN

   iccn = iv%num_buoy

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then 
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

   allocate(icnt(1:iv % num_buoy_glo),STAT=stat)
   allocate(ict (0:iv % num_buoy_glo),STAT=stat)
   allocate(lon (1:iv % num_buoy_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_buoy_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_buoy_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_buoy_glo) , STAT=stat )
   allocate( ob_glo_u(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( ob_glo_v(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( ob_glo_t(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( ob_glo_p(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( ob_glo_q(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_p_inv(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_p_qc(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_p_err(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( re_glo_u(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( re_glo_v(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( re_glo_t(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( re_glo_p(1:1,1:iv % num_buoy_glo)   , STAT=stat )
   allocate( re_glo_q(1:1,1:iv % num_buoy_glo)   , STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_p = 0.
   ob_glo_q = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_p_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_p_qc = 0
   iv_glo_q_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_p_err = 0.
   iv_glo_q_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_p = 0.
   re_glo_q = 0.

   call MPI_GATHERV(iv%buoy%info%id , iv%num_buoy*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%info%lat, iv%num_buoy, MPI_REAL    , iv_glo_lat  , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%info%lon, iv%num_buoy, MPI_REAL    , iv_glo_lon  , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(ob%buoy%u       , iv%num_buoy, MPI_REAL    , ob_glo_u    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%buoy%v       , iv%num_buoy, MPI_REAL    , ob_glo_v    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%buoy%t       , iv%num_buoy, MPI_REAL    , ob_glo_t    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%buoy%p       , iv%num_buoy, MPI_REAL    , ob_glo_p    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%buoy%q       , iv%num_buoy, MPI_REAL    , ob_glo_q    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%buoy%u%inv   , iv%num_buoy, MPI_REAL    , iv_glo_u_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%v%inv   , iv%num_buoy, MPI_REAL    , iv_glo_v_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%t%inv   , iv%num_buoy, MPI_REAL    , iv_glo_t_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%p%inv   , iv%num_buoy, MPI_REAL    , iv_glo_p_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%q%inv   , iv%num_buoy, MPI_REAL    , iv_glo_q_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%buoy%u%qc    , iv%num_buoy, MPI_INTEGER  , iv_glo_u_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%v%qc    , iv%num_buoy, MPI_INTEGER  , iv_glo_v_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%t%qc    , iv%num_buoy, MPI_INTEGER  , iv_glo_t_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%p%qc    , iv%num_buoy, MPI_INTEGER  , iv_glo_p_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%q%qc    , iv%num_buoy, MPI_INTEGER  , iv_glo_q_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(iv%buoy%u%error , iv%num_buoy, MPI_REAL    , iv_glo_u_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%v%error , iv%num_buoy, MPI_REAL    , iv_glo_v_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%t%error , iv%num_buoy, MPI_REAL    , iv_glo_t_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%p%error , iv%num_buoy, MPI_REAL    , iv_glo_p_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%buoy%q%error , iv%num_buoy, MPI_REAL    , iv_glo_q_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   call MPI_GATHERV(re%buoy%u       , iv%num_buoy, MPI_REAL    , re_glo_u    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%buoy%v       , iv%num_buoy, MPI_REAL    , re_glo_v    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%buoy%t       , iv%num_buoy, MPI_REAL    , re_glo_t    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%buoy%p       , iv%num_buoy, MPI_REAL    , re_glo_p    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%buoy%q       , iv%num_buoy, MPI_REAL    , re_glo_q    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

    if ( myrank .eq. 0       ) then

       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_buoy_glo
         do j = i+1 , iv % num_buoy_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_u(1,i).eq.ob_glo_u(1,j)) then
               if(ob_glo_v(1,i).eq.ob_glo_v(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_buoy_glo
         do j = 1, iv % num_buoy_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 130
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 130
               else
                 goto 140
               endif
             endif
           endif
  140    enddo
  130  enddo 

       nu = 0
       DO i = 1, iv % num_buoy_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO
       write(omb_unit,'(a4,i8)')'buoy', nu

        i= 0
        DO j = 1, iv % num_buoy_glo  
          n = ict(j)
          if( icnt(n).ge.0)then
             i = i + 1
             write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         i, 1, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(1,n), &                ! Obs Pressure
                         ob_glo_u(1,n), iv_glo_u_inv(1,n), iv_glo_u_qc(1,n), iv_glo_u_err(1,n), re_glo_u(1,n), &! O, O-B, O-A u
                         ob_glo_v(1,n), iv_glo_v_inv(1,n), iv_glo_v_qc(1,n), iv_glo_v_err(1,n), re_glo_v(1,n), &! O, O-B, O-A v
                         ob_glo_t(1,n), iv_glo_q_inv(1,n), iv_glo_t_qc(1,n), iv_glo_t_err(1,n), re_glo_t(1,n), &! O, O-B, O-A t
                         ob_glo_p(1,n), iv_glo_p_inv(1,n), iv_glo_p_qc(1,n), iv_glo_p_err(1,n), re_glo_p(1,n), &! O, O-B, O-A p
                         ob_glo_q(1,n), iv_glo_q_inv(1,n), iv_glo_q_qc(1,n), iv_glo_q_err(1,n), re_glo_q(1,n)   ! O, O-B, O-A q
          endif
        END DO

    endif

   deallocate( icnt )
   deallocate( ict )
   deallocate( lon )
   deallocate( iv_glo_id    )
   deallocate( iv_glo_lat   )
   deallocate( iv_glo_lon   )
   deallocate( ob_glo_u     )
   deallocate( ob_glo_v     )
   deallocate( ob_glo_t     )
   deallocate( ob_glo_p     )
   deallocate( ob_glo_q     )
   deallocate( iv_glo_u_inv )
   deallocate( iv_glo_v_inv )
   deallocate( iv_glo_t_inv )
   deallocate( iv_glo_p_inv )
   deallocate( iv_glo_q_inv )
   deallocate( iv_glo_u_qc  )
   deallocate( iv_glo_v_qc  )
   deallocate( iv_glo_t_qc  )
   deallocate( iv_glo_p_qc  )
   deallocate( iv_glo_q_qc  )
   deallocate( iv_glo_u_err )
   deallocate( iv_glo_v_err )
   deallocate( iv_glo_t_err )
   deallocate( iv_glo_p_err )
   deallocate( iv_glo_q_err )
   deallocate( re_glo_u     )
   deallocate( re_glo_v     )
   deallocate( re_glo_t     )
   deallocate( re_glo_p     )
   deallocate( re_glo_q     )

  ENDIF

#else
   IF ( iv % num_buoy > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'buoy', iv % num_buoy
      DO n = 1, iv % num_buoy  
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % buoy(n) % info % id, &  ! Station
                         iv % buoy(n) % info % lat, &       ! Latitude
                         iv % buoy(n) % info % lon, &       ! Longitude
                         ob % buoy(n) % p, &                ! Obs Pressure
                         ob%buoy(n)%u, iv%buoy(n)%u, re%buoy(n)%u, &! O, O-B, O-A u
                         ob%buoy(n)%v, iv%buoy(n)%v, re%buoy(n)%v, &! O, O-B, O-A v
                         ob%buoy(n)%t, iv%buoy(n)%t, re%buoy(n)%t, &! O, O-B, O-A t
                         ob%buoy(n)%p, iv%buoy(n)%p, re%buoy(n)%p, &! O, O-B, O-A p
                         ob%buoy(n)%q, iv%buoy(n)%q, re%buoy(n)%q   ! O, O-B, O-A q
      END DO
     endif
   ENDIF
#endif
!   Transfer TC bogus obs:
#ifdef DM_PARALLEL

  IF ( iv % num_bogus_glo > 0 ) THEN

   iccn = iv%num_bogus

   allocate( iilev(1:all_size) , STAT=stat)
   allocate(lcn(1:all_size),STAT=stat)

   ilev = 0

     do i = 1, iccn
       ilev = max(iv % bogus(i) % info % levels, ilev)
     enddo

   call MPI_GATHER(iccn,1,MPI_INTEGER,icc,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)
   call MPI_GATHER(ilev,1,MPI_INTEGER,iilev,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   if ( myrank .eq. 0       ) then
     isum = 0
     do i = 1, all_size  
       isum = icc(i) + isum
       icn(i) = isum - icc(i) 
       icn5(i) = icn(i)*5
     enddo
   endif

     isum = 0
     lcn = 0
     n = 0
   if ( myrank .eq. 0       ) then 
     do i = 1, all_size
      n = max(n,iilev(i))
     enddo
     do i = 1, all_size  
      isum = icc(i)*n + isum
      lcn(i) = isum - icc(i)*n
     enddo
   endif

   call MPI_BCAST(n,1,MPI_INTEGER,root,MPI_COMM_WORLD, IERR)

   allocate(icnt(1:iv % num_bogus_glo),STAT=stat)
   allocate(ict (0:iv % num_bogus_glo),STAT=stat)
   allocate(lon (1:iv % num_bogus_glo),STAT=stat)
   allocate( iv_glo_id (1:iv % num_bogus_glo) , STAT=stat )
   allocate( iv_glo_lev(1:iv % num_bogus_glo) , STAT=stat )
   allocate( iv_glo_lat(1:iv % num_bogus_glo) , STAT=stat )
   allocate( iv_glo_lon(1:iv % num_bogus_glo) , STAT=stat )
   allocate( ob_glo_u(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_glo_v(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_glo_t(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_glo_q(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_glo_p(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_glo_slp(1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_u_inv(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_v_inv(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_t_inv(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_q_inv(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_slp_inv(1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_u_qc(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_v_qc(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_t_qc(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_q_qc(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_slp_qc(1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_u_err(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_v_err(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_t_err(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_q_err(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( iv_glo_slp_err(1:iv % num_bogus_glo)   , STAT=stat )
   allocate( re_glo_u(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( re_glo_v(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( re_glo_t(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( re_glo_q(1:n,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( re_glo_slp(1:iv % num_bogus_glo)   , STAT=stat )
   allocate( miss_glo_r(1:1,1:iv % num_bogus_glo)   , STAT=stat )
   allocate( ob_loc(1:n,1:iv % num_bogus), STAT=stat )
   allocate( ob_loc_int(1:n,1:iv % num_bogus), STAT=stat )

   icnt = 0
   ict = 0
   lon = 0.
   iv_glo_id = ' '
   iv_glo_lev = 0
   iv_glo_lat = 0.
   iv_glo_lon = 0.
   ob_glo_u = 0.
   ob_glo_v = 0.
   ob_glo_t = 0.
   ob_glo_q = 0.
   ob_glo_p = 0.
   ob_glo_slp = 0.
   iv_glo_u_inv = 0.
   iv_glo_v_inv = 0.
   iv_glo_t_inv = 0.
   iv_glo_q_inv = 0.
   iv_glo_slp_inv = 0.
   iv_glo_u_qc = 0
   iv_glo_v_qc = 0
   iv_glo_t_qc = 0
   iv_glo_q_qc = 0
   iv_glo_slp_qc = 0
   iv_glo_u_err = 0.
   iv_glo_v_err = 0.
   iv_glo_t_err = 0.
   iv_glo_q_err = 0.
   iv_glo_slp_err = 0.
   re_glo_u = 0.
   re_glo_v = 0.
   re_glo_t = 0.
   re_glo_q = 0.
   re_glo_slp = 0.
   miss_glo_r = 0.
   ob_loc = 0.
   ob_loc_int = 0

   call MPI_GATHERV(iv%bogus%info%id , iv%num_bogus*5, MPI_CHARACTER, iv_glo_id , icc*5, icn5, MPI_CHARACTER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%info%levels, iv%num_bogus, MPI_INTEGER  , iv_glo_lev, icc, icn, MPI_INTEGER  , root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%info%lat, iv%num_bogus, MPI_REAL    , iv_glo_lat, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%info%lon, iv%num_bogus, MPI_REAL    , iv_glo_lon, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(ob%bogus%slp      , iv%num_bogus, MPI_REAL    , ob_glo_slp    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%slp%inv  , iv%num_bogus, MPI_REAL    , iv_glo_slp_inv, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%slp%qc   , iv%num_bogus, MPI_INTEGER  , iv_glo_slp_qc , icc, icn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(iv%bogus%slp%error, iv%num_bogus, MPI_REAL    , iv_glo_slp_err, icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(re%bogus%slp      , iv%num_bogus, MPI_REAL    , re_glo_slp    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)
   call MPI_GATHERV(missing_r         , iv%num_bogus, MPI_REAL    , miss_glo_r    , icc, icn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = ob%bogus(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , ob_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = ob%bogus(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , ob_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = ob%bogus(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , ob_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = ob%bogus(i)%q(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , ob_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%p(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , ob_glo_p    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%u(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_u_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%v(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_v_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%t(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_t_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%q(j)%inv
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_q_inv, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc_int(j,i) = iv%bogus(i)%u(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_bogus*n, MPI_INTEGER  , iv_glo_u_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc_int(j,i) = iv%bogus(i)%v(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_bogus*n, MPI_INTEGER  , iv_glo_v_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc_int(j,i) = iv%bogus(i)%t(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_bogus*n, MPI_INTEGER  , iv_glo_t_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc_int(j,i) = iv%bogus(i)%q(j)%qc
      enddo
   enddo
   call MPI_GATHERV(ob_loc_int     , iv%num_bogus*n, MPI_INTEGER  , iv_glo_q_qc, icc*n, lcn, MPI_INTEGER, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%u(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_u_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%v(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_v_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%t(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_t_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = iv%bogus(i)%q(j)%error
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , iv_glo_q_err, icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)



   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = re%bogus(i)%u(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , re_glo_u    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = re%bogus(i)%v(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , re_glo_v    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = re%bogus(i)%t(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , re_glo_t    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)

   do i = 1, iv % num_bogus
      do j = 1, iv % bogus(i) % info % levels
         ob_loc(j,i) = re%bogus(i)%q(j)
      enddo
   enddo
   call MPI_GATHERV(ob_loc         , iv%num_bogus*n, MPI_REAL    , re_glo_q    , icc*n, lcn, MPI_REAL, root, MPI_COMM_WORLD, IERR)


    if ( myrank .eq. 0       ) then
       icnt = 999   
       ict = -999
       nu = 0

       lon = iv_glo_lon
       do i = 1, iv % num_bogus_glo
         do j = i+1 , iv % num_bogus_glo  
           if(iv_glo_lon(i).eq.iv_glo_lon(j)) then
             if(iv_glo_lat(i).eq.iv_glo_lat(j)) then
               if(ob_glo_p(1,i).eq.ob_glo_p(1,j)) then
               if(ob_glo_q(1,i).eq.ob_glo_q(1,j)) then
                 nu = nu + 1
                 icnt(i) = -999 
               endif
               endif
             endif
           endif
           if(lon(i).ge.lon(j)) then
             lon_tmp = lon(i)
             lon(i) = lon(j)
             lon(j) = lon_tmp
           endif
         enddo
       enddo

       do i = 1, iv % num_bogus_glo
         do j = 1, iv % num_bogus_glo
           if(lon(i).eq.iv_glo_lon(j)) then
             if(i.eq.1) then
               ict(i) = j
               goto 159
             else
               n = 0
               do k = i-1, 1, -1
                 if(ict(k).eq.j) then
                   n = n + 1
                 endif
               enddo
               if(n.eq.0) then 
                 ict(i) = j
                 goto 159
               else
                 goto 169
               endif
             endif
           endif
  169    enddo
  159  enddo 

       nu = 0
       DO i = 1, iv % num_bogus_glo
         if( icnt(i).ge.0) nu = nu + 1
       ENDDO

      write(omb_unit,'(a5,i8)')'bogus', nu

      i= 0
      DO j = 1, iv % num_profiler_glo  
        n = ict(j)
        if( icnt(n).ge.0)then
          i = i + 1
          write(omb_unit,'(2i8,a5,2f9.3,f17.7,2f17.7,i8,2f17.7)')&
                         i,1,iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         miss_glo_r(1,n),    &
                         ob_glo_slp(n),iv_glo_slp_inv(n), iv_glo_slp_qc(n), iv_glo_slp_err(n),re_glo_slp(n)
          write(omb_unit,'(i8)')iv_glo_lev(n)
          DO k = 1, iv_glo_lev(n)
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,4(2f17.7,i8,2f17.7))')&
                         i, k, iv_glo_id(n), &  ! Station
                         iv_glo_lat(n), &       ! Latitude
                         iv_glo_lon(n), &       ! Longitude
                         ob_glo_p(k,n), &                ! Obs Pressure
                         ob_glo_u(k,n), iv_glo_u_inv(k,n), iv_glo_u_qc(k,n), iv_glo_u_err(k,n), re_glo_u(k,n), &! O, O-B, O-A u
                         ob_glo_v(k,n), iv_glo_v_inv(k,n), iv_glo_v_qc(k,n), iv_glo_v_err(k,n), re_glo_v(k,n), &! O, O-B, O-A v
                         ob_glo_t(k,n), iv_glo_t_inv(k,n), iv_glo_t_qc(k,n), iv_glo_t_err(k,n), re_glo_t(k,n), &! O, O-B, O-A t
                         ob_glo_q(k,n), iv_glo_q_inv(k,n), iv_glo_q_qc(k,n), iv_glo_q_err(k,n), re_glo_q(k,n)   ! O, O-B, O-A q
          END DO
        endif
      END DO

    endif

   deallocate(icnt)
   deallocate(ict )
   deallocate(lon )
   deallocate( iv_glo_id      )
   deallocate( iv_glo_lev     )
   deallocate( iv_glo_lat     )
   deallocate( iv_glo_lon     )
   deallocate( ob_glo_u       )
   deallocate( ob_glo_v       )
   deallocate( ob_glo_t       )
   deallocate( ob_glo_q       )
   deallocate( ob_glo_p       )
   deallocate( ob_glo_slp     )
   deallocate( iv_glo_u_inv   )
   deallocate( iv_glo_v_inv   )
   deallocate( iv_glo_t_inv   )
   deallocate( iv_glo_q_inv   )
   deallocate( iv_glo_slp_inv )
   deallocate( iv_glo_u_qc    )
   deallocate( iv_glo_v_qc    )
   deallocate( iv_glo_t_qc    )
   deallocate( iv_glo_q_qc    )
   deallocate( iv_glo_slp_qc  )
   deallocate( iv_glo_u_err   )
   deallocate( iv_glo_v_err   )
   deallocate( iv_glo_t_err   )
   deallocate( iv_glo_q_err   )
   deallocate( iv_glo_slp_err )
   deallocate( re_glo_u       )
   deallocate( re_glo_v       )
   deallocate( re_glo_t       )
   deallocate( re_glo_q       )
   deallocate( re_glo_slp     )
   deallocate( miss_glo_r     )
   deallocate( ob_loc    )
   deallocate( ob_loc_int    )

   deallocate( lcn          )
   deallocate( iilev        )

  ENDIF

#else
   IF ( iv % num_bogus > 0 ) THEN
     if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a,i8)')'bogus', iv % num_bogus
      DO n = 1, iv % num_bogus
         write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, 1, iv % bogus(n) % info % id, &  ! Station
                         iv % bogus(n) % info % lat, &       ! Latitude
                         iv % bogus(n) % info % lon, &       ! Longitude
                         missing_r,                  &
                         ob%bogus(n)%slp, iv%bogus(n)%slp, re%bogus(n)%slp    ! O, O-B, O-A p
         write(omb_unit,'(i8)')iv % bogus(n) % info % levels
         DO k = 1, iv % bogus(n) % info % levels
            write(omb_unit,'(2i8,a5,2f9.3,f17.7,5(2f17.7,i8,2f17.7))')&
                         n, k, iv % bogus(n) % info % id, &  ! Station
                         iv % bogus(n) % info % lat, &       ! Latitude
                         iv % bogus(n) % info % lon, &       ! Longitude
                         iv % bogus(n) % p(k), &             ! Obs Pressure
                         ob%bogus(n)%u(k), iv%bogus(n)%u(k), re%bogus(n)%u(k), &! O,O-B,O-A u
                         ob%bogus(n)%v(k), iv%bogus(n)%v(k), re%bogus(n)%v(k), &! O,O-B,O-A v
                         ob%bogus(n)%t(k), iv%bogus(n)%t(k), re%bogus(n)%t(k), &! O,O-B,O-A t
                         ob%bogus(n)%q(k), iv%bogus(n)%q(k), re%bogus(n)%q(k)   ! O,O-B,O-A q 

         END DO
      END DO
     end if
   ENDIF
   if ( wrf_dm_on_monitor() ) then
      write(omb_unit,'(a5,i8)')'*****', 0
   endif
#endif

#ifdef DM_PARALLEL
   if ( myrank .eq. 0       ) then
      write(omb_unit,'(a5,i8)')'*****', 0
   endif
   deallocate(icc)
   deallocate(icn)
   deallocate(icn5)
#endif
END SUBROUTINE da_write_obs

