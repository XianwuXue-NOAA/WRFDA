!                           DISCLAIMER
!
!   This file was generated by TAF version 1.7.18
!
!   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
!   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
!   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
!   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
!   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
!   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
!   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
!   OF THE POSSIBILITY OF SUCH DAMAGES.
!
!                           Haftungsbeschraenkung
!   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
!   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
!   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
!   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
!   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
!   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
!   Mitteilung darueber an FastOpt.
!
subroutine g_integrate( grid, u_1, g_u_1, u_2, g_u_2, ru, v_1, g_v_1, v_2, g_v_2, rv, w_1, g_w_1, w_2, g_w_2, ww, rw, ph_1, g_ph_1,&
& ph_2, g_ph_2, phb, php, t_1, g_t_1, t_2, g_t_2, t_init, mu_1, g_mu_1, mu_2, g_mu_2, mub, mudf, g_mudf, tke_2, p, g_p, al, g_al, &
&alt, alb, rdz, rdzw, pb, fnm, fnp, rdnw, rdn, dnw, znu, z, g_z, moist_1, g_moist_1, moist_2, g_moist_2, u_b, g_u_b, u_bt, g_u_bt, &
&v_b, g_v_b, v_bt, g_v_bt, w_b, g_w_b, w_bt, g_w_bt, ph_b, g_ph_b, ph_bt, g_ph_bt, t_b, g_t_b, t_bt, g_t_bt, mu_b, g_mu_b, mu_bt, &
&g_mu_bt, rqv_bt, g_rqv_bt, rqc_bt, rqr_bt, rqi_bt, rqs_bt, rqg_bt, fcx, gcx, h_diabatic, msft, msfu, msfv, f, e, sina, cosa, ht, &
&u_base, v_base, qv_base, z_base, defor11, defor22, defor12, defor33, defor13, defor23, xkmv, xkmh, xkmhd, g_xkmhd, xkhv, xkhh )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.7.18  **
!******************************************************************
!******************************************************************
!==============================================
! referencing used modules
!==============================================
use module_domain
use module_driver_constants
use module_configure

!==============================================
! all entries are defined explicitly
!==============================================
implicit none

!==============================================
! declare arguments
!==============================================
real al(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alb(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real alt(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real cosa(grid%sm31:grid%em31,grid%sm33:grid%em33)
real defor11(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real defor12(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real defor13(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real defor22(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real defor23(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real defor33(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real dnw(grid%sm32:grid%em32)
real e(grid%sm31:grid%em31,grid%sm33:grid%em33)
real f(grid%sm31:grid%em31,grid%sm33:grid%em33)
real fcx(grid%spec_bdy_width)
real fnm(grid%sm32:grid%em32)
real fnp(grid%sm32:grid%em32)
real g_al(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_moist_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real g_moist_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real g_mu_1(grid%sm31:grid%em31,grid%sm33:grid%em33)
real g_mu_2(grid%sm31:grid%em31,grid%sm33:grid%em33)
real g_mu_b(max(grid%ed31,grid%ed33),1,grid%spec_bdy_width,4)
real g_mu_bt(max(grid%ed31,grid%ed33),1,grid%spec_bdy_width,4)
real g_mudf(grid%sm31:grid%em31,grid%sm33:grid%em33)
real g_p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_ph_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_ph_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_ph_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_ph_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_rqv_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_t_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_t_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_t_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_t_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_u_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_u_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_u_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_u_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_v_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_v_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_v_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_v_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_w_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_w_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_w_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_w_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real g_xkmhd(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_z(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real gcx(grid%spec_bdy_width)
real h_diabatic(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ht(grid%sm31:grid%em31,grid%sm33:grid%em33)
real moist_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real moist_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33,num_moist)
real msft(grid%sm31:grid%em31,grid%sm33:grid%em33)
real msfu(grid%sm31:grid%em31,grid%sm33:grid%em33)
real msfv(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_1(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_2(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mu_b(max(grid%ed31,grid%ed33),1,grid%spec_bdy_width,4)
real mu_bt(max(grid%ed31,grid%ed33),1,grid%spec_bdy_width,4)
real mub(grid%sm31:grid%em31,grid%sm33:grid%em33)
real mudf(grid%sm31:grid%em31,grid%sm33:grid%em33)
real p(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real pb(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real ph_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real ph_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real phb(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real php(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real qv_base(grid%sm32:grid%em32)
real rdn(grid%sm32:grid%em32)
real rdnw(grid%sm32:grid%em32)
real rdz(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rdzw(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rqc_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real rqg_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real rqi_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real rqr_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real rqs_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real rqv_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real ru(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rv(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real rw(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real sina(grid%sm31:grid%em31,grid%sm33:grid%em33)
real t_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real t_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real t_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real t_init(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real tke_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real u_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real u_base(grid%sm32:grid%em32)
real u_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real v_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real v_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real v_base(grid%sm32:grid%em32)
real v_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real w_1(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_2(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real w_b(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real w_bt(max(grid%ed31,grid%ed33),grid%sd32:grid%ed32,grid%spec_bdy_width,4)
real ww(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkhh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkhv(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmh(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmhd(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real xkmv(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real z(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real z_base(grid%sm32:grid%em32)
real znu(grid%sm32:grid%em32)

!==============================================
! declare local variables
!==============================================
real g_altj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_phpj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_ruj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_rvj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_rwj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
real g_wwj(grid%sm31:grid%em31,grid%sm32:grid%em32,grid%sm33:grid%em33)
integer :: integrate_local_nstep = 10
integer integrate_local_step

!==============================================
! declare derived type variables
!==============================================
type (grid_config_rec_type) :: config_flags

!----------------------------------------------
! TANGENT LINEAR AND FUNCTION STATEMENTS
!----------------------------------------------
do integrate_local_step = 1, integrate_local_nstep
  call g_solve_em( grid,config_flags,u_1,g_u_1,u_2,g_u_2,ru,g_ruj,v_1,g_v_1,v_2,g_v_2,rv,g_rvj,w_1,g_w_1,w_2,g_w_2,ww,g_wwj,rw,&
&g_rwj,ph_1,g_ph_1,ph_2,g_ph_2,phb,php,g_phpj,t_1,g_t_1,t_2,g_t_2,t_init,mu_1,g_mu_1,mu_2,g_mu_2,mub,mudf,g_mudf,tke_2,p,g_p,al,&
&g_al,alt,g_altj,alb,rdz,rdzw,pb,fnm,fnp,rdnw,rdn,dnw,znu,z,g_z,moist_1,g_moist_1,moist_2,g_moist_2,u_b,g_u_b,u_bt,g_u_bt,v_b,&
&g_v_b,v_bt,g_v_bt,w_b,g_w_b,w_bt,g_w_bt,ph_b,g_ph_b,ph_bt,g_ph_bt,t_b,g_t_b,t_bt,g_t_bt,mu_b,g_mu_b,mu_bt,g_mu_bt,rqv_bt,&
&g_rqv_bt,rqc_bt,rqr_bt,rqi_bt,rqs_bt,rqg_bt,fcx,gcx,h_diabatic,msft,msfu,msfv,f,e,sina,cosa,ht,u_base,v_base,qv_base,z_base,&
&defor11,defor22,defor12,defor33,defor13,defor23,xkmv,xkmh,xkmhd,g_xkmhd,xkhv,xkhh )
end do

end subroutine g_integrate


